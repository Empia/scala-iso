///*
// * Copyright 2017 Vitor S. Vieira
// *
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// *
// *     http://www.apache.org/licenses/LICENSE-2.0
// *
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// */
//
//package com.vitorsvieira.iso
//
//import com.vitorsvieira.iso.ISOCountry.ISOCountry
//
///**
// * ISO 3166-2 is part of the ISO 3166 standard
// * and defines codes for identifying the principal subdivisions
// * (e.g., provinces or states) of all countries coded in ISO 3166-1.
// * The official name of the standard is
// * "Codes for the representation of names of countries and their subdivisions â€“ Part 2: Country subdivision code."
// */
//object ISOCountrySubdivision extends Enum {
//
//  sealed class EnumVal(val country: ISOCountry, val subdivision: String, val value: String) extends Value
//  type ISOCountrySubdivision = EnumVal
//  // format: OFF
//  val `Andorra la Vella`                           = new ISOCountrySubdivision(ISOCountry.ANDORRA, "Andorra la Vella", "AD-07")
//  val `Canillo`                                    = new ISOCountrySubdivision(ISOCountry.ANDORRA, "Canillo", "AD-02")
//  val `Encamp`                                     = new ISOCountrySubdivision(ISOCountry.ANDORRA, "Encamp", "AD-03")
//  val `Escaldes-Engordany`                         = new ISOCountrySubdivision(ISOCountry.ANDORRA, "Escaldes-Engordany", "AD-08")
//  val `La Massana`                                 = new ISOCountrySubdivision(ISOCountry.ANDORRA, "La Massana", "AD-04")
//  val `Ordino`                                     = new ISOCountrySubdivision(ISOCountry.ANDORRA, "Ordino", "AD-05")
//  val `Sant Julia de Loria`                        = new ISOCountrySubdivision(ISOCountry.ANDORRA, "Sant Julia de Loria", "AD-06")
//  val `'Ajman`                                     = new ISOCountrySubdivision(ISOCountry.UNITED_ARAB_EMIRATES, "'Ajman", "AE-AJ")
//  val `Abu Zaby`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_ARAB_EMIRATES, "Abu Zaby", "AE-AZ")
//  val `Al Fujayrah`                                = new ISOCountrySubdivision(ISOCountry.UNITED_ARAB_EMIRATES, "Al Fujayrah", "AE-FU")
//  val `Ash Shariqah`                               = new ISOCountrySubdivision(ISOCountry.UNITED_ARAB_EMIRATES, "Ash Shariqah", "AE-SH")
//  val `Dubayy`                                     = new ISOCountrySubdivision(ISOCountry.UNITED_ARAB_EMIRATES, "Dubayy", "AE-DU")
//  val `Ra's al Khaymah`                            = new ISOCountrySubdivision(ISOCountry.UNITED_ARAB_EMIRATES, "Ra's al Khaymah", "AE-RK")
//  val `Umm al Qaywayn`                             = new ISOCountrySubdivision(ISOCountry.UNITED_ARAB_EMIRATES, "Umm al Qaywayn", "AE-UQ")
//  val `Badakhshan`                                 = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Badakhshan", "AF-BDS")
//  val `Badghis`                                    = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Badghis", "AF-BDG")
//  val `Baghlan`                                    = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Baghlan", "AF-BGL")
//  val `Balkh`                                      = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Balkh", "AF-BAL")
//  val `Bamyan`                                     = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Bamyan", "AF-BAM")
//  val `Daykundi`                                   = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Daykundi", "AF-DAY")
//  val `Farah`                                      = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Farah", "AF-FRA")
//  val `Faryab`                                     = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Faryab", "AF-FYB")
//  val `Ghazni`                                     = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Ghazni", "AF-GHA")
//  val `Ghor`                                       = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Ghor", "AF-GHO")
//  val `Helmand`                                    = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Helmand", "AF-HEL")
//  val `Herat`                                      = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Herat", "AF-HER")
//  val `Jowzjan`                                    = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Jowzjan", "AF-JOW")
//  val `Kabul`                                      = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Kabul", "AF-KAB")
//  val `Kandahar`                                   = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Kandahar", "AF-KAN")
//  val `Kapisa`                                     = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Kapisa", "AF-KAP")
//  val `Khost`                                      = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Khost", "AF-KHO")
//  val `Kunar`                                      = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Kunar", "AF-KNR")
//  val `Kunduz`                                     = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Kunduz", "AF-KDZ")
//  val `Laghman`                                    = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Laghman", "AF-LAG")
//  val `Logar`                                      = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Logar", "AF-LOG")
//  val `Nangarhar`                                  = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Nangarhar", "AF-NAN")
//  val `Nimroz`                                     = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Nimroz", "AF-NIM")
//  val `Nuristan`                                   = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Nuristan", "AF-NUR")
//  val `Paktika`                                    = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Paktika", "AF-PKA")
//  val `Paktiya`                                    = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Paktiya", "AF-PIA")
//  val `Panjshayr`                                  = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Panjshayr", "AF-PAN")
//  val `Parwan`                                     = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Parwan", "AF-PAR")
//  val `Samangan`                                   = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Samangan", "AF-SAM")
//  val `Sar-e pul`                                  = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Sar-e pul", "AF-SAR")
//  val `Takhar`                                     = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Takhar", "AF-TAK")
//  val `Uruzgan`                                    = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Uruzgan", "AF-URU")
//  val `Wardak`                                     = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Wardak", "AF-WAR")
//  val `Zabul`                                      = new ISOCountrySubdivision(ISOCountry.AFGHANISTAN, "Zabul", "AF-ZAB")
//  val `Saint John Antigua and Barbuda`             = new ISOCountrySubdivision(ISOCountry.ANTIGUA_AND_BARBUDA, "Saint John", "AG-04")
//  val `Saint Mary Antigua and Barbuda`             = new ISOCountrySubdivision(ISOCountry.ANTIGUA_AND_BARBUDA, "Saint Mary", "AG-05")
//  val `Saint Paul Antigua and Barbuda`             = new ISOCountrySubdivision(ISOCountry.ANTIGUA_AND_BARBUDA, "Saint Paul", "AG-06")
//  val `Berat`                                      = new ISOCountrySubdivision(ISOCountry.ALBANIA, "Berat", "AL-01")
//  val `Diber`                                      = new ISOCountrySubdivision(ISOCountry.ALBANIA, "Diber", "AL-09")
//  val `Durres`                                     = new ISOCountrySubdivision(ISOCountry.ALBANIA, "Durres", "AL-02")
//  val `Elbasan`                                    = new ISOCountrySubdivision(ISOCountry.ALBANIA, "Elbasan", "AL-03")
//  val `Fier`                                       = new ISOCountrySubdivision(ISOCountry.ALBANIA, "Fier", "AL-04")
//  val `Gjirokaster`                                = new ISOCountrySubdivision(ISOCountry.ALBANIA, "Gjirokaster", "AL-05")
//  val `Korce`                                      = new ISOCountrySubdivision(ISOCountry.ALBANIA, "Korce", "AL-06")
//  val `Kukes`                                      = new ISOCountrySubdivision(ISOCountry.ALBANIA, "Kukes", "AL-07")
//  val `Lezhe`                                      = new ISOCountrySubdivision(ISOCountry.ALBANIA, "Lezhe", "AL-08")
//  val `Shkoder`                                    = new ISOCountrySubdivision(ISOCountry.ALBANIA, "Shkoder", "AL-10")
//  val `Tirane`                                     = new ISOCountrySubdivision(ISOCountry.ALBANIA, "Tirane", "AL-11")
//  val `Vlore`                                      = new ISOCountrySubdivision(ISOCountry.ALBANIA, "Vlore", "AL-12")
//  val `Aragacotn`                                  = new ISOCountrySubdivision(ISOCountry.ARMENIA, "Aragacotn", "AM-AG")
//  val `Ararat`                                     = new ISOCountrySubdivision(ISOCountry.ARMENIA, "Ararat", "AM-AR")
//  val `Armavir`                                    = new ISOCountrySubdivision(ISOCountry.ARMENIA, "Armavir", "AM-AV")
//  val `Erevan`                                     = new ISOCountrySubdivision(ISOCountry.ARMENIA, "Erevan", "AM-ER")
//  val `Gegark'unik'`                               = new ISOCountrySubdivision(ISOCountry.ARMENIA, "Gegark'unik'", "AM-GR")
//  val `Kotayk'`                                    = new ISOCountrySubdivision(ISOCountry.ARMENIA, "Kotayk'", "AM-KT")
//  val `Lori`                                       = new ISOCountrySubdivision(ISOCountry.ARMENIA, "Lori", "AM-LO")
//  val `Sirak`                                      = new ISOCountrySubdivision(ISOCountry.ARMENIA, "Sirak", "AM-SH")
//  val `Syunik'`                                    = new ISOCountrySubdivision(ISOCountry.ARMENIA, "Syunik'", "AM-SU")
//  val `Tavus`                                      = new ISOCountrySubdivision(ISOCountry.ARMENIA, "Tavus", "AM-TV")
//  val `Vayoc Jor`                                  = new ISOCountrySubdivision(ISOCountry.ARMENIA, "Vayoc Jor", "AM-VD")
//  val `Bengo`                                      = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Bengo", "AO-BGO")
//  val `Benguela`                                   = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Benguela", "AO-BGU")
//  val `Bie`                                        = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Bie", "AO-BIE")
//  val `Cabinda`                                    = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Cabinda", "AO-CAB")
//  val `Cunene`                                     = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Cunene", "AO-CNN")
//  val `Huambo`                                     = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Huambo", "AO-HUA")
//  val `Huila Angola`                               = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Huila", "AO-HUI")
//  val `Kuando Kubango`                             = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Kuando Kubango", "AO-CCU")
//  val `Kwanza Norte`                               = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Kwanza Norte", "AO-CNO")
//  val `Kwanza Sul`                                 = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Kwanza Sul", "AO-CUS")
//  val `Luanda`                                     = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Luanda", "AO-LUA")
//  val `Lunda Norte`                                = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Lunda Norte", "AO-LNO")
//  val `Lunda Sul`                                  = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Lunda Sul", "AO-LSU")
//  val `Malange`                                    = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Malange", "AO-MAL")
//  val `Moxico`                                     = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Moxico", "AO-MOX")
//  val `Namibe`                                     = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Namibe", "AO-NAM")
//  val `Uige`                                       = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Uige", "AO-UIG")
//  val `Zaire`                                      = new ISOCountrySubdivision(ISOCountry.ANGOLA, "Zaire", "AO-ZAI")
//  val `Buenos Aires`                               = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Buenos Aires", "AR-B")
//  val `Catamarca`                                  = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Catamarca", "AR-K")
//  val `Chaco`                                      = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Chaco", "AR-H")
//  val `Chubut`                                     = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Chubut", "AR-U")
//  val `Ciudad Autonoma de Buenos Aires`            = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Ciudad Autonoma de Buenos Aires", "AR-C")
//  val `Cordoba - Argentina`                        = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Cordoba", "AR-X")
//  val `Corrientes`                                 = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Corrientes", "AR-W")
//  val `Entre Rios`                                 = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Entre Rios", "AR-E")
//  val `Formosa`                                    = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Formosa", "AR-P")
//  val `Jujuy`                                      = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Jujuy", "AR-Y")
//  val `La Pampa`                                   = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "La Pampa", "AR-L")
//  val `La Rioja - Argentina`                       = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "La Rioja", "AR-F")
//  val `Mendoza`                                    = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Mendoza", "AR-M")
//  val `Misiones - Argentina`                       = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Misiones", "AR-N")
//  val `Neuquen`                                    = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Neuquen", "AR-Q")
//  val `Rio Negro - Argentina`                      = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Rio Negro", "AR-R")
//  val `Salta`                                      = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Salta", "AR-A")
//  val `San Juan - Argentina`                       = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "San Juan", "AR-J")
//  val `San Luis`                                   = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "San Luis", "AR-D")
//  val `Santa Cruz - Argentina`                     = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Santa Cruz", "AR-Z")
//  val `Santa Fe`                                   = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Santa Fe", "AR-S")
//  val `Santiago del Estero`                        = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Santiago del Estero", "AR-G")
//  val `Tierra del Fuego`                           = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Tierra del Fuego", "AR-V")
//  val `Tucuman`                                    = new ISOCountrySubdivision(ISOCountry.ARGENTINA, "Tucuman", "AR-T")
//  val `Burgenland`                                 = new ISOCountrySubdivision(ISOCountry.AUSTRIA, "Burgenland", "AT-1")
//  val `Karnten`                                    = new ISOCountrySubdivision(ISOCountry.AUSTRIA, "Karnten", "AT-2")
//  val `Niederosterreich`                           = new ISOCountrySubdivision(ISOCountry.AUSTRIA, "Niederosterreich", "AT-3")
//  val `Oberosterreich`                             = new ISOCountrySubdivision(ISOCountry.AUSTRIA, "Oberosterreich", "AT-4")
//  val `Salzburg`                                   = new ISOCountrySubdivision(ISOCountry.AUSTRIA, "Salzburg", "AT-5")
//  val `Steiermark`                                 = new ISOCountrySubdivision(ISOCountry.AUSTRIA, "Steiermark", "AT-6")
//  val `Tirol`                                      = new ISOCountrySubdivision(ISOCountry.AUSTRIA, "Tirol", "AT-7")
//  val `Vorarlberg`                                 = new ISOCountrySubdivision(ISOCountry.AUSTRIA, "Vorarlberg", "AT-8")
//  val `Wien`                                       = new ISOCountrySubdivision(ISOCountry.AUSTRIA, "Wien", "AT-9")
//  val `Australian Capital Territory`               = new ISOCountrySubdivision(ISOCountry.AUSTRALIA, "Australian Capital Territory", "AU-ACT")
//  val `New South Wales`                            = new ISOCountrySubdivision(ISOCountry.AUSTRALIA, "New South Wales", "AU-NSW")
//  val `Northern Territory`                         = new ISOCountrySubdivision(ISOCountry.AUSTRALIA, "Northern Territory", "AU-NT")
//  val `Queensland`                                 = new ISOCountrySubdivision(ISOCountry.AUSTRALIA, "Queensland", "AU-QLD")
//  val `South Australia`                            = new ISOCountrySubdivision(ISOCountry.AUSTRALIA, "South Australia", "AU-SA")
//  val `Tasmania`                                   = new ISOCountrySubdivision(ISOCountry.AUSTRALIA, "Tasmania", "AU-TAS")
//  val `Victoria - Australia`                       = new ISOCountrySubdivision(ISOCountry.AUSTRALIA, "Victoria", "AU-VIC")
//  val `Western Australia`                          = new ISOCountrySubdivision(ISOCountry.AUSTRALIA, "Western Australia", "AU-WA")
//  val `Abseron`                                    = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Abseron", "AZ-ABS")
//  val `Agcabadi`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Agcabadi", "AZ-AGC")
//  val `Agdam`                                      = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Agdam", "AZ-AGM")
//  val `Agdas`                                      = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Agdas", "AZ-AGS")
//  val `Agstafa`                                    = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Agstafa", "AZ-AGA")
//  val `Agsu`                                       = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Agsu", "AZ-AGU")
//  val `Astara`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Astara", "AZ-AST")
//  val `Baki`                                       = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Baki", "AZ-BA")
//  val `Balakan`                                    = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Balakan", "AZ-BAL")
//  val `Barda`                                      = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Barda", "AZ-BAR")
//  val `Beylaqan`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Beylaqan", "AZ-BEY")
//  val `Bilasuvar`                                  = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Bilasuvar", "AZ-BIL")
//  val `Cabrayil`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Cabrayil", "AZ-CAB")
//  val `Calilabad`                                  = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Calilabad", "AZ-CAL")
//  val `Daskasan`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Daskasan", "AZ-DAS")
//  val `Fuzuli`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Fuzuli", "AZ-FUZ")
//  val `Gadabay`                                    = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Gadabay", "AZ-GAD")
//  val `Ganca`                                      = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Ganca", "AZ-GA")
//  val `Goranboy`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Goranboy", "AZ-GOR")
//  val `Goycay`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Goycay", "AZ-GOY")
//  val `Goygol`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Goygol", "AZ-GYG")
//  val `Haciqabul`                                  = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Haciqabul", "AZ-HAC")
//  val `Imisli`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Imisli", "AZ-IMI")
//  val `Ismayilli`                                  = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Ismayilli", "AZ-ISM")
//  val `Kalbacar`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Kalbacar", "AZ-KAL")
//  val `Lacin`                                      = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Lacin", "AZ-LAC")
//  val `Lankaran`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Lankaran", "AZ-LAN")
//  val `Lerik`                                      = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Lerik", "AZ-LER")
//  val `Masalli`                                    = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Masalli", "AZ-MAS")
//  val `Mingacevir`                                 = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Mingacevir", "AZ-MI")
//  val `Naftalan`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Naftalan", "AZ-NA")
//  val `Naxcivan`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Naxcivan", "AZ-NV")
//  val `Neftcala`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Neftcala", "AZ-NEF")
//  val `Oguz`                                       = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Oguz", "AZ-OGU")
//  val `Qabala`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Qabala", "AZ-QAB")
//  val `Qax`                                        = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Qax", "AZ-QAX")
//  val `Qazax`                                      = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Qazax", "AZ-QAZ")
//  val `Qobustan`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Qobustan", "AZ-QOB")
//  val `Quba`                                       = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Quba", "AZ-QBA")
//  val `Qubadli`                                    = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Qubadli", "AZ-QBI")
//  val `Qusar`                                      = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Qusar", "AZ-QUS")
//  val `Saatli`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Saatli", "AZ-SAT")
//  val `Sabirabad`                                  = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Sabirabad", "AZ-SAB")
//  val `Saki`                                       = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Saki", "AZ-SAK")
//  val `Salyan`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Salyan", "AZ-SAL")
//  val `Samaxi`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Samaxi", "AZ-SMI")
//  val `Samkir`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Samkir", "AZ-SKR")
//  val `Samux`                                      = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Samux", "AZ-SMX")
//  val `Sirvan`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Sirvan", "AZ-SR")
//  val `Sumqayit`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Sumqayit", "AZ-SM")
//  val `Susa`                                       = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Susa", "AZ-SUS")
//  val `Tartar`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Tartar", "AZ-TAR")
//  val `Tovuz`                                      = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Tovuz", "AZ-TOV")
//  val `Ucar`                                       = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Ucar", "AZ-UCA")
//  val `Xacmaz`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Xacmaz", "AZ-XAC")
//  val `Xankandi`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Xankandi", "AZ-XA")
//  val `Xizi`                                       = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Xizi", "AZ-XIZ")
//  val `Xocali`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Xocali", "AZ-XCI")
//  val `Xocavand`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Xocavand", "AZ-XVD")
//  val `Yardimli`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Yardimli", "AZ-YAR")
//  val `Yevlax`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Yevlax", "AZ-YEV")
//  val `Zangilan`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Zangilan", "AZ-ZAN")
//  val `Zaqatala`                                   = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Zaqatala", "AZ-ZAQ")
//  val `Zardab`                                     = new ISOCountrySubdivision(ISOCountry.AZERBAIJAN, "Zardab", "AZ-ZAR")
//  val `Federacija Bosna i Hercegovina`             = new ISOCountrySubdivision(ISOCountry.BOSNIA_AND_HERZEGOVINA, "Federacija Bosna i Hercegovina", "BA-BIH")
//  val `Republika Srpska`                           = new ISOCountrySubdivision(ISOCountry.BOSNIA_AND_HERZEGOVINA, "Republika Srpska", "BA-SRP")
//  val `Christ Church`                              = new ISOCountrySubdivision(ISOCountry.BARBADOS, "Christ Church", "BB-01")
//  val `Saint James - Barbados`                     = new ISOCountrySubdivision(ISOCountry.BARBADOS, "Saint James", "BB-04")
//  val `Saint Joseph - Barbados`                    = new ISOCountrySubdivision(ISOCountry.BARBADOS, "Saint Joseph", "BB-06")
//  val `Saint Michael`                              = new ISOCountrySubdivision(ISOCountry.BARBADOS, "Saint Michael", "BB-08")
//  val `Saint Peter`                                = new ISOCountrySubdivision(ISOCountry.BARBADOS, "Saint Peter", "BB-09")
//  val `Barisal`                                    = new ISOCountrySubdivision(ISOCountry.BANGLADESH, "Barisal", "BD-A")
//  val `Chittagong`                                 = new ISOCountrySubdivision(ISOCountry.BANGLADESH, "Chittagong", "BD-B")
//  val `Dhaka`                                      = new ISOCountrySubdivision(ISOCountry.BANGLADESH, "Dhaka", "BD-C")
//  val `Khulna`                                     = new ISOCountrySubdivision(ISOCountry.BANGLADESH, "Khulna", "BD-D")
//  val `Rajshahi`                                   = new ISOCountrySubdivision(ISOCountry.BANGLADESH, "Rajshahi", "BD-E")
//  val `Rangpur`                                    = new ISOCountrySubdivision(ISOCountry.BANGLADESH, "Rangpur", "BD-F")
//  val `Sylhet`                                     = new ISOCountrySubdivision(ISOCountry.BANGLADESH, "Sylhet", "BD-G")
//  val `Antwerpen`                                  = new ISOCountrySubdivision(ISOCountry.BELGIUM, "Antwerpen", "BE-VAN")
//  val `Brabant Wallon`                             = new ISOCountrySubdivision(ISOCountry.BELGIUM, "Brabant Wallon", "BE-WBR")
//  val `Brussels Hoofdstedelijk Gewest`             = new ISOCountrySubdivision(ISOCountry.BELGIUM, "Brussels Hoofdstedelijk Gewest", "BE-BRU")
//  val `Hainaut`                                    = new ISOCountrySubdivision(ISOCountry.BELGIUM, "Hainaut", "BE-WHT")
//  val `Liege`                                      = new ISOCountrySubdivision(ISOCountry.BELGIUM, "Liege", "BE-WLG")
//  val `Limburg - Belgium`                          = new ISOCountrySubdivision(ISOCountry.BELGIUM, "Limburg", "BE-VLI")
//  val `Luxembourg - Belgium`                       = new ISOCountrySubdivision(ISOCountry.BELGIUM, "Luxembourg", "BE-WLX")
//  val `Namur`                                      = new ISOCountrySubdivision(ISOCountry.BELGIUM, "Namur", "BE-WNA")
//  val `Oost-Vlaanderen`                            = new ISOCountrySubdivision(ISOCountry.BELGIUM, "Oost-Vlaanderen", "BE-VOV")
//  val `Vlaams-Brabant`                             = new ISOCountrySubdivision(ISOCountry.BELGIUM, "Vlaams-Brabant", "BE-VBR")
//  val `West-Vlaanderen`                            = new ISOCountrySubdivision(ISOCountry.BELGIUM, "West-Vlaanderen", "BE-VWV")
//  val `Bale`                                       = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Bale", "BF-BAL")
//  val `Bam`                                        = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Bam", "BF-BAM")
//  val `Banwa`                                      = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Banwa", "BF-BAN")
//  val `Bazega`                                     = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Bazega", "BF-BAZ")
//  val `Bougouriba`                                 = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Bougouriba", "BF-BGR")
//  val `Boulgou`                                    = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Boulgou", "BF-BLG")
//  val `Boulkiemde`                                 = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Boulkiemde", "BF-BLK")
//  val `Comoe`                                      = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Comoe", "BF-COM")
//  val `Ganzourgou`                                 = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Ganzourgou", "BF-GAN")
//  val `Gnagna`                                     = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Gnagna", "BF-GNA")
//  val `Gourma`                                     = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Gourma", "BF-GOU")
//  val `Houet`                                      = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Houet", "BF-HOU")
//  val `Ioba`                                       = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Ioba", "BF-IOB")
//  val `Kadiogo`                                    = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Kadiogo", "BF-KAD")
//  val `Kenedougou`                                 = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Kenedougou", "BF-KEN")
//  val `Komondjari`                                 = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Komondjari", "BF-KMD")
//  val `Kompienga`                                  = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Kompienga", "BF-KMP")
//  val `Kossi`                                      = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Kossi", "BF-KOS")
//  val `Koulpelogo`                                 = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Koulpelogo", "BF-KOP")
//  val `Kouritenga`                                 = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Kouritenga", "BF-KOT")
//  val `Kourweogo`                                  = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Kourweogo", "BF-KOW")
//  val `Leraba`                                     = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Leraba", "BF-LER")
//  val `Loroum`                                     = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Loroum", "BF-LOR")
//  val `Mouhoun`                                    = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Mouhoun", "BF-MOU")
//  val `Nahouri`                                    = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Nahouri", "BF-NAO")
//  val `Namentenga`                                 = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Namentenga", "BF-NAM")
//  val `Nayala`                                     = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Nayala", "BF-NAY")
//  val `Noumbiel`                                   = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Noumbiel", "BF-NOU")
//  val `Oubritenga`                                 = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Oubritenga", "BF-OUB")
//  val `Oudalan`                                    = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Oudalan", "BF-OUD")
//  val `Passore`                                    = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Passore", "BF-PAS")
//  val `Poni`                                       = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Poni", "BF-PON")
//  val `Sanguie`                                    = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Sanguie", "BF-SNG")
//  val `Sanmatenga`                                 = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Sanmatenga", "BF-SMT")
//  val `Seno`                                       = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Seno", "BF-SEN")
//  val `Sissili`                                    = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Sissili", "BF-SIS")
//  val `Soum`                                       = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Soum", "BF-SOM")
//  val `Sourou`                                     = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Sourou", "BF-SOR")
//  val `Tapoa`                                      = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Tapoa", "BF-TAP")
//  val `Tui`                                        = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Tui", "BF-TUI")
//  val `Yagha`                                      = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Yagha", "BF-YAG")
//  val `Yatenga`                                    = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Yatenga", "BF-YAT")
//  val `Ziro`                                       = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Ziro", "BF-ZIR")
//  val `Zondoma`                                    = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Zondoma", "BF-ZON")
//  val `Zoundweogo`                                 = new ISOCountrySubdivision(ISOCountry.BURKINA_FASO, "Zoundweogo", "BF-ZOU")
//  val `Blagoevgrad`                                = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Blagoevgrad", "BG-01")
//  val `Burgas`                                     = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Burgas", "BG-02")
//  val `Dobrich`                                    = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Dobrich", "BG-08")
//  val `Gabrovo`                                    = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Gabrovo", "BG-07")
//  val `Haskovo`                                    = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Haskovo", "BG-26")
//  val `Kardzhali`                                  = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Kardzhali", "BG-09")
//  val `Kyustendil`                                 = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Kyustendil", "BG-10")
//  val `Lovech`                                     = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Lovech", "BG-11")
//  val `Montana - Bulgaria`                         = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Montana", "BG-12")
//  val `Pazardzhik`                                 = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Pazardzhik", "BG-13")
//  val `Pernik`                                     = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Pernik", "BG-14")
//  val `Pleven`                                     = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Pleven", "BG-15")
//  val `Plovdiv`                                    = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Plovdiv", "BG-16")
//  val `Razgrad`                                    = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Razgrad", "BG-17")
//  val `Ruse - Bulgaria`                            = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Ruse", "BG-18")
//  val `Shumen`                                     = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Shumen", "BG-27")
//  val `Silistra`                                   = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Silistra", "BG-19")
//  val `Sliven`                                     = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Sliven", "BG-20")
//  val `Smolyan`                                    = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Smolyan", "BG-21")
//  val `Sofia`                                      = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Sofia", "BG-23")
//  val `Sofia (stolitsa)`                           = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Sofia (stolitsa)", "BG-22")
//  val `Stara Zagora`                               = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Stara Zagora", "BG-24")
//  val `Targovishte`                                = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Targovishte", "BG-25")
//  val `Varna`                                      = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Varna", "BG-03")
//  val `Veliko Tarnovo`                             = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Veliko Tarnovo", "BG-04")
//  val `Vidin`                                      = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Vidin", "BG-05")
//  val `Vratsa`                                     = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Vratsa", "BG-06")
//  val `Yambol`                                     = new ISOCountrySubdivision(ISOCountry.BULGARIA, "Yambol", "BG-28")
//  val `Al Asimah - Bahrain`                        = new ISOCountrySubdivision(ISOCountry.BAHRAIN, "Al Asimah", "BH-13")
//  val `Al Muharraq`                                = new ISOCountrySubdivision(ISOCountry.BAHRAIN, "Al Muharraq", "BH-15")
//  val `Ash Shamaliyah`                             = new ISOCountrySubdivision(ISOCountry.BAHRAIN, "Ash Shamaliyah", "BH-17")
//  val `Bubanza`                                    = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Bubanza", "BI-BB")
//  val `Bujumbura Mairie`                           = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Bujumbura Mairie", "BI-BM")
//  val `Bururi`                                     = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Bururi", "BI-BR")
//  val `Cankuzo`                                    = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Cankuzo", "BI-CA")
//  val `Cibitoke`                                   = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Cibitoke", "BI-CI")
//  val `Gitega`                                     = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Gitega", "BI-GI")
//  val `Karuzi`                                     = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Karuzi", "BI-KR")
//  val `Kayanza`                                    = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Kayanza", "BI-KY")
//  val `Kirundo`                                    = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Kirundo", "BI-KI")
//  val `Makamba`                                    = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Makamba", "BI-MA")
//  val `Muramvya`                                   = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Muramvya", "BI-MU")
//  val `Muyinga`                                    = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Muyinga", "BI-MY")
//  val `Mwaro`                                      = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Mwaro", "BI-MW")
//  val `Ngozi`                                      = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Ngozi", "BI-NG")
//  val `Rutana`                                     = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Rutana", "BI-RT")
//  val `Ruyigi`                                     = new ISOCountrySubdivision(ISOCountry.BURUNDI, "Ruyigi", "BI-RY")
//  val `Alibori`                                    = new ISOCountrySubdivision(ISOCountry.BENIN, "Alibori", "BJ-AL")
//  val `Atacora`                                    = new ISOCountrySubdivision(ISOCountry.BENIN, "Atacora", "BJ-AK")
//  val `Atlantique`                                 = new ISOCountrySubdivision(ISOCountry.BENIN, "Atlantique", "BJ-AQ")
//  val `Borgou`                                     = new ISOCountrySubdivision(ISOCountry.BENIN, "Borgou", "BJ-BO")
//  val `Collines`                                   = new ISOCountrySubdivision(ISOCountry.BENIN, "Collines", "BJ-CO")
//  val `Couffo`                                     = new ISOCountrySubdivision(ISOCountry.BENIN, "Couffo", "BJ-KO")
//  val `Donga`                                      = new ISOCountrySubdivision(ISOCountry.BENIN, "Donga", "BJ-DO")
//  val `Littoral - Benin`                           = new ISOCountrySubdivision(ISOCountry.BENIN, "Littoral", "BJ-LI")
//  val `Mono`                                       = new ISOCountrySubdivision(ISOCountry.BENIN, "Mono", "BJ-MO")
//  val `Oueme`                                      = new ISOCountrySubdivision(ISOCountry.BENIN, "Oueme", "BJ-OU")
//  val `Plateau - Benin`                            = new ISOCountrySubdivision(ISOCountry.BENIN, "Plateau", "BJ-PL")
//  val `Zou`                                        = new ISOCountrySubdivision(ISOCountry.BENIN, "Zou", "BJ-ZO")
//  val `Belait`                                     = new ISOCountrySubdivision(ISOCountry.BRUNEI_DARUSSALAM, "Belait", "BN-BE")
//  val `Brunei-Muara`                               = new ISOCountrySubdivision(ISOCountry.BRUNEI_DARUSSALAM, "Brunei-Muara", "BN-BM")
//  val `Temburong`                                  = new ISOCountrySubdivision(ISOCountry.BRUNEI_DARUSSALAM, "Temburong", "BN-TE")
//  val `Tutong`                                     = new ISOCountrySubdivision(ISOCountry.BRUNEI_DARUSSALAM, "Tutong", "BN-TU")
//  val `Chuquisaca`                                 = new ISOCountrySubdivision(ISOCountry.BOLIVIA, "Chuquisaca", "BO-H")
//  val `Cochabamba`                                 = new ISOCountrySubdivision(ISOCountry.BOLIVIA, "Cochabamba", "BO-C")
//  val `El Beni`                                    = new ISOCountrySubdivision(ISOCountry.BOLIVIA, "El Beni", "BO-B")
//  val `La Paz - Bolivia`                           = new ISOCountrySubdivision(ISOCountry.BOLIVIA, "La Paz", "BO-L")
//  val `Oruro`                                      = new ISOCountrySubdivision(ISOCountry.BOLIVIA, "Oruro", "BO-O")
//  val `Pando`                                      = new ISOCountrySubdivision(ISOCountry.BOLIVIA, "Pando", "BO-N")
//  val `Potosi`                                     = new ISOCountrySubdivision(ISOCountry.BOLIVIA, "Potosi", "BO-P")
//  val `Santa Cruz - Bolivia`                       = new ISOCountrySubdivision(ISOCountry.BOLIVIA, "Santa Cruz", "BO-S")
//  val `Tarija`                                     = new ISOCountrySubdivision(ISOCountry.BOLIVIA, "Tarija", "BO-T")
//  val `Bonaire`                                    = new ISOCountrySubdivision(ISOCountry.BONAIRE, "Bonaire", "BQ-BO")
//  val `Saba`                                       = new ISOCountrySubdivision(ISOCountry.BONAIRE, "Saba", "BQ-SA")
//  val `Sint Eustatius`                             = new ISOCountrySubdivision(ISOCountry.BONAIRE, "Sint Eustatius", "BQ-SE")
//  val `Acre`                                       = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Acre", "BR-AC")
//  val `Alagoas`                                    = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Alagoas", "BR-AL")
//  val `Amapa`                                      = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Amapa", "BR-AP")
//  val `Amazonas - Brazil`                          = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Amazonas", "BR-AM")
//  val `Bahia`                                      = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Bahia", "BR-BA")
//  val `Ceara`                                      = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Ceara", "BR-CE")
//  val `Distrito Federal`                           = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Distrito Federal", "BR-DF")
//  val `Espirito Santo`                             = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Espirito Santo", "BR-ES")
//  val `Goias`                                      = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Goias", "BR-GO")
//  val `Maranhao`                                   = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Maranhao", "BR-MA")
//  val `Mato Grosso`                                = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Mato Grosso", "BR-MT")
//  val `Mato Grosso do Sul`                         = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Mato Grosso do Sul", "BR-MS")
//  val `Minas Gerais`                               = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Minas Gerais", "BR-MG")
//  val `Para - Brazil`                              = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Para", "BR-PA")
//  val `Paraiba`                                    = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Paraiba", "BR-PB")
//  val `Parana`                                     = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Parana", "BR-PR")
//  val `Pernambuco`                                 = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Pernambuco", "BR-PE")
//  val `Piaui`                                      = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Piaui", "BR-PI")
//  val `Rio Grande do Norte`                        = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Rio Grande do Norte", "BR-RN")
//  val `Rio Grande do Sul`                          = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Rio Grande do Sul", "BR-RS")
//  val `Rio de Janeiro`                             = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Rio de Janeiro", "BR-RJ")
//  val `Rondonia`                                   = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Rondonia", "BR-RO")
//  val `Roraima`                                    = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Roraima", "BR-RR")
//  val `Santa Catarina`                             = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Santa Catarina", "BR-SC")
//  val `Sao Paulo`                                  = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Sao Paulo", "BR-SP")
//  val `Sergipe`                                    = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Sergipe", "BR-SE")
//  val `Tocantins`                                  = new ISOCountrySubdivision(ISOCountry.BRAZIL, "Tocantins", "BR-TO")
//  val `Freeport`                                   = new ISOCountrySubdivision(ISOCountry.BAHAMAS, "Freeport", "BS-FP")
//  val `Fresh Creek`                                = new ISOCountrySubdivision(ISOCountry.BAHAMAS, "Fresh Creek", "BS-FC")
//  val `Harbour Island`                             = new ISOCountrySubdivision(ISOCountry.BAHAMAS, "Harbour Island", "BS-HI")
//  val `High Rock`                                  = new ISOCountrySubdivision(ISOCountry.BAHAMAS, "High Rock", "BS-HR")
//  val `Long Island`                                = new ISOCountrySubdivision(ISOCountry.BAHAMAS, "Long Island", "BS-LI")
//  val `Marsh Harbour`                              = new ISOCountrySubdivision(ISOCountry.BAHAMAS, "Marsh Harbour", "BS-MH")
//  val `New Providence`                             = new ISOCountrySubdivision(ISOCountry.BAHAMAS, "New Providence", "BS-NP")
//  val `Rock Sound`                                 = new ISOCountrySubdivision(ISOCountry.BAHAMAS, "Rock Sound", "BS-RS")
//  val `Chhukha`                                    = new ISOCountrySubdivision(ISOCountry.BHUTAN, "Chhukha", "BT-12")
//  val `Dagana`                                     = new ISOCountrySubdivision(ISOCountry.BHUTAN, "Dagana", "BT-22")
//  val `Gasa`                                       = new ISOCountrySubdivision(ISOCountry.BHUTAN, "Gasa", "BT-GA")
//  val `Ha`                                         = new ISOCountrySubdivision(ISOCountry.BHUTAN, "Ha", "BT-13")
//  val `Monggar`                                    = new ISOCountrySubdivision(ISOCountry.BHUTAN, "Monggar", "BT-42")
//  val `Paro`                                       = new ISOCountrySubdivision(ISOCountry.BHUTAN, "Paro", "BT-11")
//  val `Punakha`                                    = new ISOCountrySubdivision(ISOCountry.BHUTAN, "Punakha", "BT-23")
//  val `Thimphu`                                    = new ISOCountrySubdivision(ISOCountry.BHUTAN, "Thimphu", "BT-15")
//  val `Trashi Yangtse`                             = new ISOCountrySubdivision(ISOCountry.BHUTAN, "Trashi Yangtse", "BT-TY")
//  val `Trongsa`                                    = new ISOCountrySubdivision(ISOCountry.BHUTAN, "Trongsa", "BT-32")
//  val `Zhemgang`                                   = new ISOCountrySubdivision(ISOCountry.BHUTAN, "Zhemgang", "BT-34")
//  val `Central Botswana`                           = new ISOCountrySubdivision(ISOCountry.BOTSWANA, "Central", "BW-CE")
//  val `Ghanzi`                                     = new ISOCountrySubdivision(ISOCountry.BOTSWANA, "Ghanzi", "BW-GH")
//  val `Kgalagadi`                                  = new ISOCountrySubdivision(ISOCountry.BOTSWANA, "Kgalagadi", "BW-KG")
//  val `Kgatleng`                                   = new ISOCountrySubdivision(ISOCountry.BOTSWANA, "Kgatleng", "BW-KL")
//  val `Kweneng`                                    = new ISOCountrySubdivision(ISOCountry.BOTSWANA, "Kweneng", "BW-KW")
//  val `North-East Botswana`                        = new ISOCountrySubdivision(ISOCountry.BOTSWANA, "North-East", "BW-NE")
//  val `North-West Botswana`                        = new ISOCountrySubdivision(ISOCountry.BOTSWANA, "North-West", "BW-NW")
//  val `South-East Botswana`                        = new ISOCountrySubdivision(ISOCountry.BOTSWANA, "South-East", "BW-SE")
//  val `Southern Botswana`                          = new ISOCountrySubdivision(ISOCountry.BOTSWANA, "Southern", "BW-SO")
//  val `Brestskaya Voblasts'`                       = new ISOCountrySubdivision(ISOCountry.BELARUS, "Brestskaya Voblasts'", "BY-BR")
//  val `Homyel'skaya Voblasts'`                     = new ISOCountrySubdivision(ISOCountry.BELARUS, "Homyel'skaya Voblasts'", "BY-HO")
//  val `Hrodzyenskaya Voblasts'`                    = new ISOCountrySubdivision(ISOCountry.BELARUS, "Hrodzyenskaya Voblasts'", "BY-HR")
//  val `Mahilyowskaya Voblasts'`                    = new ISOCountrySubdivision(ISOCountry.BELARUS, "Mahilyowskaya Voblasts'", "BY-MA")
//  val `Minskaya Voblasts'`                         = new ISOCountrySubdivision(ISOCountry.BELARUS, "Minskaya Voblasts'", "BY-MI")
//  val `Vitsyebskaya Voblasts'`                     = new ISOCountrySubdivision(ISOCountry.BELARUS, "Vitsyebskaya Voblasts'", "BY-VI")
//  val `Belize`                                     = new ISOCountrySubdivision(ISOCountry.BELIZE, "Belize", "BZ-BZ")
//  val `Cayo`                                       = new ISOCountrySubdivision(ISOCountry.BELIZE, "Cayo", "BZ-CY")
//  val `Corozal`                                    = new ISOCountrySubdivision(ISOCountry.BELIZE, "Corozal", "BZ-CZL")
//  val `Orange Walk`                                = new ISOCountrySubdivision(ISOCountry.BELIZE, "Orange Walk", "BZ-OW")
//  val `Stann Creek`                                = new ISOCountrySubdivision(ISOCountry.BELIZE, "Stann Creek", "BZ-SC")
//  val `Toledo`                                     = new ISOCountrySubdivision(ISOCountry.BELIZE, "Toledo", "BZ-TOL")
//  val `Alberta`                                    = new ISOCountrySubdivision(ISOCountry.CANADA, "Alberta", "CA-AB")
//  val `British Columbia`                           = new ISOCountrySubdivision(ISOCountry.CANADA, "British Columbia", "CA-BC")
//  val `Manitoba`                                   = new ISOCountrySubdivision(ISOCountry.CANADA, "Manitoba", "CA-MB")
//  val `New Brunswick`                              = new ISOCountrySubdivision(ISOCountry.CANADA, "New Brunswick", "CA-NB")
//  val `Newfoundland and Labrador`                  = new ISOCountrySubdivision(ISOCountry.CANADA, "Newfoundland and Labrador", "CA-NL")
//  val `Northwest Territories`                      = new ISOCountrySubdivision(ISOCountry.CANADA, "Northwest Territories", "CA-NT")
//  val `Nova Scotia`                                = new ISOCountrySubdivision(ISOCountry.CANADA, "Nova Scotia", "CA-NS")
//  val `Nunavut`                                    = new ISOCountrySubdivision(ISOCountry.CANADA, "Nunavut", "CA-NU")
//  val `Ontario`                                    = new ISOCountrySubdivision(ISOCountry.CANADA, "Ontario", "CA-ON")
//  val `Prince Edward Island`                       = new ISOCountrySubdivision(ISOCountry.CANADA, "Prince Edward Island", "CA-PE")
//  val `Quebec`                                     = new ISOCountrySubdivision(ISOCountry.CANADA, "Quebec", "CA-QC")
//  val `Saskatchewan`                               = new ISOCountrySubdivision(ISOCountry.CANADA, "Saskatchewan", "CA-SK")
//  val `Yukon`                                      = new ISOCountrySubdivision(ISOCountry.CANADA, "Yukon", "CA-YT")
//  val `Bandundu`                                   = new ISOCountrySubdivision(ISOCountry.THE_DEMOCRATIC_REPUBLIC_OF_THE_CONGO, "Bandundu", "CD-BN")
//  val `Bas-Congo`                                  = new ISOCountrySubdivision(ISOCountry.THE_DEMOCRATIC_REPUBLIC_OF_THE_CONGO, "Bas-Congo", "CD-BC")
//  val `Equateur`                                   = new ISOCountrySubdivision(ISOCountry.THE_DEMOCRATIC_REPUBLIC_OF_THE_CONGO, "Equateur", "CD-EQ")
//  val `Kasai-Occidental`                           = new ISOCountrySubdivision(ISOCountry.THE_DEMOCRATIC_REPUBLIC_OF_THE_CONGO, "Kasai-Occidental", "CD-KW")
//  val `Kasai-Oriental`                             = new ISOCountrySubdivision(ISOCountry.THE_DEMOCRATIC_REPUBLIC_OF_THE_CONGO, "Kasai-Oriental", "CD-KE")
//  val `Katanga`                                    = new ISOCountrySubdivision(ISOCountry.THE_DEMOCRATIC_REPUBLIC_OF_THE_CONGO, "Katanga", "CD-KA")
//  val `Kinshasa`                                   = new ISOCountrySubdivision(ISOCountry.THE_DEMOCRATIC_REPUBLIC_OF_THE_CONGO, "Kinshasa", "CD-KN")
//  val `Maniema`                                    = new ISOCountrySubdivision(ISOCountry.THE_DEMOCRATIC_REPUBLIC_OF_THE_CONGO, "Maniema", "CD-MA")
//  val `Nord-Kivu`                                  = new ISOCountrySubdivision(ISOCountry.THE_DEMOCRATIC_REPUBLIC_OF_THE_CONGO, "Nord-Kivu", "CD-NK")
//  val `Orientale`                                  = new ISOCountrySubdivision(ISOCountry.THE_DEMOCRATIC_REPUBLIC_OF_THE_CONGO, "Orientale", "CD-OR")
//  val `Sud-Kivu`                                   = new ISOCountrySubdivision(ISOCountry.THE_DEMOCRATIC_REPUBLIC_OF_THE_CONGO, "Sud-Kivu", "CD-SK")
//  val `Bamingui-Bangoran`                          = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Bamingui-Bangoran", "CF-BB")
//  val `Bangui`                                     = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Bangui", "CF-BGF")
//  val `Basse-Kotto`                                = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Basse-Kotto", "CF-BK")
//  val `Haut-Mbomou`                                = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Haut-Mbomou", "CF-HM")
//  val `Haute-Kotto`                                = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Haute-Kotto", "CF-HK")
//  val `Kemo`                                       = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Kemo", "CF-KG")
//  val `Lobaye`                                     = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Lobaye", "CF-LB")
//  val `Mambere-Kadei`                              = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Mambere-Kadei", "CF-HS")
//  val `Mbomou`                                     = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Mbomou", "CF-MB")
//  val `Nana-Grebizi`                               = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Nana-Grebizi", "CF-KB")
//  val `Nana-Mambere`                               = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Nana-Mambere", "CF-NM")
//  val `Ombella-Mpoko`                              = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Ombella-Mpoko", "CF-MP")
//  val `Ouaka`                                      = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Ouaka", "CF-UK")
//  val `Ouham`                                      = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Ouham", "CF-AC")
//  val `Ouham-Pende`                                = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Ouham-Pende", "CF-OP")
//  val `Sangha-Mbaere`                              = new ISOCountrySubdivision(ISOCountry.CENTRAL_AFRICAN_REPUBLIC, "Sangha-Mbaere", "CF-SE")
//  val `Bouenza`                                    = new ISOCountrySubdivision(ISOCountry.CONGO, "Bouenza", "CG-11")
//  val `Brazzaville`                                = new ISOCountrySubdivision(ISOCountry.CONGO, "Brazzaville", "CG-BZV")
//  val `Cuvette`                                    = new ISOCountrySubdivision(ISOCountry.CONGO, "Cuvette", "CG-8")
//  val `Cuvette-Ouest`                              = new ISOCountrySubdivision(ISOCountry.CONGO, "Cuvette-Ouest", "CG-15")
//  val `Lekoumou`                                   = new ISOCountrySubdivision(ISOCountry.CONGO, "Lekoumou", "CG-2")
//  val `Likouala`                                   = new ISOCountrySubdivision(ISOCountry.CONGO, "Likouala", "CG-7")
//  val `Niari`                                      = new ISOCountrySubdivision(ISOCountry.CONGO, "Niari", "CG-9")
//  val `Plateaux - Congo`                           = new ISOCountrySubdivision(ISOCountry.CONGO, "Plateaux", "CG-14")
//  val `Pointe-Noire`                               = new ISOCountrySubdivision(ISOCountry.CONGO, "Pointe-Noire", "CG-16")
//  val `Pool`                                       = new ISOCountrySubdivision(ISOCountry.CONGO, "Pool", "CG-12")
//  val `Sangha`                                     = new ISOCountrySubdivision(ISOCountry.CONGO, "Sangha", "CG-13")
//  val `Aargau`                                     = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Aargau", "CH-AG")
//  val `Appenzell Ausserrhoden`                     = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Appenzell Ausserrhoden", "CH-AR")
//  val `Appenzell Innerrhoden`                      = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Appenzell Innerrhoden", "CH-AI")
//  val `Basel-Landschaft`                           = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Basel-Landschaft", "CH-BL")
//  val `Basel-Stadt`                                = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Basel-Stadt", "CH-BS")
//  val `Bern`                                       = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Bern", "CH-BE")
//  val `Fribourg`                                   = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Fribourg", "CH-FR")
//  val `Geneve`                                     = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Geneve", "CH-GE")
//  val `Glarus`                                     = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Glarus", "CH-GL")
//  val `Graubunden`                                 = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Graubunden", "CH-GR")
//  val `Jura`                                       = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Jura", "CH-JU")
//  val `Luzern`                                     = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Luzern", "CH-LU")
//  val `Neuchatel`                                  = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Neuchatel", "CH-NE")
//  val `Nidwalden`                                  = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Nidwalden", "CH-NW")
//  val `Obwalden`                                   = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Obwalden", "CH-OW")
//  val `Sankt Gallen`                               = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Sankt Gallen", "CH-SG")
//  val `Schaffhausen`                               = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Schaffhausen", "CH-SH")
//  val `Schwyz`                                     = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Schwyz", "CH-SZ")
//  val `Solothurn`                                  = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Solothurn", "CH-SO")
//  val `Thurgau`                                    = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Thurgau", "CH-TG")
//  val `Ticino`                                     = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Ticino", "CH-TI")
//  val `Uri`                                        = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Uri", "CH-UR")
//  val `Valais`                                     = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Valais", "CH-VS")
//  val `Vaud`                                       = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Vaud", "CH-VD")
//  val `Zug`                                        = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Zug", "CH-ZG")
//  val `Zurich`                                     = new ISOCountrySubdivision(ISOCountry.SWITZERLAND, "Zurich", "CH-ZH")
//  val `Agneby`                                     = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Agneby", "CI-16")
//  val `Bafing`                                     = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Bafing", "CI-17")
//  val `Bas-Sassandra`                              = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Bas-Sassandra", "CI-09")
//  val `Denguele`                                   = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Denguele", "CI-10")
//  val `Dix-Huit Montagnes`                         = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Dix-Huit Montagnes", "CI-06")
//  val `Fromager`                                   = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Fromager", "CI-18")
//  val `Haut-Sassandra`                             = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Haut-Sassandra", "CI-02")
//  val `Lacs`                                       = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Lacs", "CI-07")
//  val `Lagunes`                                    = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Lagunes", "CI-01")
//  val `Marahoue`                                   = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Marahoue", "CI-12")
//  val `Moyen-Cavally`                              = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Moyen-Cavally", "CI-19")
//  val `Moyen-Comoe`                                = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Moyen-Comoe", "CI-05")
//  val `N'zi-Comoe`                                 = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "N'zi-Comoe", "CI-11")
//  val `Savanes`                                    = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Savanes", "CI-03")
//  val `Sud-Bandama`                                = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Sud-Bandama", "CI-15")
//  val `Sud-Comoe`                                  = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Sud-Comoe", "CI-13")
//  val `Vallee du Bandama`                          = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Vallee du Bandama", "CI-04")
//  val `Worodougou`                                 = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Worodougou", "CI-14")
//  val `Zanzan`                                     = new ISOCountrySubdivision(ISOCountry.COTE_D_IVOIRE, "Zanzan", "CI-08")
//  val `Antofagasta`                                = new ISOCountrySubdivision(ISOCountry.CHILE, "Antofagasta", "CL-AN")
//  val `Araucania`                                  = new ISOCountrySubdivision(ISOCountry.CHILE, "Araucania", "CL-AR")
//  val `Arica y Parinacota`                         = new ISOCountrySubdivision(ISOCountry.CHILE, "Arica y Parinacota", "CL-AP")
//  val `Atacama`                                    = new ISOCountrySubdivision(ISOCountry.CHILE, "Atacama", "CL-AT")
//  val `Aysen`                                      = new ISOCountrySubdivision(ISOCountry.CHILE, "Aysen", "CL-AI")
//  val `Biobio`                                     = new ISOCountrySubdivision(ISOCountry.CHILE, "Biobio", "CL-BI")
//  val `Coquimbo`                                   = new ISOCountrySubdivision(ISOCountry.CHILE, "Coquimbo", "CL-CO")
//  val `Libertador General Bernardo O'Higgins`      = new ISOCountrySubdivision(ISOCountry.CHILE, "Libertador General Bernardo O'Higgins", "CL-LI")
//  val `Los Lagos`                                  = new ISOCountrySubdivision(ISOCountry.CHILE, "Los Lagos", "CL-LL")
//  val `Los Rios - Chile`                           = new ISOCountrySubdivision(ISOCountry.CHILE, "Los Rios", "CL-LR")
//  val `Magallanes`                                 = new ISOCountrySubdivision(ISOCountry.CHILE, "Magallanes", "CL-MA")
//  val `Maule`                                      = new ISOCountrySubdivision(ISOCountry.CHILE, "Maule", "CL-ML")
//  val `Region Metropolitana de Santiago`           = new ISOCountrySubdivision(ISOCountry.CHILE, "Region Metropolitana de Santiago", "CL-RM")
//  val `Tarapaca`                                   = new ISOCountrySubdivision(ISOCountry.CHILE, "Tarapaca", "CL-TA")
//  val `Valparaiso`                                 = new ISOCountrySubdivision(ISOCountry.CHILE, "Valparaiso", "CL-VS")
//  val `Adamaoua`                                   = new ISOCountrySubdivision(ISOCountry.CAMEROON, "Adamaoua", "CM-AD")
//  val `Centre Cameroom`                            = new ISOCountrySubdivision(ISOCountry.CAMEROON, "Centre", "CM-CE")
//  val `Est Cameroom`                               = new ISOCountrySubdivision(ISOCountry.CAMEROON, "Est", "CM-ES")
//  val `Extreme-Nord Cameroom`                      = new ISOCountrySubdivision(ISOCountry.CAMEROON, "Extreme-Nord", "CM-EN")
//  val `Littoral`                                   = new ISOCountrySubdivision(ISOCountry.CAMEROON, "Littoral", "CM-LT")
//  val `Nord Cameroom`                              = new ISOCountrySubdivision(ISOCountry.CAMEROON, "Nord", "CM-NO")
//  val `Nord-Ouest Cameroom`                        = new ISOCountrySubdivision(ISOCountry.CAMEROON, "Nord-Ouest", "CM-NW")
//  val `Ouest Cameroom`                             = new ISOCountrySubdivision(ISOCountry.CAMEROON, "Ouest", "CM-OU")
//  val `Sud Cameroom`                               = new ISOCountrySubdivision(ISOCountry.CAMEROON, "Sud", "CM-SU")
//  val `Sud-Ouest`                                  = new ISOCountrySubdivision(ISOCountry.CAMEROON, "Sud-Ouest", "CM-SW")
//  val `Anhui`                                      = new ISOCountrySubdivision(ISOCountry.CHINA, "Anhui", "CN-34")
//  val `Beijing`                                    = new ISOCountrySubdivision(ISOCountry.CHINA, "Beijing", "CN-11")
//  val `Chongqing`                                  = new ISOCountrySubdivision(ISOCountry.CHINA, "Chongqing", "CN-50")
//  val `Fujian`                                     = new ISOCountrySubdivision(ISOCountry.CHINA, "Fujian", "CN-35")
//  val `Gansu`                                      = new ISOCountrySubdivision(ISOCountry.CHINA, "Gansu", "CN-62")
//  val `Guangdong`                                  = new ISOCountrySubdivision(ISOCountry.CHINA, "Guangdong", "CN-44")
//  val `Guangxi`                                    = new ISOCountrySubdivision(ISOCountry.CHINA, "Guangxi", "CN-45")
//  val `Guizhou`                                    = new ISOCountrySubdivision(ISOCountry.CHINA, "Guizhou", "CN-52")
//  val `Hainan`                                     = new ISOCountrySubdivision(ISOCountry.CHINA, "Hainan", "CN-46")
//  val `Hebei`                                      = new ISOCountrySubdivision(ISOCountry.CHINA, "Hebei", "CN-13")
//  val `Heilongjiang`                               = new ISOCountrySubdivision(ISOCountry.CHINA, "Heilongjiang", "CN-23")
//  val `Henan`                                      = new ISOCountrySubdivision(ISOCountry.CHINA, "Henan", "CN-41")
//  val `Hubei`                                      = new ISOCountrySubdivision(ISOCountry.CHINA, "Hubei", "CN-42")
//  val `Hunan`                                      = new ISOCountrySubdivision(ISOCountry.CHINA, "Hunan", "CN-43")
//  val `Jiangsu`                                    = new ISOCountrySubdivision(ISOCountry.CHINA, "Jiangsu", "CN-32")
//  val `Jiangxi`                                    = new ISOCountrySubdivision(ISOCountry.CHINA, "Jiangxi", "CN-36")
//  val `Jilin`                                      = new ISOCountrySubdivision(ISOCountry.CHINA, "Jilin", "CN-22")
//  val `Liaoning`                                   = new ISOCountrySubdivision(ISOCountry.CHINA, "Liaoning", "CN-21")
//  val `Nei Mongol`                                 = new ISOCountrySubdivision(ISOCountry.CHINA, "Nei Mongol", "CN-15")
//  val `Ningxia`                                    = new ISOCountrySubdivision(ISOCountry.CHINA, "Ningxia", "CN-64")
//  val `Qinghai`                                    = new ISOCountrySubdivision(ISOCountry.CHINA, "Qinghai", "CN-63")
//  val `Shaanxi`                                    = new ISOCountrySubdivision(ISOCountry.CHINA, "Shaanxi", "CN-61")
//  val `Shandong`                                   = new ISOCountrySubdivision(ISOCountry.CHINA, "Shandong", "CN-37")
//  val `Shanghai`                                   = new ISOCountrySubdivision(ISOCountry.CHINA, "Shanghai", "CN-31")
//  val `Shanxi`                                     = new ISOCountrySubdivision(ISOCountry.CHINA, "Shanxi", "CN-14")
//  val `Sichuan`                                    = new ISOCountrySubdivision(ISOCountry.CHINA, "Sichuan", "CN-51")
//  val `Tianjin`                                    = new ISOCountrySubdivision(ISOCountry.CHINA, "Tianjin", "CN-12")
//  val `Xinjiang`                                   = new ISOCountrySubdivision(ISOCountry.CHINA, "Xinjiang", "CN-65")
//  val `Xizang`                                     = new ISOCountrySubdivision(ISOCountry.CHINA, "Xizang", "CN-54")
//  val `Yunnan`                                     = new ISOCountrySubdivision(ISOCountry.CHINA, "Yunnan", "CN-53")
//  val `Zhejiang`                                   = new ISOCountrySubdivision(ISOCountry.CHINA, "Zhejiang", "CN-33")
//  val `Amazonas - Colombia`                        = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Amazonas", "CO-AMA")
//  val `Antioquia`                                  = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Antioquia", "CO-ANT")
//  val `Arauca`                                     = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Arauca", "CO-ARA")
//  val `Atlantico`                                  = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Atlantico", "CO-ATL")
//  val `Bolivar - Colombia`                         = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Bolivar", "CO-BOL")
//  val `Boyaca`                                     = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Boyaca", "CO-BOY")
//  val `Caldas`                                     = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Caldas", "CO-CAL")
//  val `Caqueta`                                    = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Caqueta", "CO-CAQ")
//  val `Casanare`                                   = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Casanare", "CO-CAS")
//  val `Cauca`                                      = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Cauca", "CO-CAU")
//  val `Cesar`                                      = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Cesar", "CO-CES")
//  val `Choco`                                      = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Choco", "CO-CHO")
//  val `Cordoba`                                    = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Cordoba", "CO-COR")
//  val `Cundinamarca`                               = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Cundinamarca", "CO-CUN")
//  val `Distrito Capital de Bogota`                 = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Distrito Capital de Bogota", "CO-DC")
//  val `Guainia`                                    = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Guainia", "CO-GUA")
//  val `Guaviare`                                   = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Guaviare", "CO-GUV")
//  val `Huila`                                      = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Huila", "CO-HUI")
//  val `La Guajira`                                 = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "La Guajira", "CO-LAG")
//  val `Magdalena`                                  = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Magdalena", "CO-MAG")
//  val `Meta`                                       = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Meta", "CO-MET")
//  val `Narino`                                     = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Narino", "CO-NAR")
//  val `Norte de Santander`                         = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Norte de Santander", "CO-NSA")
//  val `Putumayo`                                   = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Putumayo", "CO-PUT")
//  val `Quindio`                                    = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Quindio", "CO-QUI")
//  val `Risaralda`                                  = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Risaralda", "CO-RIS")
//  val `San Andres, Providencia y Santa Catalina`   = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "San Andres, Providencia y Santa Catalina", "CO-SAP")
//  val `Santander`                                  = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Santander", "CO-SAN")
//  val `Sucre - Colombia`                           = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Sucre", "CO-SUC")
//  val `Tolima`                                     = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Tolima", "CO-TOL")
//  val `Valle del Cauca`                            = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Valle del Cauca", "CO-VAC")
//  val `Vaupes`                                     = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Vaupes", "CO-VAU")
//  val `Vichada`                                    = new ISOCountrySubdivision(ISOCountry.COLOMBIA, "Vichada", "CO-VID")
//  val `Alajuela`                                   = new ISOCountrySubdivision(ISOCountry.COSTA_RICA, "Alajuela", "CR-A")
//  val `Cartago`                                    = new ISOCountrySubdivision(ISOCountry.COSTA_RICA, "Cartago", "CR-C")
//  val `Guanacaste`                                 = new ISOCountrySubdivision(ISOCountry.COSTA_RICA, "Guanacaste", "CR-G")
//  val `Heredia`                                    = new ISOCountrySubdivision(ISOCountry.COSTA_RICA, "Heredia", "CR-H")
//  val `Limon`                                      = new ISOCountrySubdivision(ISOCountry.COSTA_RICA, "Limon", "CR-L")
//  val `Puntarenas`                                 = new ISOCountrySubdivision(ISOCountry.COSTA_RICA, "Puntarenas", "CR-P")
//  val `San Jose - Costa Rica`                      = new ISOCountrySubdivision(ISOCountry.COSTA_RICA, "San Jose", "CR-SJ")
//  val `Artemisa`                                   = new ISOCountrySubdivision(ISOCountry.CUBA, "Artemisa", "CU-15")
//  val `Camaguey`                                   = new ISOCountrySubdivision(ISOCountry.CUBA, "Camaguey", "CU-09")
//  val `Ciego de Avila`                             = new ISOCountrySubdivision(ISOCountry.CUBA, "Ciego de Avila", "CU-08")
//  val `Cienfuegos`                                 = new ISOCountrySubdivision(ISOCountry.CUBA, "Cienfuegos", "CU-06")
//  val `Granma`                                     = new ISOCountrySubdivision(ISOCountry.CUBA, "Granma", "CU-12")
//  val `Guantanamo`                                 = new ISOCountrySubdivision(ISOCountry.CUBA, "Guantanamo", "CU-14")
//  val `Holguin`                                    = new ISOCountrySubdivision(ISOCountry.CUBA, "Holguin", "CU-11")
//  val `Isla de la Juventud`                        = new ISOCountrySubdivision(ISOCountry.CUBA, "Isla de la Juventud", "CU-99")
//  val `La Habana`                                  = new ISOCountrySubdivision(ISOCountry.CUBA, "La Habana", "CU-03")
//  val `Las Tunas`                                  = new ISOCountrySubdivision(ISOCountry.CUBA, "Las Tunas", "CU-10")
//  val `Matanzas`                                   = new ISOCountrySubdivision(ISOCountry.CUBA, "Matanzas", "CU-04")
//  val `Mayabeque`                                  = new ISOCountrySubdivision(ISOCountry.CUBA, "Mayabeque", "CU-16")
//  val `Pinar del Rio`                              = new ISOCountrySubdivision(ISOCountry.CUBA, "Pinar del Rio", "CU-01")
//  val `Sancti Spiritus`                            = new ISOCountrySubdivision(ISOCountry.CUBA, "Sancti Spiritus", "CU-07")
//  val `Santiago de Cuba`                           = new ISOCountrySubdivision(ISOCountry.CUBA, "Santiago de Cuba", "CU-13")
//  val `Villa Clara`                                = new ISOCountrySubdivision(ISOCountry.CUBA, "Villa Clara", "CU-05")
//  val `Boa Vista`                                  = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Boa Vista", "CV-BV")
//  val `Brava`                                      = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Brava", "CV-BR")
//  val `Maio`                                       = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Maio", "CV-MA")
//  val `Mosteiros`                                  = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Mosteiros", "CV-MO")
//  val `Paul`                                       = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Paul", "CV-PA")
//  val `Porto Novo`                                 = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Porto Novo", "CV-PN")
//  val `Praia`                                      = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Praia", "CV-PR")
//  val `Ribeira Brava`                              = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Ribeira Brava", "CV-RB")
//  val `Ribeira Grande`                             = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Ribeira Grande", "CV-RG")
//  val `Ribeira Grande de Santiago`                 = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Ribeira Grande de Santiago", "CV-RS")
//  val `Sal`                                        = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Sal", "CV-SL")
//  val `Santa Catarina - Cape Verde`                = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Santa Catarina", "CV-CA")
//  val `Santa Catarina do Fogo`                     = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Santa Catarina do Fogo", "CV-CF")
//  val `Santa Cruz`                                 = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Santa Cruz", "CV-CR")
//  val `Sao Domingos`                               = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Sao Domingos", "CV-SD")
//  val `Sao Filipe`                                 = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Sao Filipe", "CV-SF")
//  val `Sao Miguel`                                 = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Sao Miguel", "CV-SM")
//  val `Sao Salvador do Mundo`                      = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Sao Salvador do Mundo", "CV-SS")
//  val `Sao Vicente`                                = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Sao Vicente", "CV-SV")
//  val `Tarrafal`                                   = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Tarrafal", "CV-TA")
//  val `Tarrafal de Sao Nicolau`                    = new ISOCountrySubdivision(ISOCountry.CAPE_VERDE, "Tarrafal de Sao Nicolau", "CV-TS")
//  val `Ammochostos`                                = new ISOCountrySubdivision(ISOCountry.CYPRUS, "Ammochostos", "CY-04")
//  val `Keryneia`                                   = new ISOCountrySubdivision(ISOCountry.CYPRUS, "Keryneia", "CY-06")
//  val `Larnaka`                                    = new ISOCountrySubdivision(ISOCountry.CYPRUS, "Larnaka", "CY-03")
//  val `Lefkosia`                                   = new ISOCountrySubdivision(ISOCountry.CYPRUS, "Lefkosia", "CY-01")
//  val `Lemesos`                                    = new ISOCountrySubdivision(ISOCountry.CYPRUS, "Lemesos", "CY-02")
//  val `Pafos`                                      = new ISOCountrySubdivision(ISOCountry.CYPRUS, "Pafos", "CY-05")
//  val `Jihocesky kraj`                             = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Jihocesky kraj", "CZ-JC")
//  val `Jihomoravsky kraj`                          = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Jihomoravsky kraj", "CZ-JM")
//  val `Karlovarsky kraj`                           = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Karlovarsky kraj", "CZ-KA")
//  val `Kralovehradecky kraj`                       = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Kralovehradecky kraj", "CZ-KR")
//  val `Liberecky kraj`                             = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Liberecky kraj", "CZ-LI")
//  val `Moravskoslezsky kraj`                       = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Moravskoslezsky kraj", "CZ-MO")
//  val `Olomoucky kraj`                             = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Olomoucky kraj", "CZ-OL")
//  val `Pardubicky kraj`                            = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Pardubicky kraj", "CZ-PA")
//  val `Plzensky kraj`                              = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Plzensky kraj", "CZ-PL")
//  val `Praha, hlavni mesto`                        = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Praha, hlavni mesto", "CZ-PR")
//  val `Stredocesky kraj`                           = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Stredocesky kraj", "CZ-ST")
//  val `Ustecky kraj`                               = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Ustecky kraj", "CZ-US")
//  val `Vysocina kraj`                              = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Vysocina kraj", "CZ-VY")
//  val `Zlinsky kraj`                               = new ISOCountrySubdivision(ISOCountry.CZECH_REPUBLIC, "Zlinsky kraj", "CZ-ZL")
//  val `Baden-Wurttemberg`                          = new ISOCountrySubdivision(ISOCountry.GERMANY, "Baden-Wurttemberg", "DE-BW")
//  val `Bayern`                                     = new ISOCountrySubdivision(ISOCountry.GERMANY, "Bayern", "DE-BY")
//  val `Berlin`                                     = new ISOCountrySubdivision(ISOCountry.GERMANY, "Berlin", "DE-BE")
//  val `Brandenburg`                                = new ISOCountrySubdivision(ISOCountry.GERMANY, "Brandenburg", "DE-BB")
//  val `Bremen`                                     = new ISOCountrySubdivision(ISOCountry.GERMANY, "Bremen", "DE-HB")
//  val `Hamburg`                                    = new ISOCountrySubdivision(ISOCountry.GERMANY, "Hamburg", "DE-HH")
//  val `Hessen`                                     = new ISOCountrySubdivision(ISOCountry.GERMANY, "Hessen", "DE-HE")
//  val `Mecklenburg-Vorpommern`                     = new ISOCountrySubdivision(ISOCountry.GERMANY, "Mecklenburg-Vorpommern", "DE-MV")
//  val `Niedersachsen`                              = new ISOCountrySubdivision(ISOCountry.GERMANY, "Niedersachsen", "DE-NI")
//  val `Nordrhein-Westfalen`                        = new ISOCountrySubdivision(ISOCountry.GERMANY, "Nordrhein-Westfalen", "DE-NW")
//  val `Rheinland-Pfalz`                            = new ISOCountrySubdivision(ISOCountry.GERMANY, "Rheinland-Pfalz", "DE-RP")
//  val `Saarland`                                   = new ISOCountrySubdivision(ISOCountry.GERMANY, "Saarland", "DE-SL")
//  val `Sachsen`                                    = new ISOCountrySubdivision(ISOCountry.GERMANY, "Sachsen", "DE-SN")
//  val `Sachsen-Anhalt`                             = new ISOCountrySubdivision(ISOCountry.GERMANY, "Sachsen-Anhalt", "DE-ST")
//  val `Schleswig-Holstein`                         = new ISOCountrySubdivision(ISOCountry.GERMANY, "Schleswig-Holstein", "DE-SH")
//  val `Thuringen`                                  = new ISOCountrySubdivision(ISOCountry.GERMANY, "Thuringen", "DE-TH")
//  val `Ali Sabieh`                                 = new ISOCountrySubdivision(ISOCountry.DJIBOUTI, "Ali Sabieh", "DJ-AS")
//  val `Arta - Djibouti`                            = new ISOCountrySubdivision(ISOCountry.DJIBOUTI, "Arta", "DJ-AR")
//  val `Dikhil`                                     = new ISOCountrySubdivision(ISOCountry.DJIBOUTI, "Dikhil", "DJ-DI")
//  val `Djibouti`                                   = new ISOCountrySubdivision(ISOCountry.DJIBOUTI, "Djibouti", "DJ-DJ")
//  val `Obock`                                      = new ISOCountrySubdivision(ISOCountry.DJIBOUTI, "Obock", "DJ-OB")
//  val `Tadjourah`                                  = new ISOCountrySubdivision(ISOCountry.DJIBOUTI, "Tadjourah", "DJ-TA")
//  val `Hovedstaden`                                = new ISOCountrySubdivision(ISOCountry.DENMARK, "Hovedstaden", "DK-84")
//  val `Midtjylland`                                = new ISOCountrySubdivision(ISOCountry.DENMARK, "Midtjylland", "DK-82")
//  val `Nordjylland`                                = new ISOCountrySubdivision(ISOCountry.DENMARK, "Nordjylland", "DK-81")
//  val `Sjelland`                                   = new ISOCountrySubdivision(ISOCountry.DENMARK, "Sjelland", "DK-85")
//  val `Syddanmark`                                 = new ISOCountrySubdivision(ISOCountry.DENMARK, "Syddanmark", "DK-83")
//  val `Saint Andrew - Dominica`                    = new ISOCountrySubdivision(ISOCountry.DOMINICA, "Saint Andrew", "DM-02")
//  val `Saint David - Dominica`                     = new ISOCountrySubdivision(ISOCountry.DOMINICA, "Saint David", "DM-03")
//  val `Saint George - Dominica`                    = new ISOCountrySubdivision(ISOCountry.DOMINICA, "Saint George", "DM-04")
//  val `Saint John - Dominica`                      = new ISOCountrySubdivision(ISOCountry.DOMINICA, "Saint John", "DM-05")
//  val `Saint Joseph`                               = new ISOCountrySubdivision(ISOCountry.DOMINICA, "Saint Joseph", "DM-06")
//  val `Saint Luke`                                 = new ISOCountrySubdivision(ISOCountry.DOMINICA, "Saint Luke", "DM-07")
//  val `Saint Mark - Dominica`                      = new ISOCountrySubdivision(ISOCountry.DOMINICA, "Saint Mark", "DM-08")
//  val `Saint Patrick - Dominica`                   = new ISOCountrySubdivision(ISOCountry.DOMINICA, "Saint Patrick", "DM-09")
//  val `Saint Paul`                                 = new ISOCountrySubdivision(ISOCountry.DOMINICA, "Saint Paul", "DM-10")
//  val `Azua`                                       = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Azua", "DO-02")
//  val `Baoruco`                                    = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Baoruco", "DO-03")
//  val `Barahona`                                   = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Barahona", "DO-04")
//  val `Dajabon`                                    = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Dajabon", "DO-05")
//  val `Distrito Nacional`                          = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Distrito Nacional", "DO-01")
//  val `Duarte`                                     = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Duarte", "DO-06")
//  val `El Seibo`                                   = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "El Seibo", "DO-08")
//  val `Elias Pina`                                 = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Elias Pina", "DO-07")
//  val `Espaillat`                                  = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Espaillat", "DO-09")
//  val `Hato Mayor`                                 = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Hato Mayor", "DO-30")
//  val `Independencia`                              = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Independencia", "DO-10")
//  val `La Altagracia`                              = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "La Altagracia", "DO-11")
//  val `La Romana`                                  = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "La Romana", "DO-12")
//  val `La Vega`                                    = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "La Vega", "DO-13")
//  val `Maria Trinidad Sanchez`                     = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Maria Trinidad Sanchez", "DO-14")
//  val `Monsenor Nouel`                             = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Monsenor Nouel", "DO-28")
//  val `Monte Cristi`                               = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Monte Cristi", "DO-15")
//  val `Monte Plata`                                = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Monte Plata", "DO-29")
//  val `Pedernales`                                 = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Pedernales", "DO-16")
//  val `Peravia`                                    = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Peravia", "DO-17")
//  val `Puerto Plata`                               = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Puerto Plata", "DO-18")
//  val `Salcedo`                                    = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Salcedo", "DO-19")
//  val `Samana`                                     = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Samana", "DO-20")
//  val `San Cristobal`                              = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "San Cristobal", "DO-21")
//  val `San Juan`                                   = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "San Juan", "DO-22")
//  val `San Pedro De Macoris`                       = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "San Pedro De Macoris", "DO-23")
//  val `Sanchez Ramirez`                            = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Sanchez Ramirez", "DO-24")
//  val `Santiago`                                   = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Santiago", "DO-25")
//  val `Santiago Rodriguez`                         = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Santiago Rodriguez", "DO-26")
//  val `Valverde`                                   = new ISOCountrySubdivision(ISOCountry.DOMINICAN_REPUBLIC, "Valverde", "DO-27")
//  val `Adrar - Algeria`                            = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Adrar", "DZ-01")
//  val `Ain Defla`                                  = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Ain Defla", "DZ-44")
//  val `Ain Temouchent`                             = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Ain Temouchent", "DZ-46")
//  val `Alger`                                      = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Alger", "DZ-16")
//  val `Annaba`                                     = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Annaba", "DZ-23")
//  val `Batna`                                      = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Batna", "DZ-05")
//  val `Bechar`                                     = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Bechar", "DZ-08")
//  val `Bejaia`                                     = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Bejaia", "DZ-06")
//  val `Biskra`                                     = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Biskra", "DZ-07")
//  val `Blida`                                      = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Blida", "DZ-09")
//  val `Bordj Bou Arreridj`                         = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Bordj Bou Arreridj", "DZ-34")
//  val `Bouira`                                     = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Bouira", "DZ-10")
//  val `Boumerdes`                                  = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Boumerdes", "DZ-35")
//  val `Chlef`                                      = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Chlef", "DZ-02")
//  val `Constantine`                                = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Constantine", "DZ-25")
//  val `Djelfa`                                     = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Djelfa", "DZ-17")
//  val `El Bayadh`                                  = new ISOCountrySubdivision(ISOCountry.ALGERIA, "El Bayadh", "DZ-32")
//  val `El Oued`                                    = new ISOCountrySubdivision(ISOCountry.ALGERIA, "El Oued", "DZ-39")
//  val `El Tarf`                                    = new ISOCountrySubdivision(ISOCountry.ALGERIA, "El Tarf", "DZ-36")
//  val `Ghardaia`                                   = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Ghardaia", "DZ-47")
//  val `Guelma`                                     = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Guelma", "DZ-24")
//  val `Illizi`                                     = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Illizi", "DZ-33")
//  val `Khenchela`                                  = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Khenchela", "DZ-40")
//  val `Laghouat`                                   = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Laghouat", "DZ-03")
//  val `Mascara`                                    = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Mascara", "DZ-29")
//  val `Medea`                                      = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Medea", "DZ-26")
//  val `Mila`                                       = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Mila", "DZ-43")
//  val `Mostaganem`                                 = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Mostaganem", "DZ-27")
//  val `Msila`                                      = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Msila", "DZ-28")
//  val `Naama`                                      = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Naama", "DZ-45")
//  val `Oran`                                       = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Oran", "DZ-31")
//  val `Ouargla`                                    = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Ouargla", "DZ-30")
//  val `Oum el Bouaghi`                             = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Oum el Bouaghi", "DZ-04")
//  val `Relizane`                                   = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Relizane", "DZ-48")
//  val `Saida`                                      = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Saida", "DZ-20")
//  val `Setif`                                      = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Setif", "DZ-19")
//  val `Sidi Bel Abbes`                             = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Sidi Bel Abbes", "DZ-22")
//  val `Skikda`                                     = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Skikda", "DZ-21")
//  val `Souk Ahras`                                 = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Souk Ahras", "DZ-41")
//  val `Tamanrasset`                                = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Tamanrasset", "DZ-11")
//  val `Tebessa`                                    = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Tebessa", "DZ-12")
//  val `Tiaret`                                     = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Tiaret", "DZ-14")
//  val `Tindouf`                                    = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Tindouf", "DZ-37")
//  val `Tipaza`                                     = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Tipaza", "DZ-42")
//  val `Tissemsilt`                                 = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Tissemsilt", "DZ-38")
//  val `Tizi Ouzou`                                 = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Tizi Ouzou", "DZ-15")
//  val `Tlemcen`                                    = new ISOCountrySubdivision(ISOCountry.ALGERIA, "Tlemcen", "DZ-13")
//  val `Azuay`                                      = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Azuay", "EC-A")
//  val `Bolivar - Ecuador`                          = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Bolivar", "EC-B")
//  val `Canar`                                      = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Canar", "EC-F")
//  val `Carchi`                                     = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Carchi", "EC-C")
//  val `Chimborazo`                                 = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Chimborazo", "EC-H")
//  val `Cotopaxi`                                   = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Cotopaxi", "EC-X")
//  val `El Oro`                                     = new ISOCountrySubdivision(ISOCountry.ECUADOR, "El Oro", "EC-O")
//  val `Esmeraldas`                                 = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Esmeraldas", "EC-E")
//  val `Galapagos`                                  = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Galapagos", "EC-W")
//  val `Guayas`                                     = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Guayas", "EC-G")
//  val `Imbabura`                                   = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Imbabura", "EC-I")
//  val `Loja`                                       = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Loja", "EC-L")
//  val `Los Rios`                                   = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Los Rios", "EC-R")
//  val `Manabi`                                     = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Manabi", "EC-M")
//  val `Morona-Santiago`                            = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Morona-Santiago", "EC-S")
//  val `Napo`                                       = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Napo", "EC-N")
//  val `Orellana`                                   = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Orellana", "EC-D")
//  val `Pastaza`                                    = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Pastaza", "EC-Y")
//  val `Pichincha`                                  = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Pichincha", "EC-P")
//  val `Santa Elena`                                = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Santa Elena", "EC-SE")
//  val `Sucumbios`                                  = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Sucumbios", "EC-U")
//  val `Tungurahua`                                 = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Tungurahua", "EC-T")
//  val `Zamora-Chinchipe`                           = new ISOCountrySubdivision(ISOCountry.ECUADOR, "Zamora-Chinchipe", "EC-Z")
//  val `Harjumaa`                                   = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Harjumaa", "EE-37")
//  val `Hiiumaa`                                    = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Hiiumaa", "EE-39")
//  val `Ida-Virumaa`                                = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Ida-Virumaa", "EE-44")
//  val `Jarvamaa`                                   = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Jarvamaa", "EE-51")
//  val `Jogevamaa`                                  = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Jogevamaa", "EE-49")
//  val `Laane-Virumaa`                              = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Laane-Virumaa", "EE-59")
//  val `Laanemaa`                                   = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Laanemaa", "EE-57")
//  val `Parnumaa`                                   = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Parnumaa", "EE-67")
//  val `Polvamaa`                                   = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Polvamaa", "EE-65")
//  val `Raplamaa`                                   = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Raplamaa", "EE-70")
//  val `Saaremaa`                                   = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Saaremaa", "EE-74")
//  val `Tartumaa`                                   = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Tartumaa", "EE-78")
//  val `Valgamaa`                                   = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Valgamaa", "EE-82")
//  val `Viljandimaa`                                = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Viljandimaa", "EE-84")
//  val `Vorumaa`                                    = new ISOCountrySubdivision(ISOCountry.ESTONIA, "Vorumaa", "EE-86")
//  val `Ad Daqahliyah`                              = new ISOCountrySubdivision(ISOCountry.EGYPT, "Ad Daqahliyah", "EG-DK")
//  val `Al Bahr al Ahmar`                           = new ISOCountrySubdivision(ISOCountry.EGYPT, "Al Bahr al Ahmar", "EG-BA")
//  val `Al Buhayrah`                                = new ISOCountrySubdivision(ISOCountry.EGYPT, "Al Buhayrah", "EG-BH")
//  val `Al Fayyum`                                  = new ISOCountrySubdivision(ISOCountry.EGYPT, "Al Fayyum", "EG-FYM")
//  val `Al Gharbiyah`                               = new ISOCountrySubdivision(ISOCountry.EGYPT, "Al Gharbiyah", "EG-GH")
//  val `Al Iskandariyah`                            = new ISOCountrySubdivision(ISOCountry.EGYPT, "Al Iskandariyah", "EG-ALX")
//  val `Al Ismailiyah`                              = new ISOCountrySubdivision(ISOCountry.EGYPT, "Al Ismailiyah", "EG-IS")
//  val `Al Jizah`                                   = new ISOCountrySubdivision(ISOCountry.EGYPT, "Al Jizah", "EG-GZ")
//  val `Al Minufiyah`                               = new ISOCountrySubdivision(ISOCountry.EGYPT, "Al Minufiyah", "EG-MNF")
//  val `Al Minya`                                   = new ISOCountrySubdivision(ISOCountry.EGYPT, "Al Minya", "EG-MN")
//  val `Al Qahirah`                                 = new ISOCountrySubdivision(ISOCountry.EGYPT, "Al Qahirah", "EG-C")
//  val `Al Qalyubiyah`                              = new ISOCountrySubdivision(ISOCountry.EGYPT, "Al Qalyubiyah", "EG-KB")
//  val `Al Uqsur`                                   = new ISOCountrySubdivision(ISOCountry.EGYPT, "Al Uqsur", "EG-LX")
//  val `Al Wadi al Jadid`                           = new ISOCountrySubdivision(ISOCountry.EGYPT, "Al Wadi al Jadid", "EG-WAD")
//  val `As Suways`                                  = new ISOCountrySubdivision(ISOCountry.EGYPT, "As Suways", "EG-SUZ")
//  val `Ash Sharqiyah - Egypt`                      = new ISOCountrySubdivision(ISOCountry.EGYPT, "Ash Sharqiyah", "EG-SHR")
//  val `Aswan`                                      = new ISOCountrySubdivision(ISOCountry.EGYPT, "Aswan", "EG-ASN")
//  val `Asyut`                                      = new ISOCountrySubdivision(ISOCountry.EGYPT, "Asyut", "EG-AST")
//  val `Bani Suwayf`                                = new ISOCountrySubdivision(ISOCountry.EGYPT, "Bani Suwayf", "EG-BNS")
//  val `Bur Sa'id`                                  = new ISOCountrySubdivision(ISOCountry.EGYPT, "Bur Sa'id", "EG-PTS")
//  val `Dumyat`                                     = new ISOCountrySubdivision(ISOCountry.EGYPT, "Dumyat", "EG-DT")
//  val `Janub Sina'`                                = new ISOCountrySubdivision(ISOCountry.EGYPT, "Janub Sina'", "EG-JS")
//  val `Kafr ash Shaykh`                            = new ISOCountrySubdivision(ISOCountry.EGYPT, "Kafr ash Shaykh", "EG-KFS")
//  val `Matruh`                                     = new ISOCountrySubdivision(ISOCountry.EGYPT, "Matruh", "EG-MT")
//  val `Qina`                                       = new ISOCountrySubdivision(ISOCountry.EGYPT, "Qina", "EG-KN")
//  val `Shamal Sina'`                               = new ISOCountrySubdivision(ISOCountry.EGYPT, "Shamal Sina'", "EG-SIN")
//  val `Suhaj`                                      = new ISOCountrySubdivision(ISOCountry.EGYPT, "Suhaj", "EG-SHG")
//  val `Al Awsat`                                   = new ISOCountrySubdivision(ISOCountry.ERITREA, "Al Awsat", "ER-MA")
//  val `Al Janubi`                                  = new ISOCountrySubdivision(ISOCountry.ERITREA, "Al Janubi", "ER-DU")
//  val `Ansaba`                                     = new ISOCountrySubdivision(ISOCountry.ERITREA, "Ansaba", "ER-AN")
//  val `Janubi al Bahri al Ahmar`                   = new ISOCountrySubdivision(ISOCountry.ERITREA, "Janubi al Bahri al Ahmar", "ER-DK")
//  val `Qash-Barkah`                                = new ISOCountrySubdivision(ISOCountry.ERITREA, "Qash-Barkah", "ER-GB")
//  val `Shimali al Bahri al Ahmar`                  = new ISOCountrySubdivision(ISOCountry.ERITREA, "Shimali al Bahri al Ahmar", "ER-SK")
//  val `Andalucia`                                  = new ISOCountrySubdivision(ISOCountry.SPAIN, "Andalucia", "ES-AN")
//  val `Aragon`                                     = new ISOCountrySubdivision(ISOCountry.SPAIN, "Aragon", "ES-AR")
//  val `Asturias, Principado de`                    = new ISOCountrySubdivision(ISOCountry.SPAIN, "Asturias, Principado de", "ES-AS")
//  val `Canarias`                                   = new ISOCountrySubdivision(ISOCountry.SPAIN, "Canarias", "ES-CN")
//  val `Cantabria`                                  = new ISOCountrySubdivision(ISOCountry.SPAIN, "Cantabria", "ES-CB")
//  val `Castilla y Leon`                            = new ISOCountrySubdivision(ISOCountry.SPAIN, "Castilla y Leon", "ES-CL")
//  val `Castilla-La Mancha`                         = new ISOCountrySubdivision(ISOCountry.SPAIN, "Castilla-La Mancha", "ES-CM")
//  val `Catalunya`                                  = new ISOCountrySubdivision(ISOCountry.SPAIN, "Catalunya", "ES-CT")
//  val `Ceuta`                                      = new ISOCountrySubdivision(ISOCountry.SPAIN, "Ceuta", "ES-CE")
//  val `Extremadura`                                = new ISOCountrySubdivision(ISOCountry.SPAIN, "Extremadura", "ES-EX")
//  val `Galicia`                                    = new ISOCountrySubdivision(ISOCountry.SPAIN, "Galicia", "ES-GA")
//  val `Illes Balears`                              = new ISOCountrySubdivision(ISOCountry.SPAIN, "Illes Balears", "ES-IB")
//  val `La Rioja`                                   = new ISOCountrySubdivision(ISOCountry.SPAIN, "La Rioja", "ES-LO")
//  val `Madrid, Comunidad de`                       = new ISOCountrySubdivision(ISOCountry.SPAIN, "Madrid, Comunidad de", "ES-MD")
//  val `Melilla`                                    = new ISOCountrySubdivision(ISOCountry.SPAIN, "Melilla", "ES-ML")
//  val `Murcia, Region de`                          = new ISOCountrySubdivision(ISOCountry.SPAIN, "Murcia, Region de", "ES-MC")
//  val `Navarra, Comunidad Foral de`                = new ISOCountrySubdivision(ISOCountry.SPAIN, "Navarra, Comunidad Foral de", "ES-NC")
//  val `Pais Vasco`                                 = new ISOCountrySubdivision(ISOCountry.SPAIN, "Pais Vasco", "ES-PV")
//  val `Valenciana, Comunidad`                      = new ISOCountrySubdivision(ISOCountry.SPAIN, "Valenciana, Comunidad", "ES-VC")
//  val `Adis Abeba`                                 = new ISOCountrySubdivision(ISOCountry.ETHIOPIA, "Adis Abeba", "ET-AA")
//  val `Afar`                                       = new ISOCountrySubdivision(ISOCountry.ETHIOPIA, "Afar", "ET-AF")
//  val `Amara`                                      = new ISOCountrySubdivision(ISOCountry.ETHIOPIA, "Amara", "ET-AM")
//  val `Binshangul Gumuz`                           = new ISOCountrySubdivision(ISOCountry.ETHIOPIA, "Binshangul Gumuz", "ET-BE")
//  val `Dire Dawa`                                  = new ISOCountrySubdivision(ISOCountry.ETHIOPIA, "Dire Dawa", "ET-DD")
//  val `Gambela Hizboch`                            = new ISOCountrySubdivision(ISOCountry.ETHIOPIA, "Gambela Hizboch", "ET-GA")
//  val `Hareri Hizb`                                = new ISOCountrySubdivision(ISOCountry.ETHIOPIA, "Hareri Hizb", "ET-HA")
//  val `Oromiya`                                    = new ISOCountrySubdivision(ISOCountry.ETHIOPIA, "Oromiya", "ET-OR")
//  val `Sumale`                                     = new ISOCountrySubdivision(ISOCountry.ETHIOPIA, "Sumale", "ET-SO")
//  val `Tigray`                                     = new ISOCountrySubdivision(ISOCountry.ETHIOPIA, "Tigray", "ET-TI")
//  val `YeDebub Biheroch Bihereseboch na Hizboch`   = new ISOCountrySubdivision(ISOCountry.ETHIOPIA, "YeDebub Biheroch Bihereseboch na Hizboch", "ET-SN")
//  val `Etela-Karjala`                              = new ISOCountrySubdivision(ISOCountry.FINLAND, "Etela-Karjala", "FI-02")
//  val `Etela-Pohjanmaa`                            = new ISOCountrySubdivision(ISOCountry.FINLAND, "Etela-Pohjanmaa", "FI-03")
//  val `Etela-Savo`                                 = new ISOCountrySubdivision(ISOCountry.FINLAND, "Etela-Savo", "FI-04")
//  val `Kainuu`                                     = new ISOCountrySubdivision(ISOCountry.FINLAND, "Kainuu", "FI-05")
//  val `Kanta-Hame`                                 = new ISOCountrySubdivision(ISOCountry.FINLAND, "Kanta-Hame", "FI-06")
//  val `Keski-Pohjanmaa`                            = new ISOCountrySubdivision(ISOCountry.FINLAND, "Keski-Pohjanmaa", "FI-07")
//  val `Keski-Suomi`                                = new ISOCountrySubdivision(ISOCountry.FINLAND, "Keski-Suomi", "FI-08")
//  val `Kymenlaakso`                                = new ISOCountrySubdivision(ISOCountry.FINLAND, "Kymenlaakso", "FI-09")
//  val `Lappi`                                      = new ISOCountrySubdivision(ISOCountry.FINLAND, "Lappi", "FI-10")
//  val `Paijat-Hame`                                = new ISOCountrySubdivision(ISOCountry.FINLAND, "Paijat-Hame", "FI-16")
//  val `Pirkanmaa`                                  = new ISOCountrySubdivision(ISOCountry.FINLAND, "Pirkanmaa", "FI-11")
//  val `Pohjanmaa`                                  = new ISOCountrySubdivision(ISOCountry.FINLAND, "Pohjanmaa", "FI-12")
//  val `Pohjois-Karjala`                            = new ISOCountrySubdivision(ISOCountry.FINLAND, "Pohjois-Karjala", "FI-13")
//  val `Pohjois-Pohjanmaa`                          = new ISOCountrySubdivision(ISOCountry.FINLAND, "Pohjois-Pohjanmaa", "FI-14")
//  val `Pohjois-Savo`                               = new ISOCountrySubdivision(ISOCountry.FINLAND, "Pohjois-Savo", "FI-15")
//  val `Satakunta`                                  = new ISOCountrySubdivision(ISOCountry.FINLAND, "Satakunta", "FI-17")
//  val `Uusimaa`                                    = new ISOCountrySubdivision(ISOCountry.FINLAND, "Uusimaa", "FI-18")
//  val `Varsinais-Suomi`                            = new ISOCountrySubdivision(ISOCountry.FINLAND, "Varsinais-Suomi", "FI-19")
//  val `Central Fiji`                               = new ISOCountrySubdivision(ISOCountry.FIJI, "Central", "FJ-C")
//  val `Northern Fiji`                              = new ISOCountrySubdivision(ISOCountry.FIJI, "Northern", "FJ-N")
//  val `Western Fiji`                               = new ISOCountrySubdivision(ISOCountry.FIJI, "Western", "FJ-W")
//  val `Chuuk`                                      = new ISOCountrySubdivision(ISOCountry.MICRONESIA, "Chuuk", "FM-TRK")
//  val `Kosrae`                                     = new ISOCountrySubdivision(ISOCountry.MICRONESIA, "Kosrae", "FM-KSA")
//  val `Pohnpei`                                    = new ISOCountrySubdivision(ISOCountry.MICRONESIA, "Pohnpei", "FM-PNI")
//  val `Yap`                                        = new ISOCountrySubdivision(ISOCountry.MICRONESIA, "Yap", "FM-YAP")
//  val `Alsace`                                     = new ISOCountrySubdivision(ISOCountry.FRANCE, "Alsace", "FR-A")
//  val `Aquitaine`                                  = new ISOCountrySubdivision(ISOCountry.FRANCE, "Aquitaine", "FR-B")
//  val `Auvergne`                                   = new ISOCountrySubdivision(ISOCountry.FRANCE, "Auvergne", "FR-C")
//  val `Basse-Normandie`                            = new ISOCountrySubdivision(ISOCountry.FRANCE, "Basse-Normandie", "FR-P")
//  val `Bourgogne`                                  = new ISOCountrySubdivision(ISOCountry.FRANCE, "Bourgogne", "FR-D")
//  val `Bretagne`                                   = new ISOCountrySubdivision(ISOCountry.FRANCE, "Bretagne", "FR-E")
//  val `Centre France`                              = new ISOCountrySubdivision(ISOCountry.FRANCE, "Centre", "FR-F")
//  val `Champagne-Ardenne`                          = new ISOCountrySubdivision(ISOCountry.FRANCE, "Champagne-Ardenne", "FR-G")
//  val `Corse`                                      = new ISOCountrySubdivision(ISOCountry.FRANCE, "Corse", "FR-H")
//  val `Franche-Comte`                              = new ISOCountrySubdivision(ISOCountry.FRANCE, "Franche-Comte", "FR-I")
//  val `Haute-Normandie`                            = new ISOCountrySubdivision(ISOCountry.FRANCE, "Haute-Normandie", "FR-Q")
//  val `Ile-de-France`                              = new ISOCountrySubdivision(ISOCountry.FRANCE, "Ile-de-France", "FR-J")
//  val `Languedoc-Roussillon`                       = new ISOCountrySubdivision(ISOCountry.FRANCE, "Languedoc-Roussillon", "FR-K")
//  val `Limousin`                                   = new ISOCountrySubdivision(ISOCountry.FRANCE, "Limousin", "FR-L")
//  val `Lorraine`                                   = new ISOCountrySubdivision(ISOCountry.FRANCE, "Lorraine", "FR-M")
//  val `Midi-Pyrenees`                              = new ISOCountrySubdivision(ISOCountry.FRANCE, "Midi-Pyrenees", "FR-N")
//  val `Nord-Pas-de-Calais`                         = new ISOCountrySubdivision(ISOCountry.FRANCE, "Nord-Pas-de-Calais", "FR-O")
//  val `Pays de la Loire`                           = new ISOCountrySubdivision(ISOCountry.FRANCE, "Pays de la Loire", "FR-R")
//  val `Picardie`                                   = new ISOCountrySubdivision(ISOCountry.FRANCE, "Picardie", "FR-S")
//  val `Poitou-Charentes`                           = new ISOCountrySubdivision(ISOCountry.FRANCE, "Poitou-Charentes", "FR-T")
//  val `Provence-Alpes-Cote d'Azur`                 = new ISOCountrySubdivision(ISOCountry.FRANCE, "Provence-Alpes-Cote d'Azur", "FR-U")
//  val `Rhone-Alpes`                                = new ISOCountrySubdivision(ISOCountry.FRANCE, "Rhone-Alpes", "FR-V")
//  val `Estuaire`                                   = new ISOCountrySubdivision(ISOCountry.GABON, "Estuaire", "GA-1")
//  val `Haut-Ogooue`                                = new ISOCountrySubdivision(ISOCountry.GABON, "Haut-Ogooue", "GA-2")
//  val `Moyen-Ogooue`                               = new ISOCountrySubdivision(ISOCountry.GABON, "Moyen-Ogooue", "GA-3")
//  val `Ngounie`                                    = new ISOCountrySubdivision(ISOCountry.GABON, "Ngounie", "GA-4")
//  val `Nyanga`                                     = new ISOCountrySubdivision(ISOCountry.GABON, "Nyanga", "GA-5")
//  val `Ogooue-Ivindo`                              = new ISOCountrySubdivision(ISOCountry.GABON, "Ogooue-Ivindo", "GA-6")
//  val `Ogooue-Lolo`                                = new ISOCountrySubdivision(ISOCountry.GABON, "Ogooue-Lolo", "GA-7")
//  val `Ogooue-Maritime`                            = new ISOCountrySubdivision(ISOCountry.GABON, "Ogooue-Maritime", "GA-8")
//  val `Woleu-Ntem`                                 = new ISOCountrySubdivision(ISOCountry.GABON, "Woleu-Ntem", "GA-9")
//  val `England`                                    = new ISOCountrySubdivision(ISOCountry.UNITED_KINGDOM, "England", "GB-ENG")
//  val `Northern Ireland`                           = new ISOCountrySubdivision(ISOCountry.UNITED_KINGDOM, "Northern Ireland", "GB-NIR")
//  val `Scotland`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_KINGDOM, "Scotland", "GB-SCT")
//  val `Wales`                                      = new ISOCountrySubdivision(ISOCountry.UNITED_KINGDOM, "Wales", "GB-WLS")
//  val `Saint Andrew - Grenada`                     = new ISOCountrySubdivision(ISOCountry.GRENADA, "Saint Andrew", "GD-01")
//  val `Saint David`                                = new ISOCountrySubdivision(ISOCountry.GRENADA, "Saint David", "GD-02")
//  val `Saint George - Grenada`                     = new ISOCountrySubdivision(ISOCountry.GRENADA, "Saint George", "GD-03")
//  val `Saint John`                                 = new ISOCountrySubdivision(ISOCountry.GRENADA, "Saint John", "GD-04")
//  val `Saint Mark`                                 = new ISOCountrySubdivision(ISOCountry.GRENADA, "Saint Mark", "GD-05")
//  val `Saint Patrick`                              = new ISOCountrySubdivision(ISOCountry.GRENADA, "Saint Patrick", "GD-06")
//  val `Abkhazia`                                   = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Abkhazia", "GE-AB")
//  val `Ajaria`                                     = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Ajaria", "GE-AJ")
//  val `Akhalk'alak'is Raioni`                      = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Akhalk'alak'is Raioni", "GE-04")
//  val `Baghdat'is Raioni`                          = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Baghdat'is Raioni", "GE-09")
//  val `Borjomis Raioni`                            = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Borjomis Raioni", "GE-11")
//  val `Goris Raioni`                               = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Goris Raioni", "GE-19")
//  val `Guria`                                      = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Guria", "GE-GU")
//  val `Imereti`                                    = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Imereti", "GE-IM")
//  val `Javis Raioni`                               = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Javis Raioni", "GE-23")
//  val `K'arelis Raioni`                            = new ISOCountrySubdivision(ISOCountry.GEORGIA, "K'arelis Raioni", "GE-24")
//  val `Kakheti`                                    = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Kakheti", "GE-KA")
//  val `Khashuris Raioni`                           = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Khashuris Raioni", "GE-28")
//  val `Kvemo Kartli`                               = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Kvemo Kartli", "GE-KK")
//  val `Mtskheta-Mtianeti`                          = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Mtskheta-Mtianeti", "GE-MM")
//  val `Racha-Lechkhumi and Kvemo Svaneti`          = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Racha-Lechkhumi and Kvemo Svaneti", "GE-RL")
//  val `Samegrelo and Zemo Svaneti`                 = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Samegrelo and Zemo Svaneti", "GE-SZ")
//  val `Samtskhe-Javakheti`                         = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Samtskhe-Javakheti", "GE-SJ")
//  val `Shida Kartli`                               = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Shida Kartli", "GE-SK")
//  val `T'bilisi`                                   = new ISOCountrySubdivision(ISOCountry.GEORGIA, "T'bilisi", "GE-TB")
//  val `Vanis Raioni`                               = new ISOCountrySubdivision(ISOCountry.GEORGIA, "Vanis Raioni", "GE-61")
//  val `Ashanti`                                    = new ISOCountrySubdivision(ISOCountry.GHANA, "Ashanti", "GH-AH")
//  val `Brong-Ahafo`                                = new ISOCountrySubdivision(ISOCountry.GHANA, "Brong-Ahafo", "GH-BA")
//  val `Central Ghana`                              = new ISOCountrySubdivision(ISOCountry.GHANA, "Central", "GH-CP")
//  val `Eastern Ghana`                              = new ISOCountrySubdivision(ISOCountry.GHANA, "Eastern", "GH-EP")
//  val `Greater Accra`                              = new ISOCountrySubdivision(ISOCountry.GHANA, "Greater Accra", "GH-AA")
//  val `Northern Ghana`                             = new ISOCountrySubdivision(ISOCountry.GHANA, "Northern", "GH-NP")
//  val `Upper East`                                 = new ISOCountrySubdivision(ISOCountry.GHANA, "Upper East", "GH-UE")
//  val `Upper West`                                 = new ISOCountrySubdivision(ISOCountry.GHANA, "Upper West", "GH-UW")
//  val `Volta`                                      = new ISOCountrySubdivision(ISOCountry.GHANA, "Volta", "GH-TV")
//  val `Western Ghana`                              = new ISOCountrySubdivision(ISOCountry.GHANA, "Western", "GH-WP")
//  val `Kommune Kujalleq`                           = new ISOCountrySubdivision(ISOCountry.GREENLAND, "Kommune Kujalleq", "GL-KU")
//  val `Kommuneqarfik Sermersooq`                   = new ISOCountrySubdivision(ISOCountry.GREENLAND, "Kommuneqarfik Sermersooq", "GL-SM")
//  val `Qaasuitsup Kommunia`                        = new ISOCountrySubdivision(ISOCountry.GREENLAND, "Qaasuitsup Kommunia", "GL-QA")
//  val `Qeqqata Kommunia`                           = new ISOCountrySubdivision(ISOCountry.GREENLAND, "Qeqqata Kommunia", "GL-QE")
//  val `Banjul`                                     = new ISOCountrySubdivision(ISOCountry.GAMBIA, "Banjul", "GM-B")
//  val `Central River`                              = new ISOCountrySubdivision(ISOCountry.GAMBIA, "Central River", "GM-M")
//  val `Lower River`                                = new ISOCountrySubdivision(ISOCountry.GAMBIA, "Lower River", "GM-L")
//  val `North Bank`                                 = new ISOCountrySubdivision(ISOCountry.GAMBIA, "North Bank", "GM-N")
//  val `Upper River`                                = new ISOCountrySubdivision(ISOCountry.GAMBIA, "Upper River", "GM-U")
//  val `Western Gambia`                             = new ISOCountrySubdivision(ISOCountry.GAMBIA, "Western", "GM-W")
//  val `Beyla`                                      = new ISOCountrySubdivision(ISOCountry.GUINEA, "Beyla", "GN-BE")
//  val `Boffa`                                      = new ISOCountrySubdivision(ISOCountry.GUINEA, "Boffa", "GN-BF")
//  val `Boke`                                       = new ISOCountrySubdivision(ISOCountry.GUINEA, "Boke", "GN-BK")
//  val `Conakry`                                    = new ISOCountrySubdivision(ISOCountry.GUINEA, "Conakry", "GN-C")
//  val `Coyah`                                      = new ISOCountrySubdivision(ISOCountry.GUINEA, "Coyah", "GN-CO")
//  val `Dabola`                                     = new ISOCountrySubdivision(ISOCountry.GUINEA, "Dabola", "GN-DB")
//  val `Dalaba`                                     = new ISOCountrySubdivision(ISOCountry.GUINEA, "Dalaba", "GN-DL")
//  val `Dinguiraye`                                 = new ISOCountrySubdivision(ISOCountry.GUINEA, "Dinguiraye", "GN-DI")
//  val `Dubreka`                                    = new ISOCountrySubdivision(ISOCountry.GUINEA, "Dubreka", "GN-DU")
//  val `Faranah`                                    = new ISOCountrySubdivision(ISOCountry.GUINEA, "Faranah", "GN-FA")
//  val `Forecariah`                                 = new ISOCountrySubdivision(ISOCountry.GUINEA, "Forecariah", "GN-FO")
//  val `Fria`                                       = new ISOCountrySubdivision(ISOCountry.GUINEA, "Fria", "GN-FR")
//  val `Gaoual`                                     = new ISOCountrySubdivision(ISOCountry.GUINEA, "Gaoual", "GN-GA")
//  val `Gueckedou`                                  = new ISOCountrySubdivision(ISOCountry.GUINEA, "Gueckedou", "GN-GU")
//  val `Kankan`                                     = new ISOCountrySubdivision(ISOCountry.GUINEA, "Kankan", "GN-KA")
//  val `Kerouane`                                   = new ISOCountrySubdivision(ISOCountry.GUINEA, "Kerouane", "GN-KE")
//  val `Kindia`                                     = new ISOCountrySubdivision(ISOCountry.GUINEA, "Kindia", "GN-KD")
//  val `Kissidougou`                                = new ISOCountrySubdivision(ISOCountry.GUINEA, "Kissidougou", "GN-KS")
//  val `Koubia`                                     = new ISOCountrySubdivision(ISOCountry.GUINEA, "Koubia", "GN-KB")
//  val `Koundara`                                   = new ISOCountrySubdivision(ISOCountry.GUINEA, "Koundara", "GN-KN")
//  val `Kouroussa`                                  = new ISOCountrySubdivision(ISOCountry.GUINEA, "Kouroussa", "GN-KO")
//  val `Labe`                                       = new ISOCountrySubdivision(ISOCountry.GUINEA, "Labe", "GN-LA")
//  val `Lelouma`                                    = new ISOCountrySubdivision(ISOCountry.GUINEA, "Lelouma", "GN-LE")
//  val `Lola`                                       = new ISOCountrySubdivision(ISOCountry.GUINEA, "Lola", "GN-LO")
//  val `Macenta`                                    = new ISOCountrySubdivision(ISOCountry.GUINEA, "Macenta", "GN-MC")
//  val `Mali`                                       = new ISOCountrySubdivision(ISOCountry.GUINEA, "Mali", "GN-ML")
//  val `Mamou`                                      = new ISOCountrySubdivision(ISOCountry.GUINEA, "Mamou", "GN-MM")
//  val `Mandiana`                                   = new ISOCountrySubdivision(ISOCountry.GUINEA, "Mandiana", "GN-MD")
//  val `Nzerekore`                                  = new ISOCountrySubdivision(ISOCountry.GUINEA, "Nzerekore", "GN-NZ")
//  val `Pita`                                       = new ISOCountrySubdivision(ISOCountry.GUINEA, "Pita", "GN-PI")
//  val `Siguiri`                                    = new ISOCountrySubdivision(ISOCountry.GUINEA, "Siguiri", "GN-SI")
//  val `Telimele`                                   = new ISOCountrySubdivision(ISOCountry.GUINEA, "Telimele", "GN-TE")
//  val `Tougue`                                     = new ISOCountrySubdivision(ISOCountry.GUINEA, "Tougue", "GN-TO")
//  val `Yomou`                                      = new ISOCountrySubdivision(ISOCountry.GUINEA, "Yomou", "GN-YO")
//  val `Annobon`                                    = new ISOCountrySubdivision(ISOCountry.EQUATORIAL_GUINEA, "Annobon", "GQ-AN")
//  val `Bioko Norte`                                = new ISOCountrySubdivision(ISOCountry.EQUATORIAL_GUINEA, "Bioko Norte", "GQ-BN")
//  val `Bioko Sur`                                  = new ISOCountrySubdivision(ISOCountry.EQUATORIAL_GUINEA, "Bioko Sur", "GQ-BS")
//  val `Centro Sur`                                 = new ISOCountrySubdivision(ISOCountry.EQUATORIAL_GUINEA, "Centro Sur", "GQ-CS")
//  val `Kie-Ntem`                                   = new ISOCountrySubdivision(ISOCountry.EQUATORIAL_GUINEA, "Kie-Ntem", "GQ-KN")
//  val `Litoral`                                    = new ISOCountrySubdivision(ISOCountry.EQUATORIAL_GUINEA, "Litoral", "GQ-LI")
//  val `Wele-Nzas`                                  = new ISOCountrySubdivision(ISOCountry.EQUATORIAL_GUINEA, "Wele-Nzas", "GQ-WN")
//  val `Aitolia kai Akarnania`                      = new ISOCountrySubdivision(ISOCountry.GREECE, "Aitolia kai Akarnania", "GR-01")
//  val `Akhaia`                                     = new ISOCountrySubdivision(ISOCountry.GREECE, "Akhaia", "GR-13")
//  val `Argolis`                                    = new ISOCountrySubdivision(ISOCountry.GREECE, "Argolis", "GR-11")
//  val `Arkadhia`                                   = new ISOCountrySubdivision(ISOCountry.GREECE, "Arkadhia", "GR-12")
//  val `Arta`                                       = new ISOCountrySubdivision(ISOCountry.GREECE, "Arta", "DJ-AR")
//  val `Attiki`                                     = new ISOCountrySubdivision(ISOCountry.GREECE, "Attiki", "GR-A1")
//  val `Dhodhekanisos`                              = new ISOCountrySubdivision(ISOCountry.GREECE, "Dhodhekanisos", "GR-81")
//  val `Drama`                                      = new ISOCountrySubdivision(ISOCountry.GREECE, "Drama", "GR-52")
//  val `Evritania`                                  = new ISOCountrySubdivision(ISOCountry.GREECE, "Evritania", "GR-05")
//  val `Evros`                                      = new ISOCountrySubdivision(ISOCountry.GREECE, "Evros", "GR-71")
//  val `Evvoia`                                     = new ISOCountrySubdivision(ISOCountry.GREECE, "Evvoia", "GR-04")
//  val `Florina`                                    = new ISOCountrySubdivision(ISOCountry.GREECE, "Florina", "GR-63")
//  val `Fokis`                                      = new ISOCountrySubdivision(ISOCountry.GREECE, "Fokis", "GR-07")
//  val `Fthiotis`                                   = new ISOCountrySubdivision(ISOCountry.GREECE, "Fthiotis", "GR-06")
//  val `Grevena`                                    = new ISOCountrySubdivision(ISOCountry.GREECE, "Grevena", "GR-51")
//  val `Ilia`                                       = new ISOCountrySubdivision(ISOCountry.GREECE, "Ilia", "GR-14")
//  val `Imathia`                                    = new ISOCountrySubdivision(ISOCountry.GREECE, "Imathia", "GR-53")
//  val `Ioannina`                                   = new ISOCountrySubdivision(ISOCountry.GREECE, "Ioannina", "GR-33")
//  val `Iraklion`                                   = new ISOCountrySubdivision(ISOCountry.GREECE, "Iraklion", "GR-91")
//  val `Kardhitsa`                                  = new ISOCountrySubdivision(ISOCountry.GREECE, "Kardhitsa", "GR-41")
//  val `Kastoria`                                   = new ISOCountrySubdivision(ISOCountry.GREECE, "Kastoria", "GR-56")
//  val `Kavala`                                     = new ISOCountrySubdivision(ISOCountry.GREECE, "Kavala", "GR-55")
//  val `Kefallinia`                                 = new ISOCountrySubdivision(ISOCountry.GREECE, "Kefallinia", "GR-23")
//  val `Kerkira`                                    = new ISOCountrySubdivision(ISOCountry.GREECE, "Kerkira", "GR-22")
//  val `Khalkidhiki`                                = new ISOCountrySubdivision(ISOCountry.GREECE, "Khalkidhiki", "GR-64")
//  val `Khania`                                     = new ISOCountrySubdivision(ISOCountry.GREECE, "Khania", "GR-94")
//  val `Khios`                                      = new ISOCountrySubdivision(ISOCountry.GREECE, "Khios", "GR-85")
//  val `Kikladhes`                                  = new ISOCountrySubdivision(ISOCountry.GREECE, "Kikladhes", "GR-82")
//  val `Kilkis`                                     = new ISOCountrySubdivision(ISOCountry.GREECE, "Kilkis", "GR-57")
//  val `Korinthia`                                  = new ISOCountrySubdivision(ISOCountry.GREECE, "Korinthia", "GR-15")
//  val `Kozani`                                     = new ISOCountrySubdivision(ISOCountry.GREECE, "Kozani", "GR-58")
//  val `Lakonia`                                    = new ISOCountrySubdivision(ISOCountry.GREECE, "Lakonia", "GR-16")
//  val `Larisa`                                     = new ISOCountrySubdivision(ISOCountry.GREECE, "Larisa", "GR-42")
//  val `Lasithi`                                    = new ISOCountrySubdivision(ISOCountry.GREECE, "Lasithi", "GR-92")
//  val `Lesvos`                                     = new ISOCountrySubdivision(ISOCountry.GREECE, "Lesvos", "GR-83")
//  val `Levkas`                                     = new ISOCountrySubdivision(ISOCountry.GREECE, "Levkas", "GR-24")
//  val `Magnisia`                                   = new ISOCountrySubdivision(ISOCountry.GREECE, "Magnisia", "GR-43")
//  val `Messinia`                                   = new ISOCountrySubdivision(ISOCountry.GREECE, "Messinia", "GR-17")
//  val `Pella`                                      = new ISOCountrySubdivision(ISOCountry.GREECE, "Pella", "GR-59")
//  val `Pieria`                                     = new ISOCountrySubdivision(ISOCountry.GREECE, "Pieria", "GR-61")
//  val `Preveza`                                    = new ISOCountrySubdivision(ISOCountry.GREECE, "Preveza", "GR-34")
//  val `Rethimni`                                   = new ISOCountrySubdivision(ISOCountry.GREECE, "Rethimni", "GR-93")
//  val `Rodhopi`                                    = new ISOCountrySubdivision(ISOCountry.GREECE, "Rodhopi", "GR-73")
//  val `Samos`                                      = new ISOCountrySubdivision(ISOCountry.GREECE, "Samos", "GR-84")
//  val `Serrai`                                     = new ISOCountrySubdivision(ISOCountry.GREECE, "Serrai", "GR-62")
//  val `Thesprotia`                                 = new ISOCountrySubdivision(ISOCountry.GREECE, "Thesprotia", "GR-32")
//  val `Thessaloniki`                               = new ISOCountrySubdivision(ISOCountry.GREECE, "Thessaloniki", "GR-54")
//  val `Trikala`                                    = new ISOCountrySubdivision(ISOCountry.GREECE, "Trikala", "GR-44")
//  val `Voiotia`                                    = new ISOCountrySubdivision(ISOCountry.GREECE, "Voiotia", "GR-03")
//  val `Xanthi`                                     = new ISOCountrySubdivision(ISOCountry.GREECE, "Xanthi", "GR-72")
//  val `Zakinthos`                                  = new ISOCountrySubdivision(ISOCountry.GREECE, "Zakinthos", "GR-21")
//  val `Alta Verapaz`                               = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Alta Verapaz", "GT-AV")
//  val `Baja Verapaz`                               = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Baja Verapaz", "GT-BV")
//  val `Chimaltenango`                              = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Chimaltenango", "GT-CM")
//  val `Chiquimula`                                 = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Chiquimula", "GT-CQ")
//  val `El Progreso`                                = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "El Progreso", "GT-PR")
//  val `Escuintla`                                  = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Escuintla", "GT-ES")
//  val `Guatemala`                                  = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Guatemala", "GT-GU")
//  val `Huehuetenango`                              = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Huehuetenango", "GT-HU")
//  val `Izabal`                                     = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Izabal", "GT-IZ")
//  val `Jalapa`                                     = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Jalapa", "GT-JA")
//  val `Jutiapa`                                    = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Jutiapa", "GT-JU")
//  val `Peten`                                      = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Peten", "GT-PE")
//  val `Quetzaltenango`                             = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Quetzaltenango", "GT-QZ")
//  val `Quiche`                                     = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Quiche", "GT-QC")
//  val `Retalhuleu`                                 = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Retalhuleu", "GT-RE")
//  val `Sacatepequez`                               = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Sacatepequez", "GT-SA")
//  val `San Marcos`                                 = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "San Marcos", "GT-SM")
//  val `Santa Rosa`                                 = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Santa Rosa", "GT-SR")
//  val `Solola`                                     = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Solola", "GT-SO")
//  val `Suchitepequez`                              = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Suchitepequez", "GT-SU")
//  val `Totonicapan`                                = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Totonicapan", "GT-TO")
//  val `Zacapa`                                     = new ISOCountrySubdivision(ISOCountry.GUATEMALA, "Zacapa", "GT-ZA")
//  val `Bafata`                                     = new ISOCountrySubdivision(ISOCountry.GUINEA_BISSAU, "Bafata", "GW-BA")
//  val `Biombo`                                     = new ISOCountrySubdivision(ISOCountry.GUINEA_BISSAU, "Biombo", "GW-BM")
//  val `Bissau`                                     = new ISOCountrySubdivision(ISOCountry.GUINEA_BISSAU, "Bissau", "GW-BS")
//  val `Bolama`                                     = new ISOCountrySubdivision(ISOCountry.GUINEA_BISSAU, "Bolama", "GW-BL")
//  val `Cacheu`                                     = new ISOCountrySubdivision(ISOCountry.GUINEA_BISSAU, "Cacheu", "GW-CA")
//  val `Gabu`                                       = new ISOCountrySubdivision(ISOCountry.GUINEA_BISSAU, "Gabu", "GW-GA")
//  val `Oio`                                        = new ISOCountrySubdivision(ISOCountry.GUINEA_BISSAU, "Oio", "GW-OI")
//  val `Quinara`                                    = new ISOCountrySubdivision(ISOCountry.GUINEA_BISSAU, "Quinara", "GW-QU")
//  val `Tombali`                                    = new ISOCountrySubdivision(ISOCountry.GUINEA_BISSAU, "Tombali", "GW-TO")
//  val `Cuyuni-Mazaruni`                            = new ISOCountrySubdivision(ISOCountry.GUYANA, "Cuyuni-Mazaruni", "GY-CU")
//  val `Demerara-Mahaica`                           = new ISOCountrySubdivision(ISOCountry.GUYANA, "Demerara-Mahaica", "GY-DE")
//  val `East Berbice-Corentyne`                     = new ISOCountrySubdivision(ISOCountry.GUYANA, "East Berbice-Corentyne", "GY-EB")
//  val `Essequibo Islands-West Demerara`            = new ISOCountrySubdivision(ISOCountry.GUYANA, "Essequibo Islands-West Demerara", "GY-ES")
//  val `Mahaica-Berbice`                            = new ISOCountrySubdivision(ISOCountry.GUYANA, "Mahaica-Berbice", "GY-MA")
//  val `Pomeroon-Supenaam`                          = new ISOCountrySubdivision(ISOCountry.GUYANA, "Pomeroon-Supenaam", "GY-PM")
//  val `Upper Demerara-Berbice`                     = new ISOCountrySubdivision(ISOCountry.GUYANA, "Upper Demerara-Berbice", "GY-UD")
//  val `Atlantida`                                  = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Atlantida", "HN-AT")
//  val `Choluteca`                                  = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Choluteca", "HN-CH")
//  val `Colon - Honduras`                           = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Colon", "HN-CL")
//  val `Comayagua`                                  = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Comayagua", "HN-CM")
//  val `Copan`                                      = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Copan", "HN-CP")
//  val `Cortes`                                     = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Cortes", "HN-CR")
//  val `El Paraiso`                                 = new ISOCountrySubdivision(ISOCountry.HONDURAS, "El Paraiso", "HN-EP")
//  val `Francisco Morazan`                          = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Francisco Morazan", "HN-FM")
//  val `Gracias a Dios`                             = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Gracias a Dios", "HN-GD")
//  val `Intibuca`                                   = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Intibuca", "HN-IN")
//  val `Islas de la Bahia`                          = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Islas de la Bahia", "HN-IB")
//  val `La Paz - Honduras`                          = new ISOCountrySubdivision(ISOCountry.HONDURAS, "La Paz", "HN-LP")
//  val `Lempira`                                    = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Lempira", "HN-LE")
//  val `Ocotepeque`                                 = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Ocotepeque", "HN-OC")
//  val `Olancho`                                    = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Olancho", "HN-OL")
//  val `Santa Barbara`                              = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Santa Barbara", "HN-SB")
//  val `Valle`                                      = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Valle", "HN-VA")
//  val `Yoro`                                       = new ISOCountrySubdivision(ISOCountry.HONDURAS, "Yoro", "HN-YO")
//  val `Bjelovarsko-bilogorska zupanija`            = new ISOCountrySubdivision(ISOCountry.CROATIA, "Bjelovarsko-bilogorska zupanija", "HR-07")
//  val `Brodsko-posavska zupanija`                  = new ISOCountrySubdivision(ISOCountry.CROATIA, "Brodsko-posavska zupanija", "HR-12")
//  val `Dubrovacko-neretvanska zupanija`            = new ISOCountrySubdivision(ISOCountry.CROATIA, "Dubrovacko-neretvanska zupanija", "HR-19")
//  val `Grad Zagreb`                                = new ISOCountrySubdivision(ISOCountry.CROATIA, "Grad Zagreb", "HR-21")
//  val `Istarska zupanija`                          = new ISOCountrySubdivision(ISOCountry.CROATIA, "Istarska zupanija", "HR-18")
//  val `Karlovacka zupanija`                        = new ISOCountrySubdivision(ISOCountry.CROATIA, "Karlovacka zupanija", "HR-04")
//  val `Koprivnicko-krizevacka zupanija`            = new ISOCountrySubdivision(ISOCountry.CROATIA, "Koprivnicko-krizevacka zupanija", "HR-06")
//  val `Krapinsko-zagorska zupanija`                = new ISOCountrySubdivision(ISOCountry.CROATIA, "Krapinsko-zagorska zupanija", "HR-02")
//  val `Licko-senjska zupanija`                     = new ISOCountrySubdivision(ISOCountry.CROATIA, "Licko-senjska zupanija", "HR-09")
//  val `Medimurska zupanija`                        = new ISOCountrySubdivision(ISOCountry.CROATIA, "Medimurska zupanija", "HR-20")
//  val `Osjecko-baranjska zupanija`                 = new ISOCountrySubdivision(ISOCountry.CROATIA, "Osjecko-baranjska zupanija", "HR-14")
//  val `Pozesko-slavonska zupanija`                 = new ISOCountrySubdivision(ISOCountry.CROATIA, "Pozesko-slavonska zupanija", "HR-11")
//  val `Primorsko-goranska zupanija`                = new ISOCountrySubdivision(ISOCountry.CROATIA, "Primorsko-goranska zupanija", "HR-08")
//  val `Sibensko-kninska zupanija`                  = new ISOCountrySubdivision(ISOCountry.CROATIA, "Sibensko-kninska zupanija", "HR-15")
//  val `Sisacko-moslavacka zupanija`                = new ISOCountrySubdivision(ISOCountry.CROATIA, "Sisacko-moslavacka zupanija", "HR-03")
//  val `Splitsko-dalmatinska zupanija`              = new ISOCountrySubdivision(ISOCountry.CROATIA, "Splitsko-dalmatinska zupanija", "HR-17")
//  val `Varazdinska zupanija`                       = new ISOCountrySubdivision(ISOCountry.CROATIA, "Varazdinska zupanija", "HR-05")
//  val `Viroviticko-podravska zupanija`             = new ISOCountrySubdivision(ISOCountry.CROATIA, "Viroviticko-podravska zupanija", "HR-10")
//  val `Vukovarsko-srijemska zupanija`              = new ISOCountrySubdivision(ISOCountry.CROATIA, "Vukovarsko-srijemska zupanija", "HR-16")
//  val `Zadarska zupanija`                          = new ISOCountrySubdivision(ISOCountry.CROATIA, "Zadarska zupanija", "HR-13")
//  val `Zagrebacka zupanija`                        = new ISOCountrySubdivision(ISOCountry.CROATIA, "Zagrebacka zupanija", "HR-01")
//  val `Artibonite`                                 = new ISOCountrySubdivision(ISOCountry.HAITI, "Artibonite", "HT-AR")
//  val `Centre Haiti`                               = new ISOCountrySubdivision(ISOCountry.HAITI, "Centre", "HT-CE")
//  val `Grand' Anse`                                = new ISOCountrySubdivision(ISOCountry.HAITI, "Grand' Anse", "HT-GA")
//  val `Nippes`                                     = new ISOCountrySubdivision(ISOCountry.HAITI, "Nippes", "HT-NI")
//  val `Nord Haiti`                                 = new ISOCountrySubdivision(ISOCountry.HAITI, "Nord", "HT-ND")
//  val `Nord-Est Haiti`                             = new ISOCountrySubdivision(ISOCountry.HAITI, "Nord-Est", "HT-NE")
//  val `Nord-Ouest Haiti`                           = new ISOCountrySubdivision(ISOCountry.HAITI, "Nord-Ouest", "HT-NO")
//  val `Ouest Haiti`                                = new ISOCountrySubdivision(ISOCountry.HAITI, "Ouest", "HT-OU")
//  val `Sud Haiti`                                  = new ISOCountrySubdivision(ISOCountry.HAITI, "Sud", "HT-SD")
//  val `Sud-Est Haiti`                              = new ISOCountrySubdivision(ISOCountry.HAITI, "Sud-Est", "HT-SE")
//  val `Bacs-Kiskun`                                = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Bacs-Kiskun", "HU-BK")
//  val `Baranya`                                    = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Baranya", "HU-BA")
//  val `Bekes`                                      = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Bekes", "HU-BE")
//  val `Borsod-Abauj-Zemplen`                       = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Borsod-Abauj-Zemplen", "HU-BZ")
//  val `Budapest`                                   = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Budapest", "HU-BU")
//  val `Csongrad`                                   = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Csongrad", "HU-CS")
//  val `Fejer`                                      = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Fejer", "HU-FE")
//  val `Gyor-Moson-Sopron`                          = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Gyor-Moson-Sopron", "HU-GS")
//  val `Hajdu-Bihar`                                = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Hajdu-Bihar", "HU-HB")
//  val `Heves`                                      = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Heves", "HU-HE")
//  val `Jasz-Nagykun-Szolnok`                       = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Jasz-Nagykun-Szolnok", "HU-JN")
//  val `Komarom-Esztergom`                          = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Komarom-Esztergom", "HU-KE")
//  val `Nograd`                                     = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Nograd", "HU-NO")
//  val `Pest`                                       = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Pest", "HU-PE")
//  val `Somogy`                                     = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Somogy", "HU-SO")
//  val `Szabolcs-Szatmar-Bereg`                     = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Szabolcs-Szatmar-Bereg", "HU-SZ")
//  val `Tolna`                                      = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Tolna", "HU-TO")
//  val `Vas`                                        = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Vas", "HU-VA")
//  val `Veszprem`                                   = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Veszprem", "HU-VE")
//  val `Zala`                                       = new ISOCountrySubdivision(ISOCountry.HUNGARY, "Zala", "HU-ZA")
//  val `Aceh`                                       = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Aceh", "ID-AC")
//  val `Bali`                                       = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Bali", "ID-BA")
//  val `Bangka Belitung`                            = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Bangka Belitung", "ID-BB")
//  val `Banten`                                     = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Banten", "ID-BT")
//  val `Bengkulu`                                   = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Bengkulu", "ID-BE")
//  val `Gorontalo`                                  = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Gorontalo", "ID-GO")
//  val `Jakarta Raya`                               = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Jakarta Raya", "ID-JK")
//  val `Jambi`                                      = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Jambi", "ID-JA")
//  val `Jawa Barat`                                 = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Jawa Barat", "ID-JB")
//  val `Jawa Tengah`                                = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Jawa Tengah", "ID-JT")
//  val `Jawa Timur`                                 = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Jawa Timur", "ID-JI")
//  val `Kalimantan Barat`                           = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Kalimantan Barat", "ID-KB")
//  val `Kalimantan Selatan`                         = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Kalimantan Selatan", "ID-KS")
//  val `Kalimantan Tengah`                          = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Kalimantan Tengah", "ID-KT")
//  val `Kalimantan Timur`                           = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Kalimantan Timur", "ID-KI")
//  val `Kepulauan Riau`                             = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Kepulauan Riau", "ID-KR")
//  val `Lampung`                                    = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Lampung", "ID-LA")
//  val `Maluku`                                     = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Maluku", "ID-MA")
//  val `Maluku Utara`                               = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Maluku Utara", "ID-MU")
//  val `Nusa Tenggara Barat`                        = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Nusa Tenggara Barat", "ID-NB")
//  val `Nusa Tenggara Timur`                        = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Nusa Tenggara Timur", "ID-NT")
//  val `Papua`                                      = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Papua", "ID-PA")
//  val `Papua Barat`                                = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Papua Barat", "ID-PB")
//  val `Riau`                                       = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Riau", "ID-RI")
//  val `Sulawesi Barat`                             = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Sulawesi Barat", "ID-SR")
//  val `Sulawesi Selatan`                           = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Sulawesi Selatan", "ID-SN")
//  val `Sulawesi Tengah`                            = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Sulawesi Tengah", "ID-ST")
//  val `Sulawesi Tenggara`                          = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Sulawesi Tenggara", "ID-SG")
//  val `Sulawesi Utara`                             = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Sulawesi Utara", "ID-SA")
//  val `Sumatera Barat`                             = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Sumatera Barat", "ID-SB")
//  val `Sumatera Selatan`                           = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Sumatera Selatan", "ID-SS")
//  val `Sumatera Utara`                             = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Sumatera Utara", "ID-SU")
//  val `Yogyakarta`                                 = new ISOCountrySubdivision(ISOCountry.INDONESIA, "Yogyakarta", "ID-YO")
//  val `Carlow`                                     = new ISOCountrySubdivision(ISOCountry.IRELAND, "Carlow", "IE-CW")
//  val `Cavan`                                      = new ISOCountrySubdivision(ISOCountry.IRELAND, "Cavan", "IE-CN")
//  val `Clare`                                      = new ISOCountrySubdivision(ISOCountry.IRELAND, "Clare", "IE-CE")
//  val `Cork`                                       = new ISOCountrySubdivision(ISOCountry.IRELAND, "Cork", "IE-CO")
//  val `Donegal`                                    = new ISOCountrySubdivision(ISOCountry.IRELAND, "Donegal", "IE-DL")
//  val `Dublin`                                     = new ISOCountrySubdivision(ISOCountry.IRELAND, "Dublin", "IE-D")
//  val `Galway`                                     = new ISOCountrySubdivision(ISOCountry.IRELAND, "Galway", "IE-G")
//  val `Kerry`                                      = new ISOCountrySubdivision(ISOCountry.IRELAND, "Kerry", "IE-KY")
//  val `Kildare`                                    = new ISOCountrySubdivision(ISOCountry.IRELAND, "Kildare", "IE-KE")
//  val `Kilkenny`                                   = new ISOCountrySubdivision(ISOCountry.IRELAND, "Kilkenny", "IE-KK")
//  val `Laois`                                      = new ISOCountrySubdivision(ISOCountry.IRELAND, "Laois", "IE-LS")
//  val `Leitrim`                                    = new ISOCountrySubdivision(ISOCountry.IRELAND, "Leitrim", "IE-LM")
//  val `Limerick`                                   = new ISOCountrySubdivision(ISOCountry.IRELAND, "Limerick", "IE-LK")
//  val `Longford`                                   = new ISOCountrySubdivision(ISOCountry.IRELAND, "Longford", "IE-LD")
//  val `Louth`                                      = new ISOCountrySubdivision(ISOCountry.IRELAND, "Louth", "IE-LH")
//  val `Mayo`                                       = new ISOCountrySubdivision(ISOCountry.IRELAND, "Mayo", "IE-MO")
//  val `Meath`                                      = new ISOCountrySubdivision(ISOCountry.IRELAND, "Meath", "IE-MH")
//  val `Monaghan`                                   = new ISOCountrySubdivision(ISOCountry.IRELAND, "Monaghan", "IE-MN")
//  val `Offaly`                                     = new ISOCountrySubdivision(ISOCountry.IRELAND, "Offaly", "IE-OY")
//  val `Roscommon`                                  = new ISOCountrySubdivision(ISOCountry.IRELAND, "Roscommon", "IE-RN")
//  val `Sligo`                                      = new ISOCountrySubdivision(ISOCountry.IRELAND, "Sligo", "IE-SO")
//  val `Tipperary`                                  = new ISOCountrySubdivision(ISOCountry.IRELAND, "Tipperary", "IE-TA")
//  val `Waterford`                                  = new ISOCountrySubdivision(ISOCountry.IRELAND, "Waterford", "IE-WD")
//  val `Westmeath`                                  = new ISOCountrySubdivision(ISOCountry.IRELAND, "Westmeath", "IE-WH")
//  val `Wexford`                                    = new ISOCountrySubdivision(ISOCountry.IRELAND, "Wexford", "IE-WX")
//  val `Wicklow`                                    = new ISOCountrySubdivision(ISOCountry.IRELAND, "Wicklow", "IE-WW")
//  val `HaDarom`                                    = new ISOCountrySubdivision(ISOCountry.ISRAEL, "HaDarom", "IL-D")
//  val `HaMerkaz`                                   = new ISOCountrySubdivision(ISOCountry.ISRAEL, "HaMerkaz", "IL-M")
//  val `HaTsafon`                                   = new ISOCountrySubdivision(ISOCountry.ISRAEL, "HaTsafon", "IL-Z")
//  val `Hefa`                                       = new ISOCountrySubdivision(ISOCountry.ISRAEL, "Hefa", "IL-HA")
//  val `Tel-Aviv`                                   = new ISOCountrySubdivision(ISOCountry.ISRAEL, "Tel-Aviv", "IL-TA")
//  val `Yerushalayim`                               = new ISOCountrySubdivision(ISOCountry.ISRAEL, "Yerushalayim", "IL-JM")
//  val `Andaman and Nicobar Islands`                = new ISOCountrySubdivision(ISOCountry.INDIA, "Andaman and Nicobar Islands", "IN-AN")
//  val `Andhra Pradesh`                             = new ISOCountrySubdivision(ISOCountry.INDIA, "Andhra Pradesh", "IN-AP")
//  val `Arunachal Pradesh`                          = new ISOCountrySubdivision(ISOCountry.INDIA, "Arunachal Pradesh", "IN-AR")
//  val `Assam`                                      = new ISOCountrySubdivision(ISOCountry.INDIA, "Assam", "IN-AS")
//  val `Bihar`                                      = new ISOCountrySubdivision(ISOCountry.INDIA, "Bihar", "IN-BR")
//  val `Chandigarh`                                 = new ISOCountrySubdivision(ISOCountry.INDIA, "Chandigarh", "IN-CH")
//  val `Chhattisgarh`                               = new ISOCountrySubdivision(ISOCountry.INDIA, "Chhattisgarh", "IN-CT")
//  val `Dadra and Nagar Haveli`                     = new ISOCountrySubdivision(ISOCountry.INDIA, "Dadra and Nagar Haveli", "IN-DN")
//  val `Daman and Diu`                              = new ISOCountrySubdivision(ISOCountry.INDIA, "Daman and Diu", "IN-DD")
//  val `Delhi`                                      = new ISOCountrySubdivision(ISOCountry.INDIA, "Delhi", "IN-DL")
//  val `Goa`                                        = new ISOCountrySubdivision(ISOCountry.INDIA, "Goa", "IN-GA")
//  val `Gujarat`                                    = new ISOCountrySubdivision(ISOCountry.INDIA, "Gujarat", "IN-GJ")
//  val `Haryana`                                    = new ISOCountrySubdivision(ISOCountry.INDIA, "Haryana", "IN-HR")
//  val `Himachal Pradesh`                           = new ISOCountrySubdivision(ISOCountry.INDIA, "Himachal Pradesh", "IN-HP")
//  val `Jammu and Kashmir`                          = new ISOCountrySubdivision(ISOCountry.INDIA, "Jammu and Kashmir", "IN-JK")
//  val `Jharkhand`                                  = new ISOCountrySubdivision(ISOCountry.INDIA, "Jharkhand", "IN-JH")
//  val `Karnataka`                                  = new ISOCountrySubdivision(ISOCountry.INDIA, "Karnataka", "IN-KA")
//  val `Kerala`                                     = new ISOCountrySubdivision(ISOCountry.INDIA, "Kerala", "IN-KL")
//  val `Lakshadweep`                                = new ISOCountrySubdivision(ISOCountry.INDIA, "Lakshadweep", "IN-LD")
//  val `Madhya Pradesh`                             = new ISOCountrySubdivision(ISOCountry.INDIA, "Madhya Pradesh", "IN-MP")
//  val `Maharashtra`                                = new ISOCountrySubdivision(ISOCountry.INDIA, "Maharashtra", "IN-MH")
//  val `Manipur`                                    = new ISOCountrySubdivision(ISOCountry.INDIA, "Manipur", "IN-MN")
//  val `Meghalaya`                                  = new ISOCountrySubdivision(ISOCountry.INDIA, "Meghalaya", "IN-ML")
//  val `Mizoram`                                    = new ISOCountrySubdivision(ISOCountry.INDIA, "Mizoram", "IN-MZ")
//  val `Nagaland`                                   = new ISOCountrySubdivision(ISOCountry.INDIA, "Nagaland", "IN-NL")
//  val `Odisha`                                     = new ISOCountrySubdivision(ISOCountry.INDIA, "Odisha", "IN-OR")
//  val `Puducherry`                                 = new ISOCountrySubdivision(ISOCountry.INDIA, "Puducherry", "IN-PY")
//  val `Punjab`                                     = new ISOCountrySubdivision(ISOCountry.INDIA, "Punjab", "IN-PB")
//  val `Rajasthan`                                  = new ISOCountrySubdivision(ISOCountry.INDIA, "Rajasthan", "IN-RJ")
//  val `Sikkim`                                     = new ISOCountrySubdivision(ISOCountry.INDIA, "Sikkim", "IN-SK")
//  val `Tamil Nadu`                                 = new ISOCountrySubdivision(ISOCountry.INDIA, "Tamil Nadu", "IN-TN")
//  val `Telangana`                                  = new ISOCountrySubdivision(ISOCountry.INDIA, "Telangana", "IN-TG")
//  val `Tripura`                                    = new ISOCountrySubdivision(ISOCountry.INDIA, "Tripura", "IN-TR")
//  val `Uttar Pradesh`                              = new ISOCountrySubdivision(ISOCountry.INDIA, "Uttar Pradesh", "IN-UP")
//  val `Uttarakhand`                                = new ISOCountrySubdivision(ISOCountry.INDIA, "Uttarakhand", "IN-UT")
//  val `West Bengal`                                = new ISOCountrySubdivision(ISOCountry.INDIA, "West Bengal", "IN-WB")
//  val `Al Anbar`                                   = new ISOCountrySubdivision(ISOCountry.IRAQ, "Al Anbar", "IQ-AN")
//  val `Al Basrah`                                  = new ISOCountrySubdivision(ISOCountry.IRAQ, "Al Basrah", "IQ-BA")
//  val `Al Muthanna`                                = new ISOCountrySubdivision(ISOCountry.IRAQ, "Al Muthanna", "IQ-MU")
//  val `Al Qadisiyah`                               = new ISOCountrySubdivision(ISOCountry.IRAQ, "Al Qadisiyah", "IQ-QA")
//  val `An Najaf`                                   = new ISOCountrySubdivision(ISOCountry.IRAQ, "An Najaf", "IQ-NA")
//  val `Arbil`                                      = new ISOCountrySubdivision(ISOCountry.IRAQ, "Arbil", "IQ-AR")
//  val `As Sulaymaniyah`                            = new ISOCountrySubdivision(ISOCountry.IRAQ, "As Sulaymaniyah", "IQ-SU")
//  val `Babil`                                      = new ISOCountrySubdivision(ISOCountry.IRAQ, "Babil", "IQ-BB")
//  val `Baghdad`                                    = new ISOCountrySubdivision(ISOCountry.IRAQ, "Baghdad", "IQ-BG")
//  val `Dahuk`                                      = new ISOCountrySubdivision(ISOCountry.IRAQ, "Dahuk", "IQ-DA")
//  val `Dhi Qar`                                    = new ISOCountrySubdivision(ISOCountry.IRAQ, "Dhi Qar", "IQ-DQ")
//  val `Diyala`                                     = new ISOCountrySubdivision(ISOCountry.IRAQ, "Diyala", "IQ-DI")
//  val `Karbala'`                                   = new ISOCountrySubdivision(ISOCountry.IRAQ, "Karbala'", "IQ-KA")
//  val `Kirkuk`                                     = new ISOCountrySubdivision(ISOCountry.IRAQ, "Kirkuk", "IQ-KI")
//  val `Maysan`                                     = new ISOCountrySubdivision(ISOCountry.IRAQ, "Maysan", "IQ-MA")
//  val `Ninawa`                                     = new ISOCountrySubdivision(ISOCountry.IRAQ, "Ninawa", "IQ-NI")
//  val `Salah ad Din`                               = new ISOCountrySubdivision(ISOCountry.IRAQ, "Salah ad Din", "IQ-SD")
//  val `Wasit`                                      = new ISOCountrySubdivision(ISOCountry.IRAQ, "Wasit", "IQ-WA")
//  val `Alborz`                                     = new ISOCountrySubdivision(ISOCountry.IRAN, "Alborz", "IR-32")
//  val `Ardabil`                                    = new ISOCountrySubdivision(ISOCountry.IRAN, "Ardabil", "IR-03")
//  val `Azarbayjan-e Gharbi`                        = new ISOCountrySubdivision(ISOCountry.IRAN, "Azarbayjan-e Gharbi", "IR-02")
//  val `Azarbayjan-e Sharqi`                        = new ISOCountrySubdivision(ISOCountry.IRAN, "Azarbayjan-e Sharqi", "IR-01")
//  val `Bushehr`                                    = new ISOCountrySubdivision(ISOCountry.IRAN, "Bushehr", "IR-06")
//  val `Chahar Mahal va Bakhtiari`                  = new ISOCountrySubdivision(ISOCountry.IRAN, "Chahar Mahal va Bakhtiari", "IR-08")
//  val `Esfahan`                                    = new ISOCountrySubdivision(ISOCountry.IRAN, "Esfahan", "IR-04")
//  val `Fars`                                       = new ISOCountrySubdivision(ISOCountry.IRAN, "Fars", "IR-14")
//  val `Gilan`                                      = new ISOCountrySubdivision(ISOCountry.IRAN, "Gilan", "IR-19")
//  val `Golestan`                                   = new ISOCountrySubdivision(ISOCountry.IRAN, "Golestan", "IR-27")
//  val `Hamadan`                                    = new ISOCountrySubdivision(ISOCountry.IRAN, "Hamadan", "IR-24")
//  val `Hormozgan`                                  = new ISOCountrySubdivision(ISOCountry.IRAN, "Hormozgan", "IR-23")
//  val `Ilam`                                       = new ISOCountrySubdivision(ISOCountry.IRAN, "Ilam", "IR-05")
//  val `Kerman`                                     = new ISOCountrySubdivision(ISOCountry.IRAN, "Kerman", "IR-15")
//  val `Kermanshah`                                 = new ISOCountrySubdivision(ISOCountry.IRAN, "Kermanshah", "IR-17")
//  val `Khorasan-e Jonubi`                          = new ISOCountrySubdivision(ISOCountry.IRAN, "Khorasan-e Jonubi", "IR-29")
//  val `Khorasan-e Razavi`                          = new ISOCountrySubdivision(ISOCountry.IRAN, "Khorasan-e Razavi", "IR-30")
//  val `Khorasan-e Shomali`                         = new ISOCountrySubdivision(ISOCountry.IRAN, "Khorasan-e Shomali", "IR-31")
//  val `Khuzestan`                                  = new ISOCountrySubdivision(ISOCountry.IRAN, "Khuzestan", "IR-10")
//  val `Kohgiluyeh va Bowyer Ahmad`                 = new ISOCountrySubdivision(ISOCountry.IRAN, "Kohgiluyeh va Bowyer Ahmad", "IR-18")
//  val `Kordestan`                                  = new ISOCountrySubdivision(ISOCountry.IRAN, "Kordestan", "IR-16")
//  val `Lorestan`                                   = new ISOCountrySubdivision(ISOCountry.IRAN, "Lorestan", "IR-20")
//  val `Markazi`                                    = new ISOCountrySubdivision(ISOCountry.IRAN, "Markazi", "IR-22")
//  val `Mazandaran`                                 = new ISOCountrySubdivision(ISOCountry.IRAN, "Mazandaran", "IR-21")
//  val `Qazvin`                                     = new ISOCountrySubdivision(ISOCountry.IRAN, "Qazvin", "IR-28")
//  val `Qom`                                        = new ISOCountrySubdivision(ISOCountry.IRAN, "Qom", "IR-26")
//  val `Semnan`                                     = new ISOCountrySubdivision(ISOCountry.IRAN, "Semnan", "IR-12")
//  val `Sistan va Baluchestan`                      = new ISOCountrySubdivision(ISOCountry.IRAN, "Sistan va Baluchestan", "IR-13")
//  val `Tehran`                                     = new ISOCountrySubdivision(ISOCountry.IRAN, "Tehran", "IR-07")
//  val `Yazd`                                       = new ISOCountrySubdivision(ISOCountry.IRAN, "Yazd", "IR-25")
//  val `Zanjan`                                     = new ISOCountrySubdivision(ISOCountry.IRAN, "Zanjan", "IR-11")
//  val `Austurland`                                 = new ISOCountrySubdivision(ISOCountry.ICELAND, "Austurland", "IS-7")
//  val `Hofudborgarsvaedi utan Reykjavikur`         = new ISOCountrySubdivision(ISOCountry.ICELAND, "Hofudborgarsvaedi utan Reykjavikur", "IS-1")
//  val `Nordurland eystra`                          = new ISOCountrySubdivision(ISOCountry.ICELAND, "Nordurland eystra", "IS-6")
//  val `Nordurland vestra`                          = new ISOCountrySubdivision(ISOCountry.ICELAND, "Nordurland vestra", "IS-5")
//  val `Sudurland`                                  = new ISOCountrySubdivision(ISOCountry.ICELAND, "Sudurland", "IS-8")
//  val `Sudurnes`                                   = new ISOCountrySubdivision(ISOCountry.ICELAND, "Sudurnes", "IS-2")
//  val `Vestfirdir`                                 = new ISOCountrySubdivision(ISOCountry.ICELAND, "Vestfirdir", "IS-4")
//  val `Vesturland`                                 = new ISOCountrySubdivision(ISOCountry.ICELAND, "Vesturland", "IS-3")
//  val `Abruzzo`                                    = new ISOCountrySubdivision(ISOCountry.ITALY, "Abruzzo", "IT-65")
//  val `Basilicata`                                 = new ISOCountrySubdivision(ISOCountry.ITALY, "Basilicata", "IT-77")
//  val `Calabria`                                   = new ISOCountrySubdivision(ISOCountry.ITALY, "Calabria", "IT-78")
//  val `Campania`                                   = new ISOCountrySubdivision(ISOCountry.ITALY, "Campania", "IT-72")
//  val `Emilia-Romagna`                             = new ISOCountrySubdivision(ISOCountry.ITALY, "Emilia-Romagna", "IT-45")
//  val `Friuli-Venezia Giulia`                      = new ISOCountrySubdivision(ISOCountry.ITALY, "Friuli-Venezia Giulia", "IT-36")
//  val `Lazio`                                      = new ISOCountrySubdivision(ISOCountry.ITALY, "Lazio", "IT-62")
//  val `Liguria`                                    = new ISOCountrySubdivision(ISOCountry.ITALY, "Liguria", "IT-42")
//  val `Lombardia`                                  = new ISOCountrySubdivision(ISOCountry.ITALY, "Lombardia", "IT-25")
//  val `Marche`                                     = new ISOCountrySubdivision(ISOCountry.ITALY, "Marche", "IT-57")
//  val `Molise`                                     = new ISOCountrySubdivision(ISOCountry.ITALY, "Molise", "IT-67")
//  val `Piemonte`                                   = new ISOCountrySubdivision(ISOCountry.ITALY, "Piemonte", "IT-21")
//  val `Puglia`                                     = new ISOCountrySubdivision(ISOCountry.ITALY, "Puglia", "IT-75")
//  val `Sardegna`                                   = new ISOCountrySubdivision(ISOCountry.ITALY, "Sardegna", "IT-88")
//  val `Sicilia`                                    = new ISOCountrySubdivision(ISOCountry.ITALY, "Sicilia", "IT-82")
//  val `Toscana`                                    = new ISOCountrySubdivision(ISOCountry.ITALY, "Toscana", "IT-52")
//  val `Trentino-Alto Adige`                        = new ISOCountrySubdivision(ISOCountry.ITALY, "Trentino-Alto Adige", "IT-32")
//  val `Umbria`                                     = new ISOCountrySubdivision(ISOCountry.ITALY, "Umbria", "IT-55")
//  val `Valle d'Aosta`                              = new ISOCountrySubdivision(ISOCountry.ITALY, "Valle d'Aosta", "IT-23")
//  val `Veneto`                                     = new ISOCountrySubdivision(ISOCountry.ITALY, "Veneto", "IT-34")
//  val `Clarendon`                                  = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Clarendon", "JM-13")
//  val `Hanover`                                    = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Hanover", "JM-09")
//  val `Kingston`                                   = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Kingston", "JM-01")
//  val `Manchester`                                 = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Manchester", "JM-12")
//  val `Portland`                                   = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Portland", "JM-04")
//  val `Saint Andrew - Jamaica`                     = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Saint Andrew", "JM-02")
//  val `Saint Ann`                                  = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Saint Ann", "JM-06")
//  val `Saint Catherine`                            = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Saint Catherine", "JM-14")
//  val `Saint Elizabeth`                            = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Saint Elizabeth", "JM-11")
//  val `Saint James`                                = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Saint James", "JM-08")
//  val `Saint Mary`                                 = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Saint Mary", "JM-05")
//  val `Saint Thomas`                               = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Saint Thomas", "JM-03")
//  val `Trelawny`                                   = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Trelawny", "JM-07")
//  val `Westmoreland`                               = new ISOCountrySubdivision(ISOCountry.JAMAICA, "Westmoreland", "JM-10")
//  val `Al 'Aqabah`                                 = new ISOCountrySubdivision(ISOCountry.JORDAN, "Al 'Aqabah", "JO-AQ")
//  val `Al 'Asimah`                                 = new ISOCountrySubdivision(ISOCountry.JORDAN, "Al 'Asimah", "JO-AM")
//  val `Al Balqa'`                                  = new ISOCountrySubdivision(ISOCountry.JORDAN, "Al Balqa'", "JO-BA")
//  val `Al Karak`                                   = new ISOCountrySubdivision(ISOCountry.JORDAN, "Al Karak", "JO-KA")
//  val `Al Mafraq`                                  = new ISOCountrySubdivision(ISOCountry.JORDAN, "Al Mafraq", "JO-MA")
//  val `At Tafilah`                                 = new ISOCountrySubdivision(ISOCountry.JORDAN, "At Tafilah", "JO-AT")
//  val `Az Zarqa'`                                  = new ISOCountrySubdivision(ISOCountry.JORDAN, "Az Zarqa'", "JO-AZ")
//  val `Irbid`                                      = new ISOCountrySubdivision(ISOCountry.JORDAN, "Irbid", "JO-IR")
//  val `Ma'an`                                      = new ISOCountrySubdivision(ISOCountry.JORDAN, "Ma'an", "JO-MN")
//  val `Madaba`                                     = new ISOCountrySubdivision(ISOCountry.JORDAN, "Madaba", "JO-MD")
//  val `Aichi`                                      = new ISOCountrySubdivision(ISOCountry.JAPAN, "Aichi", "JP-23")
//  val `Akita`                                      = new ISOCountrySubdivision(ISOCountry.JAPAN, "Akita", "JP-05")
//  val `Aomori`                                     = new ISOCountrySubdivision(ISOCountry.JAPAN, "Aomori", "JP-02")
//  val `Chiba`                                      = new ISOCountrySubdivision(ISOCountry.JAPAN, "Chiba", "JP-12")
//  val `Ehime`                                      = new ISOCountrySubdivision(ISOCountry.JAPAN, "Ehime", "JP-38")
//  val `Fukui`                                      = new ISOCountrySubdivision(ISOCountry.JAPAN, "Fukui", "JP-18")
//  val `Fukuoka`                                    = new ISOCountrySubdivision(ISOCountry.JAPAN, "Fukuoka", "JP-40")
//  val `Fukushima`                                  = new ISOCountrySubdivision(ISOCountry.JAPAN, "Fukushima", "JP-07")
//  val `Gifu`                                       = new ISOCountrySubdivision(ISOCountry.JAPAN, "Gifu", "JP-21")
//  val `Gunma`                                      = new ISOCountrySubdivision(ISOCountry.JAPAN, "Gunma", "JP-10")
//  val `Hiroshima`                                  = new ISOCountrySubdivision(ISOCountry.JAPAN, "Hiroshima", "JP-34")
//  val `Hokkaido`                                   = new ISOCountrySubdivision(ISOCountry.JAPAN, "Hokkaido", "JP-01")
//  val `Hyogo`                                      = new ISOCountrySubdivision(ISOCountry.JAPAN, "Hyogo", "JP-28")
//  val `Ibaraki`                                    = new ISOCountrySubdivision(ISOCountry.JAPAN, "Ibaraki", "JP-08")
//  val `Ishikawa`                                   = new ISOCountrySubdivision(ISOCountry.JAPAN, "Ishikawa", "JP-17")
//  val `Iwate`                                      = new ISOCountrySubdivision(ISOCountry.JAPAN, "Iwate", "JP-03")
//  val `Kagawa`                                     = new ISOCountrySubdivision(ISOCountry.JAPAN, "Kagawa", "JP-37")
//  val `Kagoshima`                                  = new ISOCountrySubdivision(ISOCountry.JAPAN, "Kagoshima", "JP-46")
//  val `Kanagawa`                                   = new ISOCountrySubdivision(ISOCountry.JAPAN, "Kanagawa", "JP-14")
//  val `Kochi`                                      = new ISOCountrySubdivision(ISOCountry.JAPAN, "Kochi", "JP-39")
//  val `Kumamoto`                                   = new ISOCountrySubdivision(ISOCountry.JAPAN, "Kumamoto", "JP-43")
//  val `Kyoto`                                      = new ISOCountrySubdivision(ISOCountry.JAPAN, "Kyoto", "JP-26")
//  val `Mie`                                        = new ISOCountrySubdivision(ISOCountry.JAPAN, "Mie", "JP-24")
//  val `Miyagi`                                     = new ISOCountrySubdivision(ISOCountry.JAPAN, "Miyagi", "JP-04")
//  val `Miyazaki`                                   = new ISOCountrySubdivision(ISOCountry.JAPAN, "Miyazaki", "JP-45")
//  val `Nagano`                                     = new ISOCountrySubdivision(ISOCountry.JAPAN, "Nagano", "JP-20")
//  val `Nagasaki`                                   = new ISOCountrySubdivision(ISOCountry.JAPAN, "Nagasaki", "JP-42")
//  val `Nara`                                       = new ISOCountrySubdivision(ISOCountry.JAPAN, "Nara", "JP-29")
//  val `Niigata`                                    = new ISOCountrySubdivision(ISOCountry.JAPAN, "Niigata", "JP-15")
//  val `Oita`                                       = new ISOCountrySubdivision(ISOCountry.JAPAN, "Oita", "JP-44")
//  val `Okayama`                                    = new ISOCountrySubdivision(ISOCountry.JAPAN, "Okayama", "JP-33")
//  val `Okinawa`                                    = new ISOCountrySubdivision(ISOCountry.JAPAN, "Okinawa", "JP-47")
//  val `Osaka`                                      = new ISOCountrySubdivision(ISOCountry.JAPAN, "Osaka", "JP-27")
//  val `Saga`                                       = new ISOCountrySubdivision(ISOCountry.JAPAN, "Saga", "JP-41")
//  val `Saitama`                                    = new ISOCountrySubdivision(ISOCountry.JAPAN, "Saitama", "JP-11")
//  val `Shiga`                                      = new ISOCountrySubdivision(ISOCountry.JAPAN, "Shiga", "JP-25")
//  val `Shimane`                                    = new ISOCountrySubdivision(ISOCountry.JAPAN, "Shimane", "JP-32")
//  val `Shizuoka`                                   = new ISOCountrySubdivision(ISOCountry.JAPAN, "Shizuoka", "JP-22")
//  val `Tochigi`                                    = new ISOCountrySubdivision(ISOCountry.JAPAN, "Tochigi", "JP-09")
//  val `Tokushima`                                  = new ISOCountrySubdivision(ISOCountry.JAPAN, "Tokushima", "JP-36")
//  val `Tokyo`                                      = new ISOCountrySubdivision(ISOCountry.JAPAN, "Tokyo", "JP-13")
//  val `Tottori`                                    = new ISOCountrySubdivision(ISOCountry.JAPAN, "Tottori", "JP-31")
//  val `Toyama`                                     = new ISOCountrySubdivision(ISOCountry.JAPAN, "Toyama", "JP-16")
//  val `Wakayama`                                   = new ISOCountrySubdivision(ISOCountry.JAPAN, "Wakayama", "JP-30")
//  val `Yamagata`                                   = new ISOCountrySubdivision(ISOCountry.JAPAN, "Yamagata", "JP-06")
//  val `Yamaguchi`                                  = new ISOCountrySubdivision(ISOCountry.JAPAN, "Yamaguchi", "JP-35")
//  val `Yamanashi`                                  = new ISOCountrySubdivision(ISOCountry.JAPAN, "Yamanashi", "JP-19")
//  val `Central Kenya`                              = new ISOCountrySubdivision(ISOCountry.KENYA, "Central", "BW-CE")
//  val `Coast Kenya`                                = new ISOCountrySubdivision(ISOCountry.KENYA, "Coast", "KE-300")
//  val `Eastern Kenya`                              = new ISOCountrySubdivision(ISOCountry.KENYA, "Eastern", "GH-EP")
//  val `Nairobi Area`                               = new ISOCountrySubdivision(ISOCountry.KENYA, "Nairobi Area", "KE-110")
//  val `North-Eastern`                              = new ISOCountrySubdivision(ISOCountry.KENYA, "North-Eastern", "KE-500")
//  val `Nyanza`                                     = new ISOCountrySubdivision(ISOCountry.KENYA, "Nyanza", "KE-600")
//  val `Rift Valley`                                = new ISOCountrySubdivision(ISOCountry.KENYA, "Rift Valley", "KE-700")
//  val `Western Kenya`                              = new ISOCountrySubdivision(ISOCountry.KENYA, "Western", "FJ-W")
//  val `Batken`                                     = new ISOCountrySubdivision(ISOCountry.KYRGYZSTAN, "Batken", "KG-B")
//  val `Bishkek`                                    = new ISOCountrySubdivision(ISOCountry.KYRGYZSTAN, "Bishkek", "KG-GB")
//  val `Chu`                                        = new ISOCountrySubdivision(ISOCountry.KYRGYZSTAN, "Chu", "KG-C")
//  val `Jalal-Abad`                                 = new ISOCountrySubdivision(ISOCountry.KYRGYZSTAN, "Jalal-Abad", "KG-J")
//  val `Naryn`                                      = new ISOCountrySubdivision(ISOCountry.KYRGYZSTAN, "Naryn", "KG-N")
//  val `Osh`                                        = new ISOCountrySubdivision(ISOCountry.KYRGYZSTAN, "Osh", "KG-O")
//  val `Talas`                                      = new ISOCountrySubdivision(ISOCountry.KYRGYZSTAN, "Talas", "KG-T")
//  val `Ysyk-Kol`                                   = new ISOCountrySubdivision(ISOCountry.KYRGYZSTAN, "Ysyk-Kol", "KG-Y")
//  val `Baat Dambang`                               = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Baat Dambang", "KH-2")
//  val `Banteay Mean Chey`                          = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Banteay Mean Chey", "KH-1")
//  val `Kampong Chaam`                              = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Kampong Chaam", "KH-3")
//  val `Kampong Chhnang`                            = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Kampong Chhnang", "KH-4")
//  val `Kampong Spueu`                              = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Kampong Spueu", "KH-5")
//  val `Kampong Thum`                               = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Kampong Thum", "KH-6")
//  val `Kampot`                                     = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Kampot", "KH-7")
//  val `Kandaal`                                    = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Kandaal", "KH-8")
//  val `Kaoh Kong`                                  = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Kaoh Kong", "KH-9")
//  val `Kracheh`                                    = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Kracheh", "KH-10")
//  val `Krong Kaeb`                                 = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Krong Kaeb", "KH-23")
//  val `Krong Pailin`                               = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Krong Pailin", "KH-24")
//  val `Krong Preah Sihanouk`                       = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Krong Preah Sihanouk", "KH-18")
//  val `Mondol Kiri`                                = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Mondol Kiri", "KH-11")
//  val `Otdar Mean Chey`                            = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Otdar Mean Chey", "KH-22")
//  val `Phnom Penh`                                 = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Phnom Penh", "KH-12")
//  val `Pousaat`                                    = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Pousaat", "KH-15")
//  val `Preah Vihear`                               = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Preah Vihear", "KH-13")
//  val `Prey Veaeng`                                = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Prey Veaeng", "KH-14")
//  val `Rotanak Kiri`                               = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Rotanak Kiri", "KH-16")
//  val `Siem Reab`                                  = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Siem Reab", "KH-17")
//  val `Stueng Traeng`                              = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Stueng Traeng", "KH-19")
//  val `Svaay Rieng`                                = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Svaay Rieng", "KH-20")
//  val `Taakaev`                                    = new ISOCountrySubdivision(ISOCountry.CAMBODIA, "Taakaev", "KH-21")
//  val `Gilbert Islands`                            = new ISOCountrySubdivision(ISOCountry.KIRIBATI, "Gilbert Islands", "KI-G")
//  val `Line Islands`                               = new ISOCountrySubdivision(ISOCountry.KIRIBATI, "Line Islands", "KI-L")
//  val `Anjouan`                                    = new ISOCountrySubdivision(ISOCountry.COMOROS, "Anjouan", "KM-A")
//  val `Grande Comore`                              = new ISOCountrySubdivision(ISOCountry.COMOROS, "Grande Comore", "KM-G")
//  val `Moheli`                                     = new ISOCountrySubdivision(ISOCountry.COMOROS, "Moheli", "KM-M")
//  val `Saint George Basseterre`                    = new ISOCountrySubdivision(ISOCountry.SAINT_KITTS_AND_NEVIS, "Saint George Basseterre", "KN-03")
//  val `Saint Paul Charlestown`                     = new ISOCountrySubdivision(ISOCountry.SAINT_KITTS_AND_NEVIS, "Saint Paul Charlestown", "KN-10")
//  val `Chagang-do`                                 = new ISOCountrySubdivision(ISOCountry.NORTH_KOREA, "Chagang-do", "KP-04")
//  val `Hamgyong-bukto`                             = new ISOCountrySubdivision(ISOCountry.NORTH_KOREA, "Hamgyong-bukto", "KP-09")
//  val `Hamgyong-namdo`                             = new ISOCountrySubdivision(ISOCountry.NORTH_KOREA, "Hamgyong-namdo", "KP-08")
//  val `Hwanghae-bukto`                             = new ISOCountrySubdivision(ISOCountry.NORTH_KOREA, "Hwanghae-bukto", "KP-06")
//  val `Hwanghae-namdo`                             = new ISOCountrySubdivision(ISOCountry.NORTH_KOREA, "Hwanghae-namdo", "KP-05")
//  val `Kangwon-do`                                 = new ISOCountrySubdivision(ISOCountry.NORTH_KOREA, "Kangwon-do", "KP-07")
//  val `Nason (Najin-Sonbong)`                      = new ISOCountrySubdivision(ISOCountry.NORTH_KOREA, "Nason (Najin-Sonbong)", "KP-13")
//  val `P'yongan-bukto`                             = new ISOCountrySubdivision(ISOCountry.NORTH_KOREA, "P'yongan-bukto", "KP-03")
//  val `P'yongan-namdo`                             = new ISOCountrySubdivision(ISOCountry.NORTH_KOREA, "P'yongan-namdo", "KP-02")
//  val `P'yongyang`                                 = new ISOCountrySubdivision(ISOCountry.NORTH_KOREA, "P'yongyang", "KP-01")
//  val `Yanggang-do`                                = new ISOCountrySubdivision(ISOCountry.NORTH_KOREA, "Yanggang-do", "KP-10")
//  val `Busan`                                      = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Busan", "KR-26")
//  val `Chungbuk`                                   = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Chungbuk", "KR-43")
//  val `Chungnam`                                   = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Chungnam", "KR-44")
//  val `Daegu`                                      = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Daegu", "KR-27")
//  val `Daejeon`                                    = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Daejeon", "KR-30")
//  val `Gangwon`                                    = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Gangwon", "KR-42")
//  val `Gwangju`                                    = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Gwangju", "KR-29")
//  val `Gyeongbuk`                                  = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Gyeongbuk", "KR-47")
//  val `Gyeonggi`                                   = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Gyeonggi", "KR-41")
//  val `Gyeongnam`                                  = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Gyeongnam", "KR-48")
//  val `Incheon`                                    = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Incheon", "KR-28")
//  val `Jeju`                                       = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Jeju", "KR-49")
//  val `Jeonbuk`                                    = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Jeonbuk", "KR-45")
//  val `Jeonnam`                                    = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Jeonnam", "KR-46")
//  val `Seoul`                                      = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Seoul", "KR-11")
//  val `Ulsan`                                      = new ISOCountrySubdivision(ISOCountry.SOUTH_KOREA, "Ulsan", "KR-31")
//  val `Al Ahmadi`                                  = new ISOCountrySubdivision(ISOCountry.KUWAIT, "Al Ahmadi", "KW-AH")
//  val `Al Asimah`                                  = new ISOCountrySubdivision(ISOCountry.KUWAIT, "Al Asimah", "KW-KU")
//  val `Al Farwaniyah`                              = new ISOCountrySubdivision(ISOCountry.KUWAIT, "Al Farwaniyah", "KW-FA")
//  val `Al Jahra`                                   = new ISOCountrySubdivision(ISOCountry.KUWAIT, "Al Jahra", "KW-JA")
//  val `Hawalli`                                    = new ISOCountrySubdivision(ISOCountry.KUWAIT, "Hawalli", "KW-HA")
//  val `Mubarak al Kabir`                           = new ISOCountrySubdivision(ISOCountry.KUWAIT, "Mubarak al Kabir", "KW-MU")
//  val `Almaty`                                     = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Almaty", "KZ-ALA")
//  val `Almaty oblysy`                              = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Almaty oblysy", "KZ-ALM")
//  val `Aqmola oblysy`                              = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Aqmola oblysy", "KZ-AKM")
//  val `Aqtobe oblysy`                              = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Aqtobe oblysy", "KZ-AKT")
//  val `Astana`                                     = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Astana", "KZ-AST")
//  val `Atyrau oblysy`                              = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Atyrau oblysy", "KZ-ATY")
//  val `Batys Qazaqstan oblysy`                     = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Batys Qazaqstan oblysy", "KZ-ZAP")
//  val `Bayqonyr`                                   = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Bayqonyr", "KZ-ZAP")
//  val `Mangghystau oblysy`                         = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Mangghystau oblysy", "KZ-MAN")
//  val `Ongtustik Qazaqstan oblysy`                 = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Ongtustik Qazaqstan oblysy", "KZ-YUZ")
//  val `Pavlodar oblysy`                            = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Pavlodar oblysy", "KZ-PAV")
//  val `Qaraghandy oblysy`                          = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Qaraghandy oblysy", "KZ-KAR")
//  val `Qostanay oblysy`                            = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Qostanay oblysy", "KZ-KUS")
//  val `Qyzylorda oblysy`                           = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Qyzylorda oblysy", "KZ-KZY")
//  val `Shyghys Qazaqstan oblysy`                   = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Shyghys Qazaqstan oblysy", "KZ-VOS")
//  val `Soltustik Qazaqstan oblysy`                 = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Soltustik Qazaqstan oblysy", "KZ-SEV")
//  val `Zhambyl oblysy`                             = new ISOCountrySubdivision(ISOCountry.KAZAKHSTAN, "Zhambyl oblysy", "KZ-ZHA")
//  val `Attapu`                                     = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Attapu", "LA-AT")
//  val `Bokeo`                                      = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Bokeo", "LA-BK")
//  val `Bolikhamxai`                                = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Bolikhamxai", "LA-BL")
//  val `Champasak`                                  = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Champasak", "LA-CH")
//  val `Houaphan`                                   = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Houaphan", "LA-HO")
//  val `Khammouan`                                  = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Khammouan", "LA-KH")
//  val `Louang Namtha`                              = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Louang Namtha", "LA-LM")
//  val `Louangphabang`                              = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Louangphabang", "LA-LP")
//  val `Oudomxai`                                   = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Oudomxai", "LA-OU")
//  val `Phongsali`                                  = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Phongsali", "LA-PH")
//  val `Salavan`                                    = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Salavan", "LA-SL")
//  val `Savannakhet`                                = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Savannakhet", "LA-SV")
//  val `Vientiane`                                  = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Vientiane", "LA-VI")
//  val `Xaignabouli`                                = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Xaignabouli", "LA-XA")
//  val `Xekong`                                     = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Xekong", "LA-XE")
//  val `Xiangkhouang`                               = new ISOCountrySubdivision(ISOCountry.LAO_PEOPLES_DEMOCRATIC_REPUBLIC, "Xiangkhouang", "LA-XI")
//  val `Aakkar`                                     = new ISOCountrySubdivision(ISOCountry.LEBANON, "Aakkar", "LB-AK")
//  val `Baalbek-Hermel`                             = new ISOCountrySubdivision(ISOCountry.LEBANON, "Baalbek-Hermel", "LB-BH")
//  val `Beqaa`                                      = new ISOCountrySubdivision(ISOCountry.LEBANON, "Beqaa", "LB-BI")
//  val `Beyrouth`                                   = new ISOCountrySubdivision(ISOCountry.LEBANON, "Beyrouth", "LB-BA")
//  val `Liban-Nord`                                 = new ISOCountrySubdivision(ISOCountry.LEBANON, "Liban-Nord", "LB-AS")
//  val `Liban-Sud`                                  = new ISOCountrySubdivision(ISOCountry.LEBANON, "Liban-Sud", "LB-JA")
//  val `Mont-Liban`                                 = new ISOCountrySubdivision(ISOCountry.LEBANON, "Mont-Liban", "LB-JL")
//  val `Nabatiye`                                   = new ISOCountrySubdivision(ISOCountry.LEBANON, "Nabatiye", "LB-NA")
//  val `Anse la Raye`                               = new ISOCountrySubdivision(ISOCountry.SAINT_LUCIA, "Anse la Raye", "LC-01")
//  val `Castries`                                   = new ISOCountrySubdivision(ISOCountry.SAINT_LUCIA, "Castries", "LC-02")
//  val `Dennery`                                    = new ISOCountrySubdivision(ISOCountry.SAINT_LUCIA, "Dennery", "LC-05")
//  val `Gros Islet`                                 = new ISOCountrySubdivision(ISOCountry.SAINT_LUCIA, "Gros Islet", "LC-06")
//  val `Laborie`                                    = new ISOCountrySubdivision(ISOCountry.SAINT_LUCIA, "Laborie", "LC-07")
//  val `Micoud`                                     = new ISOCountrySubdivision(ISOCountry.SAINT_LUCIA, "Micoud", "LC-08")
//  val `Soufriere`                                  = new ISOCountrySubdivision(ISOCountry.SAINT_LUCIA, "Soufriere", "LC-10")
//  val `Vieux Fort`                                 = new ISOCountrySubdivision(ISOCountry.SAINT_LUCIA, "Vieux Fort", "LC-11")
//  val `Balzers`                                    = new ISOCountrySubdivision(ISOCountry.LIECHTENSTEIN, "Balzers", "LI-01")
//  val `Eschen`                                     = new ISOCountrySubdivision(ISOCountry.LIECHTENSTEIN, "Eschen", "LI-02")
//  val `Gamprin`                                    = new ISOCountrySubdivision(ISOCountry.LIECHTENSTEIN, "Gamprin", "LI-03")
//  val `Mauren`                                     = new ISOCountrySubdivision(ISOCountry.LIECHTENSTEIN, "Mauren", "LI-04")
//  val `Planken`                                    = new ISOCountrySubdivision(ISOCountry.LIECHTENSTEIN, "Planken", "LI-05")
//  val `Ruggell`                                    = new ISOCountrySubdivision(ISOCountry.LIECHTENSTEIN, "Ruggell", "LI-06")
//  val `Schaan`                                     = new ISOCountrySubdivision(ISOCountry.LIECHTENSTEIN, "Schaan", "LI-07")
//  val `Schellenberg`                               = new ISOCountrySubdivision(ISOCountry.LIECHTENSTEIN, "Schellenberg", "LI-08")
//  val `Triesen`                                    = new ISOCountrySubdivision(ISOCountry.LIECHTENSTEIN, "Triesen", "LI-09")
//  val `Triesenberg`                                = new ISOCountrySubdivision(ISOCountry.LIECHTENSTEIN, "Triesenberg", "LI-10")
//  val `Vaduz`                                      = new ISOCountrySubdivision(ISOCountry.LIECHTENSTEIN, "Vaduz", "LI-11")
//  val `Central Province`                           = new ISOCountrySubdivision(ISOCountry.SRI_LANKA, "Central Province", "LK-2")
//  val `Eastern Province`                           = new ISOCountrySubdivision(ISOCountry.SRI_LANKA, "Eastern Province", "LK-5")
//  val `North Central Province`                     = new ISOCountrySubdivision(ISOCountry.SRI_LANKA, "North Central Province", "LK-7")
//  val `North Western Province`                     = new ISOCountrySubdivision(ISOCountry.SRI_LANKA, "North Western Province", "LK-6")
//  val `Northern Province`                          = new ISOCountrySubdivision(ISOCountry.SRI_LANKA, "Northern Province", "LK-4")
//  val `Sabaragamuwa Province`                      = new ISOCountrySubdivision(ISOCountry.SRI_LANKA, "Sabaragamuwa Province", "LK-9")
//  val `Southern Province`                          = new ISOCountrySubdivision(ISOCountry.SRI_LANKA, "Southern Province", "LK-3")
//  val `Uva Province`                               = new ISOCountrySubdivision(ISOCountry.SRI_LANKA, "Uva Province", "LK-8")
//  val `Western Province`                           = new ISOCountrySubdivision(ISOCountry.SRI_LANKA, "Western Province", "LK-1")
//  val `Bomi`                                       = new ISOCountrySubdivision(ISOCountry.LIBERIA, "Bomi", "LR-BM")
//  val `Bong`                                       = new ISOCountrySubdivision(ISOCountry.LIBERIA, "Bong", "LR-BG")
//  val `Gbarpolu`                                   = new ISOCountrySubdivision(ISOCountry.LIBERIA, "Gbarpolu", "LR-GP")
//  val `Grand Bassa`                                = new ISOCountrySubdivision(ISOCountry.LIBERIA, "Grand Bassa", "LR-GB")
//  val `Grand Cape Mount`                           = new ISOCountrySubdivision(ISOCountry.LIBERIA, "Grand Cape Mount", "LR-CM")
//  val `Grand Gedeh`                                = new ISOCountrySubdivision(ISOCountry.LIBERIA, "Grand Gedeh", "LR-GG")
//  val `Grand Kru`                                  = new ISOCountrySubdivision(ISOCountry.LIBERIA, "Grand Kru", "LR-GK")
//  val `Lofa`                                       = new ISOCountrySubdivision(ISOCountry.LIBERIA, "Lofa", "LR-LO")
//  val `Margibi`                                    = new ISOCountrySubdivision(ISOCountry.LIBERIA, "Margibi", "LR-MG")
//  val `Maryland - Liberia`                         = new ISOCountrySubdivision(ISOCountry.LIBERIA, "Maryland", "LR-MY")
//  val `Montserrado`                                = new ISOCountrySubdivision(ISOCountry.LIBERIA, "Montserrado", "LR-MO")
//  val `Nimba`                                      = new ISOCountrySubdivision(ISOCountry.LIBERIA, "Nimba", "LR-NI")
//  val `River Cess`                                 = new ISOCountrySubdivision(ISOCountry.LIBERIA, "River Cess", "LR-RI")
//  val `River Gee`                                  = new ISOCountrySubdivision(ISOCountry.LIBERIA, "River Gee", "LR-RG")
//  val `Sinoe`                                      = new ISOCountrySubdivision(ISOCountry.LIBERIA, "Sinoe", "LR-SI")
//  val `Berea`                                      = new ISOCountrySubdivision(ISOCountry.LESOTHO, "Berea", "LS-D")
//  val `Butha-Buthe`                                = new ISOCountrySubdivision(ISOCountry.LESOTHO, "Butha-Buthe", "LS-B")
//  val `Leribe`                                     = new ISOCountrySubdivision(ISOCountry.LESOTHO, "Leribe", "LS-C")
//  val `Mafeteng`                                   = new ISOCountrySubdivision(ISOCountry.LESOTHO, "Mafeteng", "LS-E")
//  val `Maseru`                                     = new ISOCountrySubdivision(ISOCountry.LESOTHO, "Maseru", "LS-A")
//  val `Mohale's Hoek`                              = new ISOCountrySubdivision(ISOCountry.LESOTHO, "Mohale's Hoek", "LS-F")
//  val `Mokhotlong`                                 = new ISOCountrySubdivision(ISOCountry.LESOTHO, "Mokhotlong", "LS-J")
//  val `Qacha's Nek`                                = new ISOCountrySubdivision(ISOCountry.LESOTHO, "Qacha's Nek", "LS-H")
//  val `Quthing`                                    = new ISOCountrySubdivision(ISOCountry.LESOTHO, "Quthing", "LS-G")
//  val `Thaba-Tseka`                                = new ISOCountrySubdivision(ISOCountry.LESOTHO, "Thaba-Tseka", "LS-K")
//  val `Alytaus Apskritis`                          = new ISOCountrySubdivision(ISOCountry.LITHUANIA, "Alytaus Apskritis", "LT-AL")
//  val `Kauno Apskritis`                            = new ISOCountrySubdivision(ISOCountry.LITHUANIA, "Kauno Apskritis", "LT-KU")
//  val `Klaipedos Apskritis`                        = new ISOCountrySubdivision(ISOCountry.LITHUANIA, "Klaipedos Apskritis", "LT-KL")
//  val `Marijampoles Apskritis`                     = new ISOCountrySubdivision(ISOCountry.LITHUANIA, "Marijampoles Apskritis", "LT-MR")
//  val `Panevezio Apskritis`                        = new ISOCountrySubdivision(ISOCountry.LITHUANIA, "Panevezio Apskritis", "LT-PN")
//  val `Siauliu Apskritis`                          = new ISOCountrySubdivision(ISOCountry.LITHUANIA, "Siauliu Apskritis", "LT-SA")
//  val `Taurages Apskritis`                         = new ISOCountrySubdivision(ISOCountry.LITHUANIA, "Taurages Apskritis", "LT-TA")
//  val `Telsiu Apskritis`                           = new ISOCountrySubdivision(ISOCountry.LITHUANIA, "Telsiu Apskritis", "LT-TE")
//  val `Utenos Apskritis`                           = new ISOCountrySubdivision(ISOCountry.LITHUANIA, "Utenos Apskritis", "LT-UT")
//  val `Vilniaus Apskritis`                         = new ISOCountrySubdivision(ISOCountry.LITHUANIA, "Vilniaus Apskritis", "LT-VL")
//  val `Diekirch`                                   = new ISOCountrySubdivision(ISOCountry.LUXEMBOURG, "Diekirch", "LU-DI")
//  val `Grevenmacher`                               = new ISOCountrySubdivision(ISOCountry.LUXEMBOURG, "Grevenmacher", "LU-GR")
//  val `Luxembourg`                                 = new ISOCountrySubdivision(ISOCountry.LUXEMBOURG, "Luxembourg", "LU-LU")
//  val `Adazu`                                      = new ISOCountrySubdivision(ISOCountry.LATVIA, "Adazu", "LV-011")
//  val `Aglonas`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Aglonas", "LV-001")
//  val `Aizkraukles`                                = new ISOCountrySubdivision(ISOCountry.LATVIA, "Aizkraukles", "LV-002")
//  val `Aizputes`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Aizputes", "LV-003")
//  val `Alojas`                                     = new ISOCountrySubdivision(ISOCountry.LATVIA, "Alojas", "LV-005")
//  val `Aluksnes`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Aluksnes", "LV-007")
//  val `Babites`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Babites", "LV-012")
//  val `Baltinavas`                                 = new ISOCountrySubdivision(ISOCountry.LATVIA, "Baltinavas", "LV-014")
//  val `Balvu`                                      = new ISOCountrySubdivision(ISOCountry.LATVIA, "Balvu", "LV-015")
//  val `Bauskas`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Bauskas", "LV-016")
//  val `Beverinas`                                  = new ISOCountrySubdivision(ISOCountry.LATVIA, "Beverinas", "LV-017")
//  val `Brocenu`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Brocenu", "LV-018")
//  val `Carnikavas`                                 = new ISOCountrySubdivision(ISOCountry.LATVIA, "Carnikavas", "LV-020")
//  val `Cesu`                                       = new ISOCountrySubdivision(ISOCountry.LATVIA, "Cesu", "LV-022")
//  val `Cesvaines`                                  = new ISOCountrySubdivision(ISOCountry.LATVIA, "Cesvaines", "LV-021")
//  val `Ciblas`                                     = new ISOCountrySubdivision(ISOCountry.LATVIA, "Ciblas", "LV-023")
//  val `Daugavpils`                                 = new ISOCountrySubdivision(ISOCountry.LATVIA, "Daugavpils", "LV-025")
//  val `Dobeles`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Dobeles", "LV-026")
//  val `Dundagas`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Dundagas", "LV-027")
//  val `Gulbenes`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Gulbenes", "LV-033")
//  val `Iecavas`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Iecavas", "LV-034")
//  val `Incukalna`                                  = new ISOCountrySubdivision(ISOCountry.LATVIA, "Incukalna", "LV-037")
//  val `Jaunjelgavas`                               = new ISOCountrySubdivision(ISOCountry.LATVIA, "Jaunjelgavas", "LV-038")
//  val `Jaunpiebalgas`                              = new ISOCountrySubdivision(ISOCountry.LATVIA, "Jaunpiebalgas", "LV-039")
//  val `Jaunpils`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Jaunpils", "LV-040")
//  val `Jekabpils`                                  = new ISOCountrySubdivision(ISOCountry.LATVIA, "Jekabpils", "LV-042")
//  val `Jelgava`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Jelgava", "LV-JEL")
//  val `Jelgavas`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Jelgavas", "LV-041")
//  val `Jurmala`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Jurmala", "LV-JUR")
//  val `Kekavas`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Kekavas", "LV-052")
//  val `Kokneses`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Kokneses", "LV-046")
//  val `Kraslavas`                                  = new ISOCountrySubdivision(ISOCountry.LATVIA, "Kraslavas", "LV-047")
//  val `Kuldigas`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Kuldigas", "LV-050")
//  val `Liepaja`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Liepaja", "LV-LPX")
//  val `Liepajas`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Liepajas", "LV-LE")
//  val `Limbazu`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Limbazu", "LV-LM")
//  val `Lubanas`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Lubanas", "LV-057")
//  val `Ludzas`                                     = new ISOCountrySubdivision(ISOCountry.LATVIA, "Ludzas", "LV-058")
//  val `Madonas`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Madonas", "LV-059")
//  val `Malpils`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Malpils", "LV-061")
//  val `Ogres`                                      = new ISOCountrySubdivision(ISOCountry.LATVIA, "Ogres", "LV-067")
//  val `Olaines`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Olaines", "LV-068")
//  val `Ozolnieku`                                  = new ISOCountrySubdivision(ISOCountry.LATVIA, "Ozolnieku", "LV-069")
//  val `Preilu`                                     = new ISOCountrySubdivision(ISOCountry.LATVIA, "Preilu", "LV-073")
//  val `Rezeknes`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Rezeknes", "LV-077")
//  val `Riga`                                       = new ISOCountrySubdivision(ISOCountry.LATVIA, "Riga", "LV-RIX")
//  val `Rigas`                                      = new ISOCountrySubdivision(ISOCountry.LATVIA, "Rigas", "LV-RI")
//  val `Rojas`                                      = new ISOCountrySubdivision(ISOCountry.LATVIA, "Rojas", "LV-079")
//  val `Ropazu`                                     = new ISOCountrySubdivision(ISOCountry.LATVIA, "Ropazu", "LV-080")
//  val `Rugaju`                                     = new ISOCountrySubdivision(ISOCountry.LATVIA, "Rugaju", "LV-082")
//  val `Rundales`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Rundales", "LV-083")
//  val `Salacgrivas`                                = new ISOCountrySubdivision(ISOCountry.LATVIA, "Salacgrivas", "LV-086")
//  val `Saldus`                                     = new ISOCountrySubdivision(ISOCountry.LATVIA, "Saldus", "LV-088")
//  val `Sejas`                                      = new ISOCountrySubdivision(ISOCountry.LATVIA, "Sejas", "LV-090")
//  val `Siguldas`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Siguldas", "LV-091")
//  val `Skrundas`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Skrundas", "LV-093")
//  val `Stopinu`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Stopinu", "LV-095")
//  val `Strencu`                                    = new ISOCountrySubdivision(ISOCountry.LATVIA, "Strencu", "LV-096")
//  val `Talsu`                                      = new ISOCountrySubdivision(ISOCountry.LATVIA, "Talsu", "LV-097")
//  val `Tukuma`                                     = new ISOCountrySubdivision(ISOCountry.LATVIA, "Tukuma", "LV-099")
//  val `Vainodes`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Vainodes", "LV-100")
//  val `Valkas`                                     = new ISOCountrySubdivision(ISOCountry.LATVIA, "Valkas", "LV-101")
//  val `Valmieras`                                  = new ISOCountrySubdivision(ISOCountry.LATVIA, "Valmieras", "LV-VM")
//  val `Varkavas`                                   = new ISOCountrySubdivision(ISOCountry.LATVIA, "Varkavas", "LV-103")
//  val `Vecumnieku`                                 = new ISOCountrySubdivision(ISOCountry.LATVIA, "Vecumnieku", "LV-105")
//  val `Ventspils`                                  = new ISOCountrySubdivision(ISOCountry.LATVIA, "Ventspils", "LV-106")
//  val `Al Butnan`                                  = new ISOCountrySubdivision(ISOCountry.LIBYA, "Al Butnan", "LY-BU")
//  val `Al Jabal al Akhdar`                         = new ISOCountrySubdivision(ISOCountry.LIBYA, "Al Jabal al Akhdar", "LY-JA")
//  val `Al Jabal al Gharbi`                         = new ISOCountrySubdivision(ISOCountry.LIBYA, "Al Jabal al Gharbi", "LY-JG")
//  val `Al Jafarah`                                 = new ISOCountrySubdivision(ISOCountry.LIBYA, "Al Jafarah", "LY-JI")
//  val `Al Jufrah`                                  = new ISOCountrySubdivision(ISOCountry.LIBYA, "Al Jufrah", "LY-JU")
//  val `Al Kufrah`                                  = new ISOCountrySubdivision(ISOCountry.LIBYA, "Al Kufrah", "LY-KF")
//  val `Al Marj`                                    = new ISOCountrySubdivision(ISOCountry.LIBYA, "Al Marj", "LY-MJ")
//  val `Al Marqab`                                  = new ISOCountrySubdivision(ISOCountry.LIBYA, "Al Marqab", "LY-MB")
//  val `Al Wahat`                                   = new ISOCountrySubdivision(ISOCountry.LIBYA, "Al Wahat", "LY-WA")
//  val `An Nuqat al Khams`                          = new ISOCountrySubdivision(ISOCountry.LIBYA, "An Nuqat al Khams", "LY-NQ")
//  val `Az Zawiyah`                                 = new ISOCountrySubdivision(ISOCountry.LIBYA, "Az Zawiyah", "LY-ZA")
//  val `Banghazi`                                   = new ISOCountrySubdivision(ISOCountry.LIBYA, "Banghazi", "LY-BA")
//  val `Darnah`                                     = new ISOCountrySubdivision(ISOCountry.LIBYA, "Darnah", "LY-DR")
//  val `Ghat`                                       = new ISOCountrySubdivision(ISOCountry.LIBYA, "Ghat", "LY-GT")
//  val `Misratah`                                   = new ISOCountrySubdivision(ISOCountry.LIBYA, "Misratah", "LY-MI")
//  val `Murzuq`                                     = new ISOCountrySubdivision(ISOCountry.LIBYA, "Murzuq", "LY-MQ")
//  val `Nalut`                                      = new ISOCountrySubdivision(ISOCountry.LIBYA, "Nalut", "LY-NL")
//  val `Sabha`                                      = new ISOCountrySubdivision(ISOCountry.LIBYA, "Sabha", "LY-SB")
//  val `Surt`                                       = new ISOCountrySubdivision(ISOCountry.LIBYA, "Surt", "LY-SR")
//  val `Tarabulus`                                  = new ISOCountrySubdivision(ISOCountry.LIBYA, "Tarabulus", "LY-TB")
//  val `Wadi al Hayat`                              = new ISOCountrySubdivision(ISOCountry.LIBYA, "Wadi al Hayat", "LY-WD")
//  val `Wadi ash Shati'`                            = new ISOCountrySubdivision(ISOCountry.LIBYA, "Wadi ash Shati'", "LY-WS")
//  val `Chaouia-Ouardigha`                          = new ISOCountrySubdivision(ISOCountry.MOROCCO, "Chaouia-Ouardigha", "MA-09")
//  val `Doukhala-Abda`                              = new ISOCountrySubdivision(ISOCountry.MOROCCO, "Doukhala-Abda", "MA-10")
//  val `Fes-Boulemane`                              = new ISOCountrySubdivision(ISOCountry.MOROCCO, "Fes-Boulemane", "MA-05")
//  val `Gharb-Chrarda-Beni Hssen`                   = new ISOCountrySubdivision(ISOCountry.MOROCCO, "Gharb-Chrarda-Beni Hssen", "MA-02")
//  val `Grand Casablanca`                           = new ISOCountrySubdivision(ISOCountry.MOROCCO, "Grand Casablanca", "MA-08")
//  val `Guelmim-Es Semara`                          = new ISOCountrySubdivision(ISOCountry.MOROCCO, "Guelmim-Es Semara", "MA-14")
//  val `L'Oriental`                                 = new ISOCountrySubdivision(ISOCountry.MOROCCO, "L'Oriental", "MA-04")
//  val `Marrakech-Tensift-Al Haouz`                 = new ISOCountrySubdivision(ISOCountry.MOROCCO, "Marrakech-Tensift-Al Haouz", "MA-11")
//  val `Meknes-Tafilalet`                           = new ISOCountrySubdivision(ISOCountry.MOROCCO, "Meknes-Tafilalet", "MA-06")
//  val `Rabat-Sale-Zemmour-Zaer`                    = new ISOCountrySubdivision(ISOCountry.MOROCCO, "Rabat-Sale-Zemmour-Zaer", "MA-07")
//  val `Souss-Massa-Draa`                           = new ISOCountrySubdivision(ISOCountry.MOROCCO, "Souss-Massa-Draa", "MA-13")
//  val `Tadla-Azilal`                               = new ISOCountrySubdivision(ISOCountry.MOROCCO, "Tadla-Azilal", "MA-12")
//  val `Tanger-Tetouan`                             = new ISOCountrySubdivision(ISOCountry.MOROCCO, "Tanger-Tetouan", "MA-01")
//  val `Taza-Al Hoceima-Taounate`                   = new ISOCountrySubdivision(ISOCountry.MOROCCO, "Taza-Al Hoceima-Taounate", "MA-03")
//  val `Monaco`                                     = new ISOCountrySubdivision(ISOCountry.MONACO, "Monaco", "MC-MO")
//  val `Anenii Noi`                                 = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Anenii Noi", "MD-AN")
//  val `Balti`                                      = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Balti", "MD-BA")
//  val `Basarabeasca`                               = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Basarabeasca", "MD-BS")
//  val `Bender`                                     = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Bender", "MD-BD")
//  val `Briceni`                                    = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Briceni", "MD-BR")
//  val `Cahul`                                      = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Cahul", "MD-CA")
//  val `Calarasi - Moldova`                         = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Calarasi", "MD-CL")
//  val `Cantemir`                                   = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Cantemir", "MD-CT")
//  val `Causeni`                                    = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Causeni", "MD-CS")
//  val `Chisinau`                                   = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Chisinau", "MD-CU")
//  val `Cimislia`                                   = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Cimislia", "MD-CM")
//  val `Criuleni`                                   = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Criuleni", "MD-CR")
//  val `Donduseni`                                  = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Donduseni", "MD-DO")
//  val `Drochia`                                    = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Drochia", "MD-DR")
//  val `Dubasari`                                   = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Dubasari", "MD-DU")
//  val `Edinet`                                     = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Edinet", "MD-ED")
//  val `Falesti`                                    = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Falesti", "MD-FA")
//  val `Floresti`                                   = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Floresti", "MD-FL")
//  val `Gagauzia, Unitatea teritoriala autonoma`    = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Gagauzia, Unitatea teritoriala autonoma", "MD-GA")
//  val `Glodeni`                                    = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Glodeni", "MD-GL")
//  val `Hincesti`                                   = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Hincesti", "MD-HI")
//  val `Ialoveni`                                   = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Ialoveni", "MD-IA")
//  val `Leova`                                      = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Leova", "MD-LE")
//  val `Nisporeni`                                  = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Nisporeni", "MD-NI")
//  val `Ocnita`                                     = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Ocnita", "MD-OC")
//  val `Orhei`                                      = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Orhei", "MD-OR")
//  val `Rezina`                                     = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Rezina", "MD-RE")
//  val `Riscani`                                    = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Riscani", "MD-RI")
//  val `Singerei`                                   = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Singerei", "MD-SI")
//  val `Soldanesti`                                 = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Soldanesti", "MD-SD")
//  val `Soroca`                                     = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Soroca", "MD-SO")
//  val `Stefan Voda`                                = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Stefan Voda", "MD-SV")
//  val `Stinga Nistrului, unitatea teritoriala din` = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Stinga Nistrului, unitatea teritoriala din", "MD-SN")
//  val `Straseni`                                   = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Straseni", "MD-ST")
//  val `Taraclia`                                   = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Taraclia", "MD-TA")
//  val `Telenesti`                                  = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Telenesti", "MD-TE")
//  val `Ungheni`                                    = new ISOCountrySubdivision(ISOCountry.MOLDOVA, "Ungheni", "MD-UN")
//  val `Bar`                                        = new ISOCountrySubdivision(ISOCountry.MONTENEGRO, "Bar", "ME-02")
//  val `Budva`                                      = new ISOCountrySubdivision(ISOCountry.MONTENEGRO, "Budva", "ME-05")
//  val `Cetinje`                                    = new ISOCountrySubdivision(ISOCountry.MONTENEGRO, "Cetinje", "ME-06")
//  val `Danilovgrad`                                = new ISOCountrySubdivision(ISOCountry.MONTENEGRO, "Danilovgrad", "ME-07")
//  val `Herceg-Novi`                                = new ISOCountrySubdivision(ISOCountry.MONTENEGRO, "Herceg-Novi", "ME-08")
//  val `Kolasin`                                    = new ISOCountrySubdivision(ISOCountry.MONTENEGRO, "Kolasin", "ME-09")
//  val `Kotor`                                      = new ISOCountrySubdivision(ISOCountry.MONTENEGRO, "Kotor", "ME-10")
//  val `Mojkovac`                                   = new ISOCountrySubdivision(ISOCountry.MONTENEGRO, "Mojkovac", "ME-11")
//  val `Niksic`                                     = new ISOCountrySubdivision(ISOCountry.MONTENEGRO, "Niksic", "ME-12")
//  val `Podgorica`                                  = new ISOCountrySubdivision(ISOCountry.MONTENEGRO, "Podgorica", "ME-16")
//  val `Tivat`                                      = new ISOCountrySubdivision(ISOCountry.MONTENEGRO, "Tivat", "ME-19")
//  val `Ulcinj`                                     = new ISOCountrySubdivision(ISOCountry.MONTENEGRO, "Ulcinj", "ME-20")
//  val `Zabljak`                                    = new ISOCountrySubdivision(ISOCountry.MONTENEGRO, "Zabljak", "ME-21")
//  val `Antananarivo`                               = new ISOCountrySubdivision(ISOCountry.MADAGASCAR, "Antananarivo", "MG-T")
//  val `Antsiranana`                                = new ISOCountrySubdivision(ISOCountry.MADAGASCAR, "Antsiranana", "MG-D")
//  val `Fianarantsoa`                               = new ISOCountrySubdivision(ISOCountry.MADAGASCAR, "Fianarantsoa", "MG-F")
//  val `Mahajanga`                                  = new ISOCountrySubdivision(ISOCountry.MADAGASCAR, "Mahajanga", "MG-M")
//  val `Toamasina`                                  = new ISOCountrySubdivision(ISOCountry.MADAGASCAR, "Toamasina", "MG-A")
//  val `Toliara`                                    = new ISOCountrySubdivision(ISOCountry.MADAGASCAR, "Toliara", "MG-U")
//  val `Ailinglaplap Atoll`                         = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Ailinglaplap Atoll", "MH-ALL")
//  val `Ailuk Atoll`                                = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Ailuk Atoll", "MH-ALK")
//  val `Arno Atoll`                                 = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Arno Atoll", "MH-ARN")
//  val `Aur Atoll`                                  = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Aur Atoll", "MH-AUR")
//  val `Ebon Atoll`                                 = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Ebon Atoll", "MH-EBO")
//  val `Enewetak Atoll`                             = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Enewetak Atoll", "MH-ENI")
//  val `Jabat Island`                               = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Jabat Island", "MH-JAB")
//  val `Jaluit Atoll`                               = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Jaluit Atoll", "MH-JAL")
//  val `Kili Island`                                = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Kili Island", "MH-KIL")
//  val `Kwajalein Atoll`                            = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Kwajalein Atoll", "MH-KWA")
//  val `Lae Atoll`                                  = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Lae Atoll", "MH-LAE")
//  val `Lib Island`                                 = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Lib Island", "MH-LIB")
//  val `Likiep Atoll`                               = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Likiep Atoll", "MH-LIK")
//  val `Majuro Atoll`                               = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Majuro Atoll", "MH-MAJ")
//  val `Maloelap Atoll`                             = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Maloelap Atoll", "MH-MAL")
//  val `Mejit Island`                               = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Mejit Island", "MH-MEJ")
//  val `Mili Atoll`                                 = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Mili Atoll", "MH-MIL")
//  val `Namdrik Atoll`                              = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Namdrik Atoll", "MH-NMK")
//  val `Namu Atoll`                                 = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Namu Atoll", "MH-NMU")
//  val `Rongelap Atoll`                             = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Rongelap Atoll", "MH-RON")
//  val `Ujae Atoll`                                 = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Ujae Atoll", "MH-UJA")
//  val `Utrik Atoll`                                = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Utrik Atoll", "MH-UTI")
//  val `Wotho Atoll`                                = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Wotho Atoll", "MH-WTH")
//  val `Wotje Atoll`                                = new ISOCountrySubdivision(ISOCountry.MARSHALL_ISLANDS, "Wotje Atoll", "MH-WTJ")
//  val `Aracinovo`                                  = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Aracinovo", "MK-02")
//  val `Berovo`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Berovo", "MK-03")
//  val `Bitola`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Bitola", "MK-04")
//  val `Bogdanci`                                   = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Bogdanci", "MK-05")
//  val `Bogovinje`                                  = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Bogovinje", "MK-06")
//  val `Bosilovo`                                   = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Bosilovo", "MK-07")
//  val `Brvenica`                                   = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Brvenica", "MK-08")
//  val `Caska`                                      = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Caska", "MK-80")
//  val `Centar Zupa`                                = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Centar Zupa", "MK-78")
//  val `Cesinovo-Oblesevo`                          = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Cesinovo-Oblesevo", "MK-81")
//  val `Cucer Sandevo`                              = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Cucer Sandevo", "MK-82")
//  val `Debar`                                      = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Debar", "MK-21")
//  val `Debarca`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Debarca", "MK-22")
//  val `Delcevo`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Delcevo", "MK-23")
//  val `Demir Hisar`                                = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Demir Hisar", "MK-25")
//  val `Demir Kapija`                               = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Demir Kapija", "MK-24")
//  val `Dojran`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Dojran", "MK-26")
//  val `Dolneni`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Dolneni", "MK-27")
//  val `Gevgelija`                                  = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Gevgelija", "MK-18")
//  val `Gostivar`                                   = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Gostivar", "MK-19")
//  val `Gradsko`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Gradsko", "MK-20")
//  val `Ilinden`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Ilinden", "MK-34")
//  val `Jegunovce`                                  = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Jegunovce", "MK-35")
//  val `Karbinci`                                   = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Karbinci", "MK-37")
//  val `Kavadarci`                                  = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Kavadarci", "MK-36")
//  val `Kicevo`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Kicevo", "MK-40")
//  val `Kocani`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Kocani", "MK-42")
//  val `Konce`                                      = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Konce", "MK-41")
//  val `Kondovo`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Kondovo", "-")
//  val `Kratovo`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Kratovo", "MK-43")
//  val `Kriva Palanka`                              = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Kriva Palanka", "MK-44")
//  val `Krivogastani`                               = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Krivogastani", "MK-45")
//  val `Krusevo`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Krusevo", "MK-46")
//  val `Kumanovo`                                   = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Kumanovo", "MK-47")
//  val `Lipkovo`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Lipkovo", "MK-48")
//  val `Lozovo`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Lozovo", "MK-49")
//  val `Makedonska Kamenica`                        = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Makedonska Kamenica", "MK-51")
//  val `Makedonski Brod`                            = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Makedonski Brod", "MK-52")
//  val `Mavrovo i Rostusa`                          = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Mavrovo i Rostusa", "MK-50")
//  val `Mogila`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Mogila", "MK-53")
//  val `Negotino`                                   = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Negotino", "MK-54")
//  val `Novaci`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Novaci", "MK-55")
//  val `Novo Selo`                                  = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Novo Selo", "MK-56")
//  val `Ohrid`                                      = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Ohrid", "MK-58")
//  val `Pehcevo`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Pehcevo", "MK-60")
//  val `Petrovec`                                   = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Petrovec", "MK-59")
//  val `Plasnica`                                   = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Plasnica", "MK-61")
//  val `Prilep`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Prilep", "MK-62")
//  val `Probistip`                                  = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Probistip", "MK-63")
//  val `Radovis`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Radovis", "MK-64")
//  val `Rankovce`                                   = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Rankovce", "MK-65")
//  val `Resen`                                      = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Resen", "MK-66")
//  val `Rosoman`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Rosoman", "MK-67")
//  val `Skopje`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Skopje", "MK-85")
//  val `Sopiste`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Sopiste", "MK-70")
//  val `Staro Nagoricane`                           = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Staro Nagoricane", "MK-71")
//  val `Stip`                                       = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Stip", "MK-83")
//  val `Struga`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Struga", "MK-72")
//  val `Strumica`                                   = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Strumica", "MK-73")
//  val `Studenicani`                                = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Studenicani", "MK-74")
//  val `Sveti Nikole`                               = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Sveti Nikole", "MK-69")
//  val `Tearce`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Tearce", "MK-75")
//  val `Tetovo`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Tetovo", "MK-76")
//  val `Valandovo`                                  = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Valandovo", "MK-10")
//  val `Vasilevo`                                   = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Vasilevo", "MK-11")
//  val `Veles`                                      = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Veles", "MK-13")
//  val `Vevcani`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Vevcani", "MK-12")
//  val `Vinica`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Vinica", "MK-14")
//  val `Vrapciste`                                  = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Vrapciste", "MK-16")
//  val `Zelenikovo`                                 = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Zelenikovo", "MK-32")
//  val `Zelino`                                     = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Zelino", "MK-30")
//  val `Zrnovci`                                    = new ISOCountrySubdivision(ISOCountry.MACEDONIA, "Zrnovci", "MK-33")
//  val `Bamako`                                     = new ISOCountrySubdivision(ISOCountry.MALI, "Bamako", "ML-BKO")
//  val `Gao`                                        = new ISOCountrySubdivision(ISOCountry.MALI, "Gao", "ML-7")
//  val `Kayes`                                      = new ISOCountrySubdivision(ISOCountry.MALI, "Kayes", "ML-1")
//  val `Kidal`                                      = new ISOCountrySubdivision(ISOCountry.MALI, "Kidal", "ML-8")
//  val `Koulikoro`                                  = new ISOCountrySubdivision(ISOCountry.MALI, "Koulikoro", "ML-2")
//  val `Mopti`                                      = new ISOCountrySubdivision(ISOCountry.MALI, "Mopti", "ML-5")
//  val `Segou`                                      = new ISOCountrySubdivision(ISOCountry.MALI, "Segou", "ML-4")
//  val `Sikasso`                                    = new ISOCountrySubdivision(ISOCountry.MALI, "Sikasso", "ML-3")
//  val `Tombouctou`                                 = new ISOCountrySubdivision(ISOCountry.MALI, "Tombouctou", "ML-6")
//  val `Ayeyawady`                                  = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Ayeyawady", "MM-07")
//  val `Bago`                                       = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Bago", "MM-02")
//  val `Chin`                                       = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Chin", "MM-14")
//  val `Kachin`                                     = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Kachin", "MM-11")
//  val `Kayah`                                      = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Kayah", "MM-12")
//  val `Kayin`                                      = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Kayin", "MM-13")
//  val `Magway`                                     = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Magway", "MM-03")
//  val `Mandalay`                                   = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Mandalay", "MM-04")
//  val `Mon`                                        = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Mon", "MM-15")
//  val `Nay Pyi Taw`                                = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Nay Pyi Taw", "MM-18")
//  val `Rakhine`                                    = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Rakhine", "MM-16")
//  val `Sagaing`                                    = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Sagaing", "MM-01")
//  val `Shan`                                       = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Shan", "MM-17")
//  val `Taninthayi`                                 = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Taninthayi", "MM-05")
//  val `Yangon`                                     = new ISOCountrySubdivision(ISOCountry.MYANMAR, "Yangon", "MM-06")
//  val `Arhangay`                                   = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Arhangay", "MN-073")
//  val `Bayan-Olgiy`                                = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Bayan-Olgiy", "MN-071")
//  val `Bayanhongor`                                = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Bayanhongor", "MN-069")
//  val `Bulgan`                                     = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Bulgan", "MN-067")
//  val `Darhan uul`                                 = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Darhan uul", "MN-037")
//  val `Dornod`                                     = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Dornod", "MN-061")
//  val `Dornogovi`                                  = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Dornogovi", "MN-063")
//  val `Dundgovi`                                   = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Dundgovi", "MN-059")
//  val `Dzavhan`                                    = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Dzavhan", "MN-057")
//  val `Govi-Altay`                                 = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Govi-Altay", "MN-065")
//  val `Govi-Sumber`                                = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Govi-Sumber", "MN-064")
//  val `Hentiy`                                     = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Hentiy", "MN-039")
//  val `Hovd`                                       = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Hovd", "MN-043")
//  val `Hovsgol`                                    = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Hovsgol", "MN-041")
//  val `Omnogovi`                                   = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Omnogovi", "MN-053")
//  val `Orhon`                                      = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Orhon", "MN-035")
//  val `Ovorhangay`                                 = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Ovorhangay", "MN-055")
//  val `Selenge`                                    = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Selenge", "MN-049")
//  val `Suhbaatar`                                  = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Suhbaatar", "MN-051")
//  val `Tov`                                        = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Tov", "MN-047")
//  val `Ulaanbaatar`                                = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Ulaanbaatar", "MN-1")
//  val `Uvs`                                        = new ISOCountrySubdivision(ISOCountry.MONGOLIA, "Uvs", "MN-046")
//  val `Adrar`                                      = new ISOCountrySubdivision(ISOCountry.MAURITANIA, "Adrar", "MR-07")
//  val `Assaba`                                     = new ISOCountrySubdivision(ISOCountry.MAURITANIA, "Assaba", "MR-03")
//  val `Brakna`                                     = new ISOCountrySubdivision(ISOCountry.MAURITANIA, "Brakna", "MR-05")
//  val `Dakhlet Nouadhibou`                         = new ISOCountrySubdivision(ISOCountry.MAURITANIA, "Dakhlet Nouadhibou", "MR-08")
//  val `Gorgol`                                     = new ISOCountrySubdivision(ISOCountry.MAURITANIA, "Gorgol", "MR-04")
//  val `Guidimaka`                                  = new ISOCountrySubdivision(ISOCountry.MAURITANIA, "Guidimaka", "MR-10")
//  val `Hodh Ech Chargui`                           = new ISOCountrySubdivision(ISOCountry.MAURITANIA, "Hodh Ech Chargui", "MR-01")
//  val `Hodh El Gharbi`                             = new ISOCountrySubdivision(ISOCountry.MAURITANIA, "Hodh El Gharbi", "MR-02")
//  val `Inchiri`                                    = new ISOCountrySubdivision(ISOCountry.MAURITANIA, "Inchiri", "MR-12")
//  val `Nouakchott`                                 = new ISOCountrySubdivision(ISOCountry.MAURITANIA, "Nouakchott", "MR-NKC")
//  val `Tagant`                                     = new ISOCountrySubdivision(ISOCountry.MAURITANIA, "Tagant", "MR-09")
//  val `Tiris Zemmour`                              = new ISOCountrySubdivision(ISOCountry.MAURITANIA, "Tiris Zemmour", "MR-11")
//  val `Trarza`                                     = new ISOCountrySubdivision(ISOCountry.MAURITANIA, "Trarza", "MR-06")
//  val `Malta`                                      = new ISOCountrySubdivision(ISOCountry.MALTA, "Malta", "MT")
//  val `Black River`                                = new ISOCountrySubdivision(ISOCountry.MAURITIUS, "Black River", "MU-BL")
//  val `Flacq`                                      = new ISOCountrySubdivision(ISOCountry.MAURITIUS, "Flacq", "MU-FL")
//  val `Grand Port`                                 = new ISOCountrySubdivision(ISOCountry.MAURITIUS, "Grand Port", "MU-GP")
//  val `Moka`                                       = new ISOCountrySubdivision(ISOCountry.MAURITIUS, "Moka", "MU-MO")
//  val `Pamplemousses`                              = new ISOCountrySubdivision(ISOCountry.MAURITIUS, "Pamplemousses", "MU-PA")
//  val `Plaines Wilhems`                            = new ISOCountrySubdivision(ISOCountry.MAURITIUS, "Plaines Wilhems", "MU-PW")
//  val `Port Louis`                                 = new ISOCountrySubdivision(ISOCountry.MAURITIUS, "Port Louis", "MU-PL")
//  val `Riviere du Rempart`                         = new ISOCountrySubdivision(ISOCountry.MAURITIUS, "Riviere du Rempart", "MU-RR")
//  val `Savanne`                                    = new ISOCountrySubdivision(ISOCountry.MAURITIUS, "Savanne", "MU-SA")
//  val `Alifu`                                      = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Alifu", "MV-02")
//  val `Baa`                                        = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Baa", "MV-20")
//  val `Dhaalu`                                     = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Dhaalu", "MV-17")
//  val `Gaafu Dhaalu`                               = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Gaafu Dhaalu", "MV-28")
//  val `Haa Alifu`                                  = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Haa Alifu", "MV-07")
//  val `Haa Dhaalu`                                 = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Haa Dhaalu", "MV-23")
//  val `Kaafu`                                      = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Kaafu", "MV-26")
//  val `Laamu`                                      = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Laamu", "MV-05")
//  val `Maale`                                      = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Maale", "MV-MLE")
//  val `Meemu`                                      = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Meemu", "MV-12")
//  val `Noonu`                                      = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Noonu", "MV-25")
//  val `Raa`                                        = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Raa", "MV-13")
//  val `Seenu`                                      = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Seenu", "MV-01")
//  val `Shaviyani`                                  = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Shaviyani", "MV-24")
//  val `Thaa`                                       = new ISOCountrySubdivision(ISOCountry.MALDIVES, "Thaa", "MV-08")
//  val `Balaka`                                     = new ISOCountrySubdivision(ISOCountry.MALAWI, "Balaka", "MW-BA")
//  val `Blantyre`                                   = new ISOCountrySubdivision(ISOCountry.MALAWI, "Blantyre", "MW-BL")
//  val `Chikwawa`                                   = new ISOCountrySubdivision(ISOCountry.MALAWI, "Chikwawa", "MW-CK")
//  val `Chiradzulu`                                 = new ISOCountrySubdivision(ISOCountry.MALAWI, "Chiradzulu", "MW-CR")
//  val `Chitipa`                                    = new ISOCountrySubdivision(ISOCountry.MALAWI, "Chitipa", "MW-CT")
//  val `Dedza`                                      = new ISOCountrySubdivision(ISOCountry.MALAWI, "Dedza", "MW-DE")
//  val `Dowa`                                       = new ISOCountrySubdivision(ISOCountry.MALAWI, "Dowa", "MW-DO")
//  val `Karonga`                                    = new ISOCountrySubdivision(ISOCountry.MALAWI, "Karonga", "MW-KR")
//  val `Kasungu`                                    = new ISOCountrySubdivision(ISOCountry.MALAWI, "Kasungu", "MW-KS")
//  val `Likoma`                                     = new ISOCountrySubdivision(ISOCountry.MALAWI, "Likoma", "MW-LK")
//  val `Lilongwe`                                   = new ISOCountrySubdivision(ISOCountry.MALAWI, "Lilongwe", "MW-LI")
//  val `Machinga`                                   = new ISOCountrySubdivision(ISOCountry.MALAWI, "Machinga", "MW-MH")
//  val `Mangochi`                                   = new ISOCountrySubdivision(ISOCountry.MALAWI, "Mangochi", "MW-MG")
//  val `Mchinji`                                    = new ISOCountrySubdivision(ISOCountry.MALAWI, "Mchinji", "MW-MC")
//  val `Mulanje`                                    = new ISOCountrySubdivision(ISOCountry.MALAWI, "Mulanje", "MW-MU")
//  val `Mwanza`                                     = new ISOCountrySubdivision(ISOCountry.MALAWI, "Mwanza", "MW-MW")
//  val `Mzimba`                                     = new ISOCountrySubdivision(ISOCountry.MALAWI, "Mzimba", "MW-MZ")
//  val `Neno`                                       = new ISOCountrySubdivision(ISOCountry.MALAWI, "Neno", "MW-NE")
//  val `Nkhata Bay`                                 = new ISOCountrySubdivision(ISOCountry.MALAWI, "Nkhata Bay", "MW-NB")
//  val `Nkhotakota`                                 = new ISOCountrySubdivision(ISOCountry.MALAWI, "Nkhotakota", "MW-NK")
//  val `Nsanje`                                     = new ISOCountrySubdivision(ISOCountry.MALAWI, "Nsanje", "MW-NS")
//  val `Ntcheu`                                     = new ISOCountrySubdivision(ISOCountry.MALAWI, "Ntcheu", "MW-NU")
//  val `Ntchisi`                                    = new ISOCountrySubdivision(ISOCountry.MALAWI, "Ntchisi", "MW-NI")
//  val `Phalombe`                                   = new ISOCountrySubdivision(ISOCountry.MALAWI, "Phalombe", "MW-PH")
//  val `Rumphi`                                     = new ISOCountrySubdivision(ISOCountry.MALAWI, "Rumphi", "MW-RU")
//  val `Salima`                                     = new ISOCountrySubdivision(ISOCountry.MALAWI, "Salima", "MW-SA")
//  val `Thyolo`                                     = new ISOCountrySubdivision(ISOCountry.MALAWI, "Thyolo", "MW-TH")
//  val `Zomba`                                      = new ISOCountrySubdivision(ISOCountry.MALAWI, "Zomba", "MW-ZO")
//  val `Aguascalientes`                             = new ISOCountrySubdivision(ISOCountry.MEXICO, "Aguascalientes", "MX-AGU")
//  val `Baja California`                            = new ISOCountrySubdivision(ISOCountry.MEXICO, "Baja California", "MX-BCN")
//  val `Baja California Sur`                        = new ISOCountrySubdivision(ISOCountry.MEXICO, "Baja California Sur", "MX-BCS")
//  val `Campeche`                                   = new ISOCountrySubdivision(ISOCountry.MEXICO, "Campeche", "MX-CAM")
//  val `Chiapas`                                    = new ISOCountrySubdivision(ISOCountry.MEXICO, "Chiapas", "MX-CHP")
//  val `Chihuahua`                                  = new ISOCountrySubdivision(ISOCountry.MEXICO, "Chihuahua", "MX-CHH")
//  val `Coahuila`                                   = new ISOCountrySubdivision(ISOCountry.MEXICO, "Coahuila", "MX-COA")
//  val `Colima`                                     = new ISOCountrySubdivision(ISOCountry.MEXICO, "Colima", "MX-COL")
//  val `Distrito Federal - Mexico`                  = new ISOCountrySubdivision(ISOCountry.MEXICO, "Distrito Federal", "MX-DIF")
//  val `Durango`                                    = new ISOCountrySubdivision(ISOCountry.MEXICO, "Durango", "MX-DUR")
//  val `Guanajuato`                                 = new ISOCountrySubdivision(ISOCountry.MEXICO, "Guanajuato", "MX-GUA")
//  val `Guerrero`                                   = new ISOCountrySubdivision(ISOCountry.MEXICO, "Guerrero", "MX-GRO")
//  val `Hidalgo`                                    = new ISOCountrySubdivision(ISOCountry.MEXICO, "Hidalgo", "MX-HID")
//  val `Jalisco`                                    = new ISOCountrySubdivision(ISOCountry.MEXICO, "Jalisco", "MX-JAL")
//  val `Mexico`                                     = new ISOCountrySubdivision(ISOCountry.MEXICO, "Mexico", "MX-MEX")
//  val `Michoacan`                                  = new ISOCountrySubdivision(ISOCountry.MEXICO, "Michoacan", "MX-MIC")
//  val `Morelos`                                    = new ISOCountrySubdivision(ISOCountry.MEXICO, "Morelos", "MX-MOR")
//  val `Nayarit`                                    = new ISOCountrySubdivision(ISOCountry.MEXICO, "Nayarit", "MX-NAY")
//  val `Nuevo Leon`                                 = new ISOCountrySubdivision(ISOCountry.MEXICO, "Nuevo Leon", "MX-NLE")
//  val `Oaxaca`                                     = new ISOCountrySubdivision(ISOCountry.MEXICO, "Oaxaca", "MX-OAX")
//  val `Puebla`                                     = new ISOCountrySubdivision(ISOCountry.MEXICO, "Puebla", "MX-PUE")
//  val `Queretaro`                                  = new ISOCountrySubdivision(ISOCountry.MEXICO, "Queretaro", "MX-QUE")
//  val `Quintana Roo`                               = new ISOCountrySubdivision(ISOCountry.MEXICO, "Quintana Roo", "MX-ROO")
//  val `San Luis Potosi`                            = new ISOCountrySubdivision(ISOCountry.MEXICO, "San Luis Potosi", "MX-SLP")
//  val `Sinaloa`                                    = new ISOCountrySubdivision(ISOCountry.MEXICO, "Sinaloa", "MX-SIN")
//  val `Sonora`                                     = new ISOCountrySubdivision(ISOCountry.MEXICO, "Sonora", "MX-SON")
//  val `Tabasco`                                    = new ISOCountrySubdivision(ISOCountry.MEXICO, "Tabasco", "MX-TAB")
//  val `Tamaulipas`                                 = new ISOCountrySubdivision(ISOCountry.MEXICO, "Tamaulipas", "MX-TAM")
//  val `Tlaxcala`                                   = new ISOCountrySubdivision(ISOCountry.MEXICO, "Tlaxcala", "MX-TLA")
//  val `Veracruz`                                   = new ISOCountrySubdivision(ISOCountry.MEXICO, "Veracruz", "MX-VER")
//  val `Yucatan`                                    = new ISOCountrySubdivision(ISOCountry.MEXICO, "Yucatan", "MX-YUC")
//  val `Zacatecas`                                  = new ISOCountrySubdivision(ISOCountry.MEXICO, "Zacatecas", "MX-ZAC")
//  val `Johor`                                      = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Johor", "MY-01")
//  val `Kedah`                                      = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Kedah", "MY-02")
//  val `Kelantan`                                   = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Kelantan", "MY-03")
//  val `Melaka`                                     = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Melaka", "MY-04")
//  val `Negeri Sembilan`                            = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Negeri Sembilan", "MY-05")
//  val `Pahang`                                     = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Pahang", "MY-06")
//  val `Perak`                                      = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Perak", "MY-08")
//  val `Perlis`                                     = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Perlis", "MY-09")
//  val `Pulau Pinang`                               = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Pulau Pinang", "MY-07")
//  val `Sabah`                                      = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Sabah", "MY-12")
//  val `Sarawak`                                    = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Sarawak", "MY-13")
//  val `Selangor`                                   = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Selangor", "MY-10")
//  val `Terengganu`                                 = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Terengganu", "MY-11")
//  val `Wilayah Persekutuan Kuala Lumpur`           = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Wilayah Persekutuan Kuala Lumpur", "MY-14")
//  val `Wilayah Persekutuan Labuan`                 = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Wilayah Persekutuan Labuan", "MY-15")
//  val `Wilayah Persekutuan Putrajaya`              = new ISOCountrySubdivision(ISOCountry.MALAYSIA, "Wilayah Persekutuan Putrajaya", "MY-16")
//  val `Cabo Delgado`                               = new ISOCountrySubdivision(ISOCountry.MOZAMBIQUE, "Cabo Delgado", "MZ-P")
//  val `Gaza - Mozambique`                          = new ISOCountrySubdivision(ISOCountry.MOZAMBIQUE, "Gaza", "MZ-G")
//  val `Inhambane`                                  = new ISOCountrySubdivision(ISOCountry.MOZAMBIQUE, "Inhambane", "MZ-I")
//  val `Manica`                                     = new ISOCountrySubdivision(ISOCountry.MOZAMBIQUE, "Manica", "MZ-B")
//  val `Maputo`                                     = new ISOCountrySubdivision(ISOCountry.MOZAMBIQUE, "Maputo", "MZ-L")
//  val `Nampula`                                    = new ISOCountrySubdivision(ISOCountry.MOZAMBIQUE, "Nampula", "MZ-N")
//  val `Niassa`                                     = new ISOCountrySubdivision(ISOCountry.MOZAMBIQUE, "Niassa", "MZ-A")
//  val `Sofala`                                     = new ISOCountrySubdivision(ISOCountry.MOZAMBIQUE, "Sofala", "MZ-S")
//  val `Tete`                                       = new ISOCountrySubdivision(ISOCountry.MOZAMBIQUE, "Tete", "MZ-T")
//  val `Zambezia`                                   = new ISOCountrySubdivision(ISOCountry.MOZAMBIQUE, "Zambezia", "MZ-Q")
//  val `Erongo`                                     = new ISOCountrySubdivision(ISOCountry.NAMIBIA, "Erongo", "NA-ER")
//  val `Hardap`                                     = new ISOCountrySubdivision(ISOCountry.NAMIBIA, "Hardap", "NA-HA")
//  val `Karas`                                      = new ISOCountrySubdivision(ISOCountry.NAMIBIA, "Karas", "NA-KA")
//  val `Khomas`                                     = new ISOCountrySubdivision(ISOCountry.NAMIBIA, "Khomas", "NA-KH")
//  val `Kunene`                                     = new ISOCountrySubdivision(ISOCountry.NAMIBIA, "Kunene", "NA-KU")
//  val `Ohangwena`                                  = new ISOCountrySubdivision(ISOCountry.NAMIBIA, "Ohangwena", "NA-OW")
//  val `Okavango`                                   = new ISOCountrySubdivision(ISOCountry.NAMIBIA, "Okavango", "-")
//  val `Omaheke`                                    = new ISOCountrySubdivision(ISOCountry.NAMIBIA, "Omaheke", "NA-OH")
//  val `Omusati`                                    = new ISOCountrySubdivision(ISOCountry.NAMIBIA, "Omusati", "NA-OS")
//  val `Oshana`                                     = new ISOCountrySubdivision(ISOCountry.NAMIBIA, "Oshana", "NA-ON")
//  val `Oshikoto`                                   = new ISOCountrySubdivision(ISOCountry.NAMIBIA, "Oshikoto", "NA-OT")
//  val `Otjozondjupa`                               = new ISOCountrySubdivision(ISOCountry.NAMIBIA, "Otjozondjupa", "NA-OD")
//  val `Zambezi`                                    = new ISOCountrySubdivision(ISOCountry.NAMIBIA, "Zambezi", "NA-CA")
//  val `Agadez`                                     = new ISOCountrySubdivision(ISOCountry.NIGER, "Agadez", "NE-1")
//  val `Diffa`                                      = new ISOCountrySubdivision(ISOCountry.NIGER, "Diffa", "NE-2")
//  val `Dosso`                                      = new ISOCountrySubdivision(ISOCountry.NIGER, "Dosso", "NE-3")
//  val `Maradi`                                     = new ISOCountrySubdivision(ISOCountry.NIGER, "Maradi", "NE-4")
//  val `Niamey`                                     = new ISOCountrySubdivision(ISOCountry.NIGER, "Niamey", "NE-8")
//  val `Tahoua`                                     = new ISOCountrySubdivision(ISOCountry.NIGER, "Tahoua", "NE-5")
//  val `Tillaberi`                                  = new ISOCountrySubdivision(ISOCountry.NIGER, "Tillaberi", "NE-6")
//  val `Zinder`                                     = new ISOCountrySubdivision(ISOCountry.NIGER, "Zinder", "NE-7")
//  val `Abia`                                       = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Abia", "NG-AB")
//  val `Abuja Federal Capital Territory`            = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Abuja Federal Capital Territory", "NG-FC")
//  val `Adamawa`                                    = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Adamawa", "NG-AD")
//  val `Akwa Ibom`                                  = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Akwa Ibom", "NG-AK")
//  val `Anambra`                                    = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Anambra", "NG-AN")
//  val `Bauchi`                                     = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Bauchi", "NG-BA")
//  val `Bayelsa`                                    = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Bayelsa", "NG-BY")
//  val `Benue`                                      = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Benue", "NG-BE")
//  val `Borno`                                      = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Borno", "NG-BO")
//  val `Cross River`                                = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Cross River", "NG-CR")
//  val `Delta`                                      = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Delta", "NG-DE")
//  val `Ebonyi`                                     = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Ebonyi", "NG-EB")
//  val `Edo`                                        = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Edo", "NG-ED")
//  val `Ekiti`                                      = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Ekiti", "NG-EK")
//  val `Enugu`                                      = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Enugu", "NG-EN")
//  val `Gombe`                                      = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Gombe", "NG-GO")
//  val `Imo`                                        = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Imo", "NG-IM")
//  val `Jigawa`                                     = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Jigawa", "NG-JI")
//  val `Kaduna`                                     = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Kaduna", "NG-KD")
//  val `Kano`                                       = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Kano", "NG-KN")
//  val `Katsina`                                    = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Katsina", "NG-KT")
//  val `Kebbi`                                      = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Kebbi", "NG-KE")
//  val `Kogi`                                       = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Kogi", "NG-KO")
//  val `Kwara`                                      = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Kwara", "NG-KW")
//  val `Lagos`                                      = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Lagos", "NG-LA")
//  val `Nasarawa`                                   = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Nasarawa", "NG-NA")
//  val `Niger`                                      = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Niger", "NG-NI")
//  val `Ogun`                                       = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Ogun", "NG-OG")
//  val `Ondo`                                       = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Ondo", "NG-ON")
//  val `Osun`                                       = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Osun", "NG-OS")
//  val `Oyo`                                        = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Oyo", "NG-OY")
//  val `Plateau`                                    = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Plateau", "NG-PL")
//  val `Rivers`                                     = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Rivers", "NG-RI")
//  val `Sokoto`                                     = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Sokoto", "NG-SO")
//  val `Taraba`                                     = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Taraba", "NG-TA")
//  val `Yobe`                                       = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Yobe", "NG-YO")
//  val `Zamfara`                                    = new ISOCountrySubdivision(ISOCountry.NIGERIA, "Zamfara", "NG-ZA")
//  val `Atlantico Norte`                            = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Atlantico Norte", "NI-AN")
//  val `Atlantico Sur`                              = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Atlantico Sur", "NI-AS")
//  val `Boaco`                                      = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Boaco", "NI-BO")
//  val `Carazo`                                     = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Carazo", "NI-CA")
//  val `Chinandega`                                 = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Chinandega", "NI-CI")
//  val `Chontales`                                  = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Chontales", "NI-CO")
//  val `Esteli`                                     = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Esteli", "NI-ES")
//  val `Granada`                                    = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Granada", "NI-GR")
//  val `Jinotega`                                   = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Jinotega", "NI-JI")
//  val `Leon`                                       = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Leon", "NI-LE")
//  val `Madriz`                                     = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Madriz", "NI-MD")
//  val `Managua`                                    = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Managua", "NI-MN")
//  val `Masaya`                                     = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Masaya", "NI-MS")
//  val `Matagalpa`                                  = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Matagalpa", "NI-MT")
//  val `Nueva Segovia`                              = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Nueva Segovia", "NI-NS")
//  val `Rio San Juan`                               = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Rio San Juan", "NI-SJ")
//  val `Rivas`                                      = new ISOCountrySubdivision(ISOCountry.NICARAGUA, "Rivas", "NI-RI")
//  val `Drenthe`                                    = new ISOCountrySubdivision(ISOCountry.NETHERLANDS, "Drenthe", "NL-DR")
//  val `Flevoland`                                  = new ISOCountrySubdivision(ISOCountry.NETHERLANDS, "Flevoland", "NL-FL")
//  val `Fryslan`                                    = new ISOCountrySubdivision(ISOCountry.NETHERLANDS, "Fryslan", "NL-FR")
//  val `Gelderland`                                 = new ISOCountrySubdivision(ISOCountry.NETHERLANDS, "Gelderland", "NL-GE")
//  val `Groningen`                                  = new ISOCountrySubdivision(ISOCountry.NETHERLANDS, "Groningen", "NL-GR")
//  val `Limburg`                                    = new ISOCountrySubdivision(ISOCountry.NETHERLANDS, "Limburg", "NL-LI")
//  val `Noord-Brabant`                              = new ISOCountrySubdivision(ISOCountry.NETHERLANDS, "Noord-Brabant", "NL-NB")
//  val `Noord-Holland`                              = new ISOCountrySubdivision(ISOCountry.NETHERLANDS, "Noord-Holland", "NL-NH")
//  val `Overijssel`                                 = new ISOCountrySubdivision(ISOCountry.NETHERLANDS, "Overijssel", "NL-OV")
//  val `Utrecht`                                    = new ISOCountrySubdivision(ISOCountry.NETHERLANDS, "Utrecht", "NL-UT")
//  val `Zeeland`                                    = new ISOCountrySubdivision(ISOCountry.NETHERLANDS, "Zeeland", "NL-ZE")
//  val `Zuid-Holland`                               = new ISOCountrySubdivision(ISOCountry.NETHERLANDS, "Zuid-Holland", "NL-ZH")
//  val `Akershus`                                   = new ISOCountrySubdivision(ISOCountry.NORWAY, "Akershus", "NO-02")
//  val `Aust-Agder`                                 = new ISOCountrySubdivision(ISOCountry.NORWAY, "Aust-Agder", "NO-09")
//  val `Buskerud`                                   = new ISOCountrySubdivision(ISOCountry.NORWAY, "Buskerud", "NO-06")
//  val `Finnmark`                                   = new ISOCountrySubdivision(ISOCountry.NORWAY, "Finnmark", "NO-20")
//  val `Hedmark`                                    = new ISOCountrySubdivision(ISOCountry.NORWAY, "Hedmark", "NO-04")
//  val `Hordaland`                                  = new ISOCountrySubdivision(ISOCountry.NORWAY, "Hordaland", "NO-12")
//  val `More og Romsdal`                            = new ISOCountrySubdivision(ISOCountry.NORWAY, "More og Romsdal", "NO-15")
//  val `Nord-Trondelag`                             = new ISOCountrySubdivision(ISOCountry.NORWAY, "Nord-Trondelag", "NO-17")
//  val `Nordland`                                   = new ISOCountrySubdivision(ISOCountry.NORWAY, "Nordland", "NO-18")
//  val `Oppland`                                    = new ISOCountrySubdivision(ISOCountry.NORWAY, "Oppland", "NO-05")
//  val `Oslo`                                       = new ISOCountrySubdivision(ISOCountry.NORWAY, "Oslo", "NO-03")
//  val `Ostfold`                                    = new ISOCountrySubdivision(ISOCountry.NORWAY, "Ostfold", "NO-01")
//  val `Rogaland`                                   = new ISOCountrySubdivision(ISOCountry.NORWAY, "Rogaland", "NO-11")
//  val `Sogn og Fjordane`                           = new ISOCountrySubdivision(ISOCountry.NORWAY, "Sogn og Fjordane", "NO-14")
//  val `Sor-Trondelag`                              = new ISOCountrySubdivision(ISOCountry.NORWAY, "Sor-Trondelag", "NO-16")
//  val `Telemark`                                   = new ISOCountrySubdivision(ISOCountry.NORWAY, "Telemark", "NO-08")
//  val `Troms`                                      = new ISOCountrySubdivision(ISOCountry.NORWAY, "Troms", "NO-19")
//  val `Vest-Agder`                                 = new ISOCountrySubdivision(ISOCountry.NORWAY, "Vest-Agder", "NO-10")
//  val `Vestfold`                                   = new ISOCountrySubdivision(ISOCountry.NORWAY, "Vestfold", "NO-07")
//  val `Bagmati`                                    = new ISOCountrySubdivision(ISOCountry.NEPAL, "Bagmati", "NP-BA")
//  val `Bheri`                                      = new ISOCountrySubdivision(ISOCountry.NEPAL, "Bheri", "NP-BH")
//  val `Dhawalagiri`                                = new ISOCountrySubdivision(ISOCountry.NEPAL, "Dhawalagiri", "NP-DH")
//  val `Gandaki`                                    = new ISOCountrySubdivision(ISOCountry.NEPAL, "Gandaki", "NP-GA")
//  val `Janakpur`                                   = new ISOCountrySubdivision(ISOCountry.NEPAL, "Janakpur", "NP-JA")
//  val `Karnali`                                    = new ISOCountrySubdivision(ISOCountry.NEPAL, "Karnali", "NP-KA")
//  val `Kosi`                                       = new ISOCountrySubdivision(ISOCountry.NEPAL, "Kosi", "NP-KO")
//  val `Lumbini`                                    = new ISOCountrySubdivision(ISOCountry.NEPAL, "Lumbini", "NP-LU")
//  val `Mahakali`                                   = new ISOCountrySubdivision(ISOCountry.NEPAL, "Mahakali", "NP-MA")
//  val `Mechi`                                      = new ISOCountrySubdivision(ISOCountry.NEPAL, "Mechi", "NP-ME")
//  val `Narayani`                                   = new ISOCountrySubdivision(ISOCountry.NEPAL, "Narayani", "NP-NA")
//  val `Rapti`                                      = new ISOCountrySubdivision(ISOCountry.NEPAL, "Rapti", "NP-RA")
//  val `Sagarmatha`                                 = new ISOCountrySubdivision(ISOCountry.NEPAL, "Sagarmatha", "NP-SA")
//  val `Seti`                                       = new ISOCountrySubdivision(ISOCountry.NEPAL, "Seti", "NP-SE")
//  val `Yaren`                                      = new ISOCountrySubdivision(ISOCountry.NAURU, "Yaren", "NR-14")
//  val `Auckland`                                   = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Auckland", "NZ-AUK")
//  val `Bay of Plenty`                              = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Bay of Plenty", "NZ-BOP")
//  val `Canterbury`                                 = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Canterbury", "NZ-CAN")
//  val `Chatham Islands`                            = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Chatham Islands", "NZ-CIT")
//  val `Gisborne`                                   = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Gisborne", "NZ-GIS")
//  val `Hawke's Bay`                                = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Hawke's Bay", "NZ-HKB")
//  val `Manawatu-Wanganui`                          = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Manawatu-Wanganui", "NZ-MWT")
//  val `Marlborough`                                = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Marlborough", "NZ-MBH")
//  val `Nelson`                                     = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Nelson", "NZ-NSN")
//  val `Northland`                                  = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Northland", "NZ-NTL")
//  val `Otago`                                      = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Otago", "NZ-OTA")
//  val `Southland`                                  = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Southland", "NZ-STL")
//  val `Taranaki`                                   = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Taranaki", "NZ-TKI")
//  val `Tasman`                                     = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Tasman", "NZ-TAS")
//  val `Waikato`                                    = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Waikato", "NZ-WKO")
//  val `Wellington`                                 = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "Wellington", "NZ-WGN")
//  val `West Coast`                                 = new ISOCountrySubdivision(ISOCountry.NEW_ZEALAND, "West Coast", "NZ-WTC")
//  val `Ad Dakhiliyah`                              = new ISOCountrySubdivision(ISOCountry.OMAN, "Ad Dakhiliyah", "OM-DA")
//  val `Al Buraymi`                                 = new ISOCountrySubdivision(ISOCountry.OMAN, "Al Buraymi", "OM-BU")
//  val `Al Wusta`                                   = new ISOCountrySubdivision(ISOCountry.OMAN, "Al Wusta", "OM-WU")
//  val `Az Zahirah`                                 = new ISOCountrySubdivision(ISOCountry.OMAN, "Az Zahirah", "OM-ZA")
//  val `Janub al Batinah`                           = new ISOCountrySubdivision(ISOCountry.OMAN, "Janub al Batinah", "OM-BJ")
//  val `Janub ash Sharqiyah`                        = new ISOCountrySubdivision(ISOCountry.OMAN, "Janub ash Sharqiyah", "OM-SJ")
//  val `Masqat`                                     = new ISOCountrySubdivision(ISOCountry.OMAN, "Masqat", "OM-MA")
//  val `Musandam`                                   = new ISOCountrySubdivision(ISOCountry.OMAN, "Musandam", "OM-MU")
//  val `Shamal al Batinah`                          = new ISOCountrySubdivision(ISOCountry.OMAN, "Shamal al Batinah", "OM-BS")
//  val `Shamal ash Sharqiyah`                       = new ISOCountrySubdivision(ISOCountry.OMAN, "Shamal ash Sharqiyah", "OM-SS")
//  val `Zufar`                                      = new ISOCountrySubdivision(ISOCountry.OMAN, "Zufar", "OM-ZU")
//  val `Bocas del Toro`                             = new ISOCountrySubdivision(ISOCountry.PANAMA, "Bocas del Toro", "PA-1")
//  val `Chiriqui`                                   = new ISOCountrySubdivision(ISOCountry.PANAMA, "Chiriqui", "PA-4")
//  val `Cocle`                                      = new ISOCountrySubdivision(ISOCountry.PANAMA, "Cocle", "PA-2")
//  val `Colon`                                      = new ISOCountrySubdivision(ISOCountry.PANAMA, "Colon", "PA-3")
//  val `Darien`                                     = new ISOCountrySubdivision(ISOCountry.PANAMA, "Darien", "PA-5")
//  val `Herrera`                                    = new ISOCountrySubdivision(ISOCountry.PANAMA, "Herrera", "PA-6")
//  val `Los Santos`                                 = new ISOCountrySubdivision(ISOCountry.PANAMA, "Los Santos", "PA-7")
//  val `Panama`                                     = new ISOCountrySubdivision(ISOCountry.PANAMA, "Panama", "PA-8")
//  val `San Blas`                                   = new ISOCountrySubdivision(ISOCountry.PANAMA, "San Blas", "PA-KY")
//  val `Veraguas`                                   = new ISOCountrySubdivision(ISOCountry.PANAMA, "Veraguas", "PA-9")
//  val `Amazonas - Peru`                            = new ISOCountrySubdivision(ISOCountry.PERU, "Amazonas", "PE-AMA")
//  val `Ancash`                                     = new ISOCountrySubdivision(ISOCountry.PERU, "Ancash", "PE-ANC")
//  val `Apurimac`                                   = new ISOCountrySubdivision(ISOCountry.PERU, "Apurimac", "PE-APU")
//  val `Arequipa`                                   = new ISOCountrySubdivision(ISOCountry.PERU, "Arequipa", "PE-ARE")
//  val `Ayacucho`                                   = new ISOCountrySubdivision(ISOCountry.PERU, "Ayacucho", "PE-AYA")
//  val `Cajamarca`                                  = new ISOCountrySubdivision(ISOCountry.PERU, "Cajamarca", "PE-CAJ")
//  val `Callao`                                     = new ISOCountrySubdivision(ISOCountry.PERU, "Callao", "PE-CAL")
//  val `Cusco`                                      = new ISOCountrySubdivision(ISOCountry.PERU, "Cusco", "PE-CUS")
//  val `Huancavelica`                               = new ISOCountrySubdivision(ISOCountry.PERU, "Huancavelica", "PE-HUV")
//  val `Huanuco`                                    = new ISOCountrySubdivision(ISOCountry.PERU, "Huanuco", "PE-HUC")
//  val `Ica`                                        = new ISOCountrySubdivision(ISOCountry.PERU, "Ica", "PE-ICA")
//  val `Junin`                                      = new ISOCountrySubdivision(ISOCountry.PERU, "Junin", "PE-JUN")
//  val `La Libertad - Peru`                         = new ISOCountrySubdivision(ISOCountry.PERU, "La Libertad", "PE-LAL")
//  val `Lambayeque`                                 = new ISOCountrySubdivision(ISOCountry.PERU, "Lambayeque", "PE-LAM")
//  val `Lima`                                       = new ISOCountrySubdivision(ISOCountry.PERU, "Lima", "PE-LIM")
//  val `Loreto`                                     = new ISOCountrySubdivision(ISOCountry.PERU, "Loreto", "PE-LOR")
//  val `Madre de Dios`                              = new ISOCountrySubdivision(ISOCountry.PERU, "Madre de Dios", "PE-MDD")
//  val `Moquegua`                                   = new ISOCountrySubdivision(ISOCountry.PERU, "Moquegua", "PE-MOQ")
//  val `Pasco`                                      = new ISOCountrySubdivision(ISOCountry.PERU, "Pasco", "PE-PAS")
//  val `Piura`                                      = new ISOCountrySubdivision(ISOCountry.PERU, "Piura", "PE-PIU")
//  val `Puno`                                       = new ISOCountrySubdivision(ISOCountry.PERU, "Puno", "PE-PUN")
//  val `San Martin`                                 = new ISOCountrySubdivision(ISOCountry.PERU, "San Martin", "PE-SAM")
//  val `Tacna`                                      = new ISOCountrySubdivision(ISOCountry.PERU, "Tacna", "PE-TAC")
//  val `Tumbes`                                     = new ISOCountrySubdivision(ISOCountry.PERU, "Tumbes", "PE-TUM")
//  val `Ucayali`                                    = new ISOCountrySubdivision(ISOCountry.PERU, "Ucayali", "PE-UCA")
//  val `Bougainville`                               = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "Bougainville", "PG-NSB")
//  val `Chimbu`                                     = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "Chimbu", "PG-CPK")
//  val `East New Britain`                           = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "East New Britain", "PG-EBR")
//  val `East Sepik`                                 = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "East Sepik", "PG-ESW")
//  val `Eastern Highlands`                          = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "Eastern Highlands", "PG-EHG")
//  val `Enga`                                       = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "Enga", "PG-EPW")
//  val `Gulf`                                       = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "Gulf", "PG-GPK")
//  val `Madang`                                     = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "Madang", "PG-MPM")
//  val `Manus`                                      = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "Manus", "PG-MRL")
//  val `Milne Bay`                                  = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "Milne Bay", "PG-MBA")
//  val `Morobe`                                     = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "Morobe", "PG-MPL")
//  val `National Capital District`                  = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "National Capital District", "PG-NCD")
//  val `New Ireland`                                = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "New Ireland", "PG-NIK")
//  val `Northern Papua New Guinea`                  = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "Northern", "PG-NPP")
//  val `Southern Highlands`                         = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "Southern Highlands", "PG-SHM")
//  val `West New Britain`                           = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "West New Britain", "PG-WBK")
//  val `West Sepik`                                 = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "West Sepik", "PG-SAN")
//  val `Western Papua New Guinea`                   = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "Western", "PG-WPD")
//  val `Western Highlands`                          = new ISOCountrySubdivision(ISOCountry.PAPUA_NEW_GUINEA, "Western Highlands", "PG-WHM")
//  val `Abra`                                       = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Abra", "PH-ABR")
//  val `Agusan del Norte`                           = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Agusan del Norte", "PH-AGN")
//  val `Agusan del Sur`                             = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Agusan del Sur", "PH-AGS")
//  val `Aklan`                                      = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Aklan", "PH-AKL")
//  val `Albay`                                      = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Albay", "PH-ALB")
//  val `Antique`                                    = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Antique", "PH-ANT")
//  val `Apayao`                                     = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Apayao", "PH-APA")
//  val `Aurora`                                     = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Aurora", "PH-AUR")
//  val `Basilan`                                    = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Basilan", "PH-BAS")
//  val `Bataan`                                     = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Bataan", "PH-BAN")
//  val `Batanes`                                    = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Batanes", "PH-BTN")
//  val `Batangas`                                   = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Batangas", "PH-BTG")
//  val `Benguet`                                    = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Benguet", "PH-BEN")
//  val `Bohol`                                      = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Bohol", "PH-BOH")
//  val `Bukidnon`                                   = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Bukidnon", "PH-BUK")
//  val `Bulacan`                                    = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Bulacan", "PH-BUL")
//  val `Cagayan`                                    = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Cagayan", "PH-CAG")
//  val `Camarines Norte`                            = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Camarines Norte", "PH-CAN")
//  val `Camarines Sur`                              = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Camarines Sur", "PH-CAS")
//  val `Camiguin`                                   = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Camiguin", "PH-CAM")
//  val `Capiz`                                      = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Capiz", "PH-CAP")
//  val `Catanduanes`                                = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Catanduanes", "PH-CAT")
//  val `Cavite`                                     = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Cavite", "PH-CAV")
//  val `Cebu`                                       = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Cebu", "PH-CEB")
//  val `Cotabato`                                   = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Cotabato", "PH-NCO")
//  val `Davao Oriental`                             = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Davao Oriental", "PH-DAO")
//  val `Davao del Sur`                              = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Davao del Sur", "PH-DAS")
//  val `Eastern Samar`                              = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Eastern Samar", "PH-EAS")
//  val `Ifugao`                                     = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Ifugao", "PH-IFU")
//  val `Ilocos Norte`                               = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Ilocos Norte", "PH-ILN")
//  val `Ilocos Sur`                                 = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Ilocos Sur", "PH-ILS")
//  val `Iloilo`                                     = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Iloilo", "PH-ILI")
//  val `Isabela`                                    = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Isabela", "PH-ISA")
//  val `Kalinga`                                    = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Kalinga", "PH-KAL")
//  val `La Union - Philippines`                     = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "La Union", "PH-LUN")
//  val `Laguna`                                     = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Laguna", "PH-LAG")
//  val `Lanao del Norte`                            = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Lanao del Norte", "PH-LAN")
//  val `Lanao del Sur`                              = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Lanao del Sur", "PH-LAS")
//  val `Leyte`                                      = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Leyte", "PH-LEY")
//  val `Maguindanao`                                = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Maguindanao", "PH-MAG")
//  val `Marinduque`                                 = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Marinduque", "PH-MAD")
//  val `Masbate`                                    = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Masbate", "PH-MAS")
//  val `Mindoro Occidental`                         = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Mindoro Occidental", "PH-MDC")
//  val `Mindoro Oriental`                           = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Mindoro Oriental", "PH-MDR")
//  val `Misamis Occidental`                         = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Misamis Occidental", "PH-MSC")
//  val `Misamis Oriental`                           = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Misamis Oriental", "PH-MSR")
//  val `Mountain Province`                          = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Mountain Province", "PH-MOU")
//  val `National Capital Region`                    = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "National Capital Region", "PH-00")
//  val `Negros Occidental`                          = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Negros Occidental", "PH-NEC")
//  val `Negros Oriental`                            = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Negros Oriental", "PH-NER")
//  val `Northern Samar`                             = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Northern Samar", "PH-NSA")
//  val `Nueva Ecija`                                = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Nueva Ecija", "PH-NUE")
//  val `Nueva Vizcaya`                              = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Nueva Vizcaya", "PH-NUV")
//  val `Palawan`                                    = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Palawan", "PH-PLW")
//  val `Pampanga`                                   = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Pampanga", "PH-PAM")
//  val `Pangasinan`                                 = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Pangasinan", "PH-PAN")
//  val `Quezon`                                     = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Quezon", "PH-QUE")
//  val `Quirino`                                    = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Quirino", "PH-QUI")
//  val `Rizal`                                      = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Rizal", "PH-RIZ")
//  val `Romblon`                                    = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Romblon", "PH-ROM")
//  val `Samar (Western Samar)`                      = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Samar (Western Samar)", "PH-WSA")
//  val `Siquijor`                                   = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Siquijor", "PH-SIG")
//  val `Sorsogon`                                   = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Sorsogon", "PH-SOR")
//  val `South Cotabato`                             = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "South Cotabato", "PH-SCO")
//  val `Southern Leyte`                             = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Southern Leyte", "PH-SLE")
//  val `Sultan Kudarat`                             = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Sultan Kudarat", "PH-SUK")
//  val `Sulu`                                       = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Sulu", "PH-SLU")
//  val `Surigao del Norte`                          = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Surigao del Norte", "PH-SUN")
//  val `Surigao del Sur`                            = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Surigao del Sur", "PH-SUR")
//  val `Tarlac`                                     = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Tarlac", "PH-TAR")
//  val `Tawi-Tawi`                                  = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Tawi-Tawi", "PH-TAW")
//  val `Zambales`                                   = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Zambales", "PH-ZMB")
//  val `Zamboanga del Norte`                        = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Zamboanga del Norte", "PH-ZAN")
//  val `Zamboanga del Sur`                          = new ISOCountrySubdivision(ISOCountry.PHILIPPINES, "Zamboanga del Sur", "PH-ZAS")
//  val `Azad Kashmir`                               = new ISOCountrySubdivision(ISOCountry.PAKISTAN, "Azad Kashmir", "PK-JK")
//  val `Balochistan`                                = new ISOCountrySubdivision(ISOCountry.PAKISTAN, "Balochistan", "PK-BA")
//  val `Federally Administered Tribal Areas`        = new ISOCountrySubdivision(ISOCountry.PAKISTAN, "Federally Administered Tribal Areas", "PK-TA")
//  val `Gilgit-Baltistan`                           = new ISOCountrySubdivision(ISOCountry.PAKISTAN, "Gilgit-Baltistan", "PK-GB")
//  val `Islamabad`                                  = new ISOCountrySubdivision(ISOCountry.PAKISTAN, "Islamabad", "PK-IS")
//  val `Khyber Pakhtunkhwa`                         = new ISOCountrySubdivision(ISOCountry.PAKISTAN, "Khyber Pakhtunkhwa", "PK-KP")
//  val `Punjab - Pakistan`                          = new ISOCountrySubdivision(ISOCountry.PAKISTAN, "Punjab", "PK-PB")
//  val `Sindh`                                      = new ISOCountrySubdivision(ISOCountry.PAKISTAN, "Sindh", "PK-SD")
//  val `Dolnoslaskie`                               = new ISOCountrySubdivision(ISOCountry.POLAND, "Dolnoslaskie", "PL-DS")
//  val `Kujawsko-Pomorskie`                         = new ISOCountrySubdivision(ISOCountry.POLAND, "Kujawsko-Pomorskie", "PL-KP")
//  val `Lodzkie`                                    = new ISOCountrySubdivision(ISOCountry.POLAND, "Lodzkie", "PL-LD")
//  val `Lubelskie`                                  = new ISOCountrySubdivision(ISOCountry.POLAND, "Lubelskie", "PL-LU")
//  val `Lubuskie`                                   = new ISOCountrySubdivision(ISOCountry.POLAND, "Lubuskie", "PL-LB")
//  val `Malopolskie`                                = new ISOCountrySubdivision(ISOCountry.POLAND, "Malopolskie", "PL-MA")
//  val `Mazowieckie`                                = new ISOCountrySubdivision(ISOCountry.POLAND, "Mazowieckie", "PL-MZ")
//  val `Opolskie`                                   = new ISOCountrySubdivision(ISOCountry.POLAND, "Opolskie", "PL-OP")
//  val `Podkarpackie`                               = new ISOCountrySubdivision(ISOCountry.POLAND, "Podkarpackie", "PL-PK")
//  val `Podlaskie`                                  = new ISOCountrySubdivision(ISOCountry.POLAND, "Podlaskie", "PL-PD")
//  val `Pomorskie`                                  = new ISOCountrySubdivision(ISOCountry.POLAND, "Pomorskie", "PL-PM")
//  val `Slaskie`                                    = new ISOCountrySubdivision(ISOCountry.POLAND, "Slaskie", "PL-SL")
//  val `Swietokrzyskie`                             = new ISOCountrySubdivision(ISOCountry.POLAND, "Swietokrzyskie", "PL-SK")
//  val `Warminsko-Mazurskie`                        = new ISOCountrySubdivision(ISOCountry.POLAND, "Warminsko-Mazurskie", "PL-WN")
//  val `Wielkopolskie`                              = new ISOCountrySubdivision(ISOCountry.POLAND, "Wielkopolskie", "PL-WP")
//  val `Zachodniopomorskie`                         = new ISOCountrySubdivision(ISOCountry.POLAND, "Zachodniopomorskie", "PL-ZP")
//  val `Gaza`                                       = new ISOCountrySubdivision(ISOCountry.PALESTINE, "Gaza", "-")
//  val `West Bank`                                  = new ISOCountrySubdivision(ISOCountry.PALESTINE, "West Bank", "-")
//  val `Aveiro`                                     = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Aveiro", "PT-01")
//  val `Beja`                                       = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Beja", "PT-02")
//  val `Braga`                                      = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Braga", "PT-03")
//  val `Braganca`                                   = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Braganca", "PT-04")
//  val `Castelo Branco`                             = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Castelo Branco", "PT-05")
//  val `Coimbra`                                    = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Coimbra", "PT-06")
//  val `Evora`                                      = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Evora", "PT-07")
//  val `Faro`                                       = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Faro", "PT-08")
//  val `Guarda`                                     = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Guarda", "PT-09")
//  val `Leiria`                                     = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Leiria", "PT-10")
//  val `Lisboa`                                     = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Lisboa", "PT-11")
//  val `Portalegre`                                 = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Portalegre", "PT-12")
//  val `Porto`                                      = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Porto", "PT-13")
//  val `Regiao Autonoma da Madeira`                 = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Regiao Autonoma da Madeira", "PT-30")
//  val `Regiao Autonoma dos Acores`                 = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Regiao Autonoma dos Acores", "PT-20")
//  val `Santarem`                                   = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Santarem", "PT-14")
//  val `Setubal`                                    = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Setubal", "PT-15")
//  val `Viana do Castelo`                           = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Viana do Castelo", "PT-16")
//  val `Vila Real`                                  = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Vila Real", "PT-17")
//  val `Viseu`                                      = new ISOCountrySubdivision(ISOCountry.PORTUGAL, "Viseu", "PT-18")
//  val `Aimeliik`                                   = new ISOCountrySubdivision(ISOCountry.PALAU, "Aimeliik", "PW-002")
//  val `Airai`                                      = new ISOCountrySubdivision(ISOCountry.PALAU, "Airai", "PW-004")
//  val `Angaur`                                     = new ISOCountrySubdivision(ISOCountry.PALAU, "Angaur", "PW-010")
//  val `Kayangel`                                   = new ISOCountrySubdivision(ISOCountry.PALAU, "Kayangel", "PW-100")
//  val `Koror`                                      = new ISOCountrySubdivision(ISOCountry.PALAU, "Koror", "PW-150")
//  val `Melekeok`                                   = new ISOCountrySubdivision(ISOCountry.PALAU, "Melekeok", "PW-212")
//  val `Ngaraard`                                   = new ISOCountrySubdivision(ISOCountry.PALAU, "Ngaraard", "PW-214")
//  val `Ngarchelong`                                = new ISOCountrySubdivision(ISOCountry.PALAU, "Ngarchelong", "PW-218")
//  val `Ngardmau`                                   = new ISOCountrySubdivision(ISOCountry.PALAU, "Ngardmau", "PW-222")
//  val `Ngatpang`                                   = new ISOCountrySubdivision(ISOCountry.PALAU, "Ngatpang", "PW-224")
//  val `Ngiwal`                                     = new ISOCountrySubdivision(ISOCountry.PALAU, "Ngiwal", "PW-228")
//  val `Peleliu`                                    = new ISOCountrySubdivision(ISOCountry.PALAU, "Peleliu", "PW-350")
//  val `Alto Paraguay`                              = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Alto Paraguay", "PY-16")
//  val `Alto Parana`                                = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Alto Parana", "PY-10")
//  val `Amambay`                                    = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Amambay", "PY-13")
//  val `Asuncion`                                   = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Asuncion", "PY-ASU")
//  val `Boqueron`                                   = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Boqueron", "PY-19")
//  val `Caaguazu`                                   = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Caaguazu", "PY-5")
//  val `Caazapa`                                    = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Caazapa", "PY-6")
//  val `Canindeyu`                                  = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Canindeyu", "PY-14")
//  val `Central Paraguay`                           = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Central", "PY-11")
//  val `Concepcion`                                 = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Concepcion", "PY-1")
//  val `Cordillera`                                 = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Cordillera", "PY-3")
//  val `Guaira`                                     = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Guaira", "PY-4")
//  val `Itapua`                                     = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Itapua", "PY-7")
//  val `Misiones`                                   = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Misiones", "PY-8")
//  val `Neembucu`                                   = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Neembucu", "PY-12")
//  val `Paraguari`                                  = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Paraguari", "PY-9")
//  val `Presidente Hayes`                           = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "Presidente Hayes", "PY-15")
//  val `San Pedro`                                  = new ISOCountrySubdivision(ISOCountry.PARAGUAY, "San Pedro", "PY-2")
//  val `Ad Dawhah`                                  = new ISOCountrySubdivision(ISOCountry.QATAR, "Ad Dawhah", "QA-DA")
//  val `Al Khawr wa adh Dhakhirah`                  = new ISOCountrySubdivision(ISOCountry.QATAR, "Al Khawr wa adh Dhakhirah", "QA-KH")
//  val `Al Wakrah`                                  = new ISOCountrySubdivision(ISOCountry.QATAR, "Al Wakrah", "QA-WA")
//  val `Ar Rayyan`                                  = new ISOCountrySubdivision(ISOCountry.QATAR, "Ar Rayyan", "QA-RA")
//  val `Ash Shamal`                                 = new ISOCountrySubdivision(ISOCountry.QATAR, "Ash Shamal", "QA-MS")
//  val `Az Za'ayin`                                 = new ISOCountrySubdivision(ISOCountry.QATAR, "Az Za'ayin", "QA-ZA")
//  val `Umm Salal`                                  = new ISOCountrySubdivision(ISOCountry.QATAR, "Umm Salal", "QA-US")
//  val `Alba`                                       = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Alba", "RO-AB")
//  val `Arad`                                       = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Arad", "RO-AR")
//  val `Arges`                                      = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Arges", "RO-AG")
//  val `Bacau`                                      = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Bacau", "RO-BC")
//  val `Bihor`                                      = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Bihor", "RO-BH")
//  val `Bistrita-Nasaud`                            = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Bistrita-Nasaud", "RO-BN")
//  val `Botosani`                                   = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Botosani", "RO-BT")
//  val `Braila`                                     = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Braila", "RO-BR")
//  val `Brasov`                                     = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Brasov", "RO-BV")
//  val `Bucuresti`                                  = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Bucuresti", "RO-B")
//  val `Buzau`                                      = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Buzau", "RO-BZ")
//  val `Calarasi`                                   = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Calarasi", "RO-CL")
//  val `Caras-Severin`                              = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Caras-Severin", "RO-CS")
//  val `Cluj`                                       = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Cluj", "RO-CJ")
//  val `Constanta`                                  = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Constanta", "RO-CT")
//  val `Covasna`                                    = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Covasna", "RO-CV")
//  val `Dambovita`                                  = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Dambovita", "RO-DB")
//  val `Dolj`                                       = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Dolj", "RO-DJ")
//  val `Galati`                                     = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Galati", "RO-GL")
//  val `Giurgiu`                                    = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Giurgiu", "RO-GR")
//  val `Gorj`                                       = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Gorj", "RO-GJ")
//  val `Harghita`                                   = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Harghita", "RO-HR")
//  val `Hunedoara`                                  = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Hunedoara", "RO-HD")
//  val `Ialomita`                                   = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Ialomita", "RO-IL")
//  val `Iasi`                                       = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Iasi", "RO-IS")
//  val `Ilfov`                                      = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Ilfov", "RO-IF")
//  val `Maramures`                                  = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Maramures", "RO-MM")
//  val `Mehedinti`                                  = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Mehedinti", "RO-MH")
//  val `Mures`                                      = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Mures", "RO-MS")
//  val `Neamt`                                      = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Neamt", "RO-NT")
//  val `Olt`                                        = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Olt", "RO-OT")
//  val `Prahova`                                    = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Prahova", "RO-PH")
//  val `Salaj`                                      = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Salaj", "RO-SJ")
//  val `Satu Mare`                                  = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Satu Mare", "RO-SM")
//  val `Sibiu`                                      = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Sibiu", "RO-SB")
//  val `Suceava`                                    = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Suceava", "RO-SV")
//  val `Teleorman`                                  = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Teleorman", "RO-TR")
//  val `Timis`                                      = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Timis", "RO-TM")
//  val `Tulcea`                                     = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Tulcea", "RO-TL")
//  val `Valcea`                                     = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Valcea", "RO-VL")
//  val `Vaslui`                                     = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Vaslui", "RO-VS")
//  val `Vrancea`                                    = new ISOCountrySubdivision(ISOCountry.ROMANIA, "Vrancea", "RO-VN")
//  val `Central Serbia`                             = new ISOCountrySubdivision(ISOCountry.SERBIA, "Central Serbia", "-")
//  val `Kosovo`                                     = new ISOCountrySubdivision(ISOCountry.SERBIA, "Kosovo", "-")
//  val `Vojvodina`                                  = new ISOCountrySubdivision(ISOCountry.SERBIA, "Vojvodina", "-")
//  val `Adygeya, Respublika`                        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Adygeya, Respublika", "RU-AD")
//  val `Altay, Respublika`                          = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Altay, Respublika", "RU-AL")
//  val `Altayskiy kray`                             = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Altayskiy kray", "RU-ALT")
//  val `Amurskaya oblast'`                          = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Amurskaya oblast'", "RU-AMU")
//  val `Arkhangel'skaya oblast'`                    = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Arkhangel'skaya oblast'", "RU-ARK")
//  val `Astrakhanskaya oblast'`                     = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Astrakhanskaya oblast'", "RU-AST")
//  val `Bashkortostan, Respublika`                  = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Bashkortostan, Respublika", "RU-BA")
//  val `Belgorodskaya oblast'`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Belgorodskaya oblast'", "RU-BEL")
//  val `Bryanskaya oblast'`                         = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Bryanskaya oblast'", "RU-BRY")
//  val `Buryatiya, Respublika`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Buryatiya, Respublika", "RU-BU")
//  val `Chechenskaya Respublika`                    = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Chechenskaya Respublika", "RU-CE")
//  val `Chelyabinskaya oblast'`                     = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Chelyabinskaya oblast'", "RU-CHE")
//  val `Chukotskiy avtonomnyy okrug`                = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Chukotskiy avtonomnyy okrug", "RU-CHU")
//  val `Chuvashskaya Respublika`                    = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Chuvashskaya Respublika", "RU-CU")
//  val `Dagestan, Respublika`                       = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Dagestan, Respublika", "RU-DA")
//  val `Ingushetiya, Respublika`                    = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Ingushetiya, Respublika", "RU-IN")
//  val `Irkutskaya oblast'`                         = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Irkutskaya oblast'", "RU-IRK")
//  val `Ivanovskaya oblast'`                        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Ivanovskaya oblast'", "RU-IVA")
//  val `Kabardino-Balkarskaya Respublika`           = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Kabardino-Balkarskaya Respublika", "RU-KB")
//  val `Kaliningradskaya oblast'`                   = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Kaliningradskaya oblast'", "RU-KGD")
//  val `Kalmykiya, Respublika`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Kalmykiya, Respublika", "RU-KL")
//  val `Kaluzhskaya oblast'`                        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Kaluzhskaya oblast'", "RU-KLU")
//  val `Kamchatskiy kray`                           = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Kamchatskiy kray", "RU-KAM")
//  val `Karachayevo-Cherkesskaya Respublika`        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Karachayevo-Cherkesskaya Respublika", "RU-KC")
//  val `Kareliya, Respublika`                       = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Kareliya, Respublika", "RU-KR")
//  val `Kemerovskaya oblast'`                       = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Kemerovskaya oblast'", "RU-KEM")
//  val `Khabarovskiy kray`                          = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Khabarovskiy kray", "RU-KHA")
//  val `Khakasiya, Respublika`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Khakasiya, Respublika", "RU-KK")
//  val `Khanty-Mansiyskiy avtonomnyy okrug-Yugra`   = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Khanty-Mansiyskiy avtonomnyy okrug-Yugra", "RU-KHM")
//  val `Kirovskaya oblast'`                         = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Kirovskaya oblast'", "RU-KIR")
//  val `Komi, Respublika`                           = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Komi, Respublika", "RU-KO")
//  val `Kostromskaya oblast'`                       = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Kostromskaya oblast'", "RU-KOS")
//  val `Krasnodarskiy kray`                         = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Krasnodarskiy kray", "RU-KDA")
//  val `Krasnoyarskiy kray`                         = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Krasnoyarskiy kray", "RU-KYA")
//  val `Kurganskaya oblast'`                        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Kurganskaya oblast'", "RU-KGN")
//  val `Kurskaya oblast'`                           = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Kurskaya oblast'", "RU-KRS")
//  val `Leningradskaya oblast'`                     = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Leningradskaya oblast'", "RU-LEN")
//  val `Lipetskaya oblast'`                         = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Lipetskaya oblast'", "RU-LIP")
//  val `Magadanskaya oblast'`                       = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Magadanskaya oblast'", "RU-MAG")
//  val `Mariy El, Respublika`                       = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Mariy El, Respublika", "RU-ME")
//  val `Mordoviya, Respublika`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Mordoviya, Respublika", "RU-MO")
//  val `Moskovskaya oblast'`                        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Moskovskaya oblast'", "RU-MOS")
//  val `Moskva`                                     = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Moskva", "RU-MOW")
//  val `Murmanskaya oblast'`                        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Murmanskaya oblast'", "RU-MUR")
//  val `Nenetskiy avtonomnyy okrug`                 = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Nenetskiy avtonomnyy okrug", "RU-NEN")
//  val `Nizhegorodskaya oblast'`                    = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Nizhegorodskaya oblast'", "RU-NIZ")
//  val `Novgorodskaya oblast'`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Novgorodskaya oblast'", "RU-NGR")
//  val `Novosibirskaya oblast'`                     = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Novosibirskaya oblast'", "RU-NVS")
//  val `Omskaya oblast'`                            = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Omskaya oblast'", "RU-OMS")
//  val `Orenburgskaya oblast'`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Orenburgskaya oblast'", "RU-ORE")
//  val `Orlovskaya oblast'`                         = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Orlovskaya oblast'", "RU-ORL")
//  val `Penzenskaya oblast'`                        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Penzenskaya oblast'", "RU-PNZ")
//  val `Permskiy kray`                              = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Permskiy kray", "RU-PER")
//  val `Primorskiy kray`                            = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Primorskiy kray", "RU-PRI")
//  val `Pskovskaya oblast'`                         = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Pskovskaya oblast'", "RU-PSK")
//  val `Rostovskaya oblast'`                        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Rostovskaya oblast'", "RU-ROS")
//  val `Ryazanskaya oblast'`                        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Ryazanskaya oblast'", "RU-RYA")
//  val `Sakha, Respublika`                          = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Sakha, Respublika", "RU-SA")
//  val `Sakhalinskaya oblast'`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Sakhalinskaya oblast'", "RU-SAK")
//  val `Samarskaya oblast'`                         = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Samarskaya oblast'", "RU-SAM")
//  val `Sankt-Peterburg`                            = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Sankt-Peterburg", "RU-SPE")
//  val `Saratovskaya oblast'`                       = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Saratovskaya oblast'", "RU-SAR")
//  val `Severnaya Osetiya-Alaniya, Respublika`      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Severnaya Osetiya-Alaniya, Respublika", "RU-SE")
//  val `Smolenskaya oblast'`                        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Smolenskaya oblast'", "RU-SMO")
//  val `Stavropol'skiy kray`                        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Stavropol'skiy kray", "RU-STA")
//  val `Sverdlovskaya oblast'`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Sverdlovskaya oblast'", "RU-SVE")
//  val `Tambovskaya oblast'`                        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Tambovskaya oblast'", "RU-TAM")
//  val `Tatarstan, Respublika`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Tatarstan, Respublika", "RU-TA")
//  val `Tomskaya oblast'`                           = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Tomskaya oblast'", "RU-TOM")
//  val `Tul'skaya oblast'`                          = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Tul'skaya oblast'", "RU-TUL")
//  val `Tverskaya oblast'`                          = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Tverskaya oblast'", "RU-TVE")
//  val `Tyumenskaya oblast'`                        = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Tyumenskaya oblast'", "RU-TYU")
//  val `Tyva, Respublika`                           = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Tyva, Respublika", "RU-TY")
//  val `Udmurtskaya Respublika`                     = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Udmurtskaya Respublika", "RU-UD")
//  val `Ul'yanovskaya oblast'`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Ul'yanovskaya oblast'", "RU-ULY")
//  val `Vladimirskaya oblast'`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Vladimirskaya oblast'", "RU-VLA")
//  val `Volgogradskaya oblast'`                     = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Volgogradskaya oblast'", "RU-VGG")
//  val `Vologodskaya oblast'`                       = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Vologodskaya oblast'", "RU-VLG")
//  val `Voronezhskaya oblast'`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Voronezhskaya oblast'", "RU-VOR")
//  val `Yamalo-Nenetskiy avtonomnyy okrug`          = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Yamalo-Nenetskiy avtonomnyy okrug", "RU-YAN")
//  val `Yaroslavskaya oblast'`                      = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Yaroslavskaya oblast'", "RU-YAR")
//  val `Yevreyskaya avtonomnaya oblast'`            = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Yevreyskaya avtonomnaya oblast'", "RU-YEV")
//  val `Zabaykal'skiy kray`                         = new ISOCountrySubdivision(ISOCountry.RUSSIAN_FEDERATION, "Zabaykal'skiy kray", "RU-ZAB")
//  val `Est`                                        = new ISOCountrySubdivision(ISOCountry.RWANDA, "Est", "RW-02")
//  val `Nord`                                       = new ISOCountrySubdivision(ISOCountry.RWANDA, "Nord", "RW-03")
//  val `Ouest`                                      = new ISOCountrySubdivision(ISOCountry.RWANDA, "Ouest", "RW-04")
//  val `Sud`                                        = new ISOCountrySubdivision(ISOCountry.RWANDA, "Sud", "RW-05")
//  val `Ville de Kigali`                            = new ISOCountrySubdivision(ISOCountry.RWANDA, "Ville de Kigali", "RW-01")
//  val `'Asir`                                      = new ISOCountrySubdivision(ISOCountry.SAUDI_ARABIA, "'Asir", "SA-14")
//  val `Al Bahah`                                   = new ISOCountrySubdivision(ISOCountry.SAUDI_ARABIA, "Al Bahah", "SA-11")
//  val `Al Hudud ash Shamaliyah`                    = new ISOCountrySubdivision(ISOCountry.SAUDI_ARABIA, "Al Hudud ash Shamaliyah", "SA-08")
//  val `Al Jawf - Saudi Arabia`                     = new ISOCountrySubdivision(ISOCountry.SAUDI_ARABIA, "Al Jawf", "SA-12")
//  val `Al Madinah al Munawwarah`                   = new ISOCountrySubdivision(ISOCountry.SAUDI_ARABIA, "Al Madinah al Munawwarah", "SA-03")
//  val `Al Qasim`                                   = new ISOCountrySubdivision(ISOCountry.SAUDI_ARABIA, "Al Qasim", "SA-05")
//  val `Ar Riyad`                                   = new ISOCountrySubdivision(ISOCountry.SAUDI_ARABIA, "Ar Riyad", "SA-01")
//  val `Ash Sharqiyah`                              = new ISOCountrySubdivision(ISOCountry.SAUDI_ARABIA, "Ash Sharqiyah", "SA-04")
//  val `Ha'il`                                      = new ISOCountrySubdivision(ISOCountry.SAUDI_ARABIA, "Ha'il", "SA-06")
//  val `Jazan`                                      = new ISOCountrySubdivision(ISOCountry.SAUDI_ARABIA, "Jazan", "SA-09")
//  val `Makkah al Mukarramah`                       = new ISOCountrySubdivision(ISOCountry.SAUDI_ARABIA, "Makkah al Mukarramah", "SA-02")
//  val `Najran`                                     = new ISOCountrySubdivision(ISOCountry.SAUDI_ARABIA, "Najran", "SA-10")
//  val `Tabuk`                                      = new ISOCountrySubdivision(ISOCountry.SAUDI_ARABIA, "Tabuk", "SA-07")
//  val `Central`                                    = new ISOCountrySubdivision(ISOCountry.SOLOMON_ISLANDS, "Central", "SB-CE")
//  val `Guadalcanal`                                = new ISOCountrySubdivision(ISOCountry.SOLOMON_ISLANDS, "Guadalcanal", "SB-GU")
//  val `Isabel`                                     = new ISOCountrySubdivision(ISOCountry.SOLOMON_ISLANDS, "Isabel", "SB-IS")
//  val `Makira`                                     = new ISOCountrySubdivision(ISOCountry.SOLOMON_ISLANDS, "Makira", "SB-MK")
//  val `Malaita`                                    = new ISOCountrySubdivision(ISOCountry.SOLOMON_ISLANDS, "Malaita", "SB-ML")
//  val `Western - Sudan`                            = new ISOCountrySubdivision(ISOCountry.SOLOMON_ISLANDS, "Western", "SB-WE")
//  val `English River`                              = new ISOCountrySubdivision(ISOCountry.SEYCHELLES, "English River", "SC-16")
//  val `Blue Nile`                                  = new ISOCountrySubdivision(ISOCountry.SUDAN, "Blue Nile", "SD-NB")
//  val `Gedaref`                                    = new ISOCountrySubdivision(ISOCountry.SUDAN, "Gedaref", "SD-GD")
//  val `Gezira`                                     = new ISOCountrySubdivision(ISOCountry.SUDAN, "Gezira", "SD-GZ")
//  val `Kassala`                                    = new ISOCountrySubdivision(ISOCountry.SUDAN, "Kassala", "SD-KA")
//  val `Khartoum`                                   = new ISOCountrySubdivision(ISOCountry.SUDAN, "Khartoum", "SD-KH")
//  val `North Darfur`                               = new ISOCountrySubdivision(ISOCountry.SUDAN, "North Darfur", "SD-DN")
//  val `North Kordofan`                             = new ISOCountrySubdivision(ISOCountry.SUDAN, "North Kordofan", "SD-KN")
//  val `Northern - Sudan`                           = new ISOCountrySubdivision(ISOCountry.SUDAN, "Northern", "SD-NO")
//  val `Red Sea`                                    = new ISOCountrySubdivision(ISOCountry.SUDAN, "Red Sea", "SD-RS")
//  val `River Nile`                                 = new ISOCountrySubdivision(ISOCountry.SUDAN, "River Nile", "SD-NR")
//  val `Sennar`                                     = new ISOCountrySubdivision(ISOCountry.SUDAN, "Sennar", "SD-SI")
//  val `South Darfur`                               = new ISOCountrySubdivision(ISOCountry.SUDAN, "South Darfur", "SD-DS")
//  val `South Kordofan`                             = new ISOCountrySubdivision(ISOCountry.SUDAN, "South Kordofan", "SD-KS")
//  val `West Darfur`                                = new ISOCountrySubdivision(ISOCountry.SUDAN, "West Darfur", "SD-DW")
//  val `White Nile`                                 = new ISOCountrySubdivision(ISOCountry.SUDAN, "White Nile", "SD-NW")
//  val `Blekinge Lan`                               = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Blekinge Lan", "SE-K")
//  val `Dalarnas Lan`                               = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Dalarnas Lan", "SE-W")
//  val `Gavleborgs Lan`                             = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Gavleborgs Lan", "SE-X")
//  val `Gotlands Lan`                               = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Gotlands Lan", "SE-I")
//  val `Hallands Lan`                               = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Hallands Lan", "SE-N")
//  val `Jamtlands Lan`                              = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Jamtlands Lan", "SE-Z")
//  val `Jonkopings Lan`                             = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Jonkopings Lan", "SE-F")
//  val `Kalmar Lan`                                 = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Kalmar Lan", "SE-H")
//  val `Kronobergs Lan`                             = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Kronobergs Lan", "SE-G")
//  val `Norrbottens Lan`                            = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Norrbottens Lan", "SE-BD")
//  val `Orebro Lan`                                 = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Orebro Lan", "SE-T")
//  val `Ostergotlands Lan`                          = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Ostergotlands Lan", "SE-E")
//  val `Skane Lan`                                  = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Skane Lan", "SE-M")
//  val `Sodermanlands Lan`                          = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Sodermanlands Lan", "SE-D")
//  val `Stockholms Lan`                             = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Stockholms Lan", "SE-AB")
//  val `Uppsala Lan`                                = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Uppsala Lan", "SE-C")
//  val `Varmlands Lan`                              = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Varmlands Lan", "SE-S")
//  val `Vasterbottens Lan`                          = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Vasterbottens Lan", "SE-AC")
//  val `Vasternorrlands Lan`                        = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Vasternorrlands Lan", "SE-Y")
//  val `Vastmanlands Lan`                           = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Vastmanlands Lan", "SE-U")
//  val `Vastra Gotaland`                            = new ISOCountrySubdivision(ISOCountry.SWEDEN, "Vastra Gotaland", "SE-O")
//  val `Singapore`                                  = new ISOCountrySubdivision(ISOCountry.SINGAPORE, "Singapore", "SG-01")
//  val `Ascension`                                  = new ISOCountrySubdivision(ISOCountry.SAINT_HELENA, "Ascension", "SH-AC")
//  val `Saint Helena`                               = new ISOCountrySubdivision(ISOCountry.SAINT_HELENA, "Saint Helena", "SH-HL")
//  val `Tristan da Cunha`                           = new ISOCountrySubdivision(ISOCountry.SAINT_HELENA, "Tristan da Cunha", "SH-TA")
//  val `Ajdovscina`                                 = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Ajdovscina", "SI-001")
//  val `Bled`                                       = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Bled", "SI-003")
//  val `Bohinj`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Bohinj", "SI-004")
//  val `Borovnica`                                  = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Borovnica", "SI-005")
//  val `Bovec`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Bovec", "SI-006")
//  val `Brezice`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Brezice", "SI-009")
//  val `Brezovica`                                  = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Brezovica", "SI-008")
//  val `Celje`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Celje", "SI-011")
//  val `Cerknica`                                   = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Cerknica", "SI-013")
//  val `Cerkno`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Cerkno", "SI-014")
//  val `Crensovci`                                  = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Crensovci", "SI-015")
//  val `Crnomelj`                                   = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Crnomelj", "SI-017")
//  val `Destrnik`                                   = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Destrnik", "SI-018")
//  val `Divaca`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Divaca", "SI-019")
//  val `Domzale`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Domzale", "SI-023")
//  val `Dravograd`                                  = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Dravograd", "SI-025")
//  val `Gornja Radgona`                             = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Gornja Radgona", "SI-029")
//  val `Grosuplje`                                  = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Grosuplje", "SI-032")
//  val `Hoce-Slivnica`                              = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Hoce-Slivnica", "SI-160")
//  val `Horjul`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Horjul", "SI-162")
//  val `Hrastnik`                                   = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Hrastnik", "SI-034")
//  val `Idrija`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Idrija", "SI-036")
//  val `Ig`                                         = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Ig", "SI-037")
//  val `Ilirska Bistrica`                           = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Ilirska Bistrica", "SI-038")
//  val `Ivancna Gorica`                             = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Ivancna Gorica", "SI-039")
//  val `Izola-Isola`                                = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Izola-Isola", "SI-040")
//  val `Jesenice`                                   = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Jesenice", "SI-041")
//  val `Kamnik`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Kamnik", "SI-043")
//  val `Kanal`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Kanal", "SI-044")
//  val `Kidricevo`                                  = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Kidricevo", "SI-045")
//  val `Kobarid`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Kobarid", "SI-046")
//  val `Kocevje`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Kocevje", "SI-048")
//  val `Koper-Capodistria`                          = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Koper-Capodistria", "SI-050")
//  val `Kranj`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Kranj", "SI-052")
//  val `Kranjska Gora`                              = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Kranjska Gora", "SI-053")
//  val `Krsko`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Krsko", "SI-054")
//  val `Lasko`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Lasko", "SI-057")
//  val `Lenart`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Lenart", "SI-058")
//  val `Lendava`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Lendava", "SI-059")
//  val `Litija`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Litija", "SI-060")
//  val `Ljubljana`                                  = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Ljubljana", "SI-061")
//  val `Ljutomer`                                   = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Ljutomer", "SI-063")
//  val `Log-Dragomer`                               = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Log-Dragomer", "SI-208")
//  val `Logatec`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Logatec", "SI-064")
//  val `Lovrenc na Pohorju`                         = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Lovrenc na Pohorju", "SI-167")
//  val `Maribor`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Maribor", "SI-070")
//  val `Medvode`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Medvode", "SI-071")
//  val `Menges`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Menges", "SI-072")
//  val `Metlika`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Metlika", "SI-073")
//  val `Mezica`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Mezica", "SI-074")
//  val `Miklavz na Dravskem Polju`                  = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Miklavz na Dravskem Polju", "SI-169")
//  val `Miren-Kostanjevica`                         = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Miren-Kostanjevica", "SI-075")
//  val `Mislinja`                                   = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Mislinja", "SI-076")
//  val `Mozirje`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Mozirje", "SI-079")
//  val `Murska Sobota`                              = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Murska Sobota", "SI-080")
//  val `Muta`                                       = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Muta", "SI-081")
//  val `Nova Gorica`                                = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Nova Gorica", "SI-084")
//  val `Novo Mesto`                                 = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Novo Mesto", "SI-085")
//  val `Odranci`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Odranci", "SI-086")
//  val `Oplotnica`                                  = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Oplotnica", "SI-171")
//  val `Ormoz`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Ormoz", "SI-087")
//  val `Piran`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Piran", "SI-090")
//  val `Pivka`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Pivka", "SI-091")
//  val `Poljcane`                                   = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Poljcane", "SI-200")
//  val `Polzela`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Polzela", "SI-173")
//  val `Postojna`                                   = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Postojna", "SI-094")
//  val `Prebold`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Prebold", "SI-174")
//  val `Prevalje`                                   = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Prevalje", "SI-175")
//  val `Ptuj`                                       = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Ptuj", "SI-096")
//  val `Racam`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Racam", "SI-098")
//  val `Radece`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Radece", "SI-099")
//  val `Radenci`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Radenci", "SI-100")
//  val `Radlje ob Dravi`                            = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Radlje ob Dravi", "SI-101")
//  val `Radovljica`                                 = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Radovljica", "SI-102")
//  val `Ravne na Koroskem`                          = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Ravne na Koroskem", "SI-103")
//  val `Ribnica`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Ribnica", "SI-104")
//  val `Rogaska Slatina`                            = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Rogaska Slatina", "SI-106")
//  val `Ruse`                                       = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Ruse", "SI-108")
//  val `Sempeter-Vrtojba`                           = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Sempeter-Vrtojba", "SI-183")
//  val `Sencur`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Sencur", "SI-117")
//  val `Sentilj`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Sentilj", "SI-118")
//  val `Sentjur pri Celju`                          = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Sentjur pri Celju", "SI-120")
//  val `Sevnica`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Sevnica", "SI-110")
//  val `Sezana`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Sezana", "SI-111")
//  val `Skofja Loka`                                = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Skofja Loka", "SI-122")
//  val `Skofljica`                                  = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Skofljica", "SI-123")
//  val `Slovenj Gradec`                             = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Slovenj Gradec", "SI-112")
//  val `Slovenska Bistrica`                         = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Slovenska Bistrica", "SI-113")
//  val `Slovenske Konjice`                          = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Slovenske Konjice", "SI-114")
//  val `Sostanj`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Sostanj", "SI-126")
//  val `Store`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Store", "SI-127")
//  val `Straza`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Straza", "SI-203")
//  val `Tolmin`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Tolmin", "SI-128")
//  val `Trbovlje`                                   = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Trbovlje", "SI-129")
//  val `Trebnje`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Trebnje", "SI-130")
//  val `Trzic`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Trzic", "SI-131")
//  val `Trzin`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Trzin", "SI-186")
//  val `Turnisce`                                   = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Turnisce", "SI-132")
//  val `Velenje`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Velenje", "SI-133")
//  val `Vipava`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Vipava", "SI-136")
//  val `Vodice`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Vodice", "SI-138")
//  val `Vojnik`                                     = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Vojnik", "SI-139")
//  val `Vrhnika`                                    = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Vrhnika", "SI-140")
//  val `Vuzenica`                                   = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Vuzenica", "SI-141")
//  val `Zagorje ob Savi`                            = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Zagorje ob Savi", "SI-142")
//  val `Zalec`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Zalec", "SI-190")
//  val `Zelezniki`                                  = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Zelezniki", "SI-146")
//  val `Ziri`                                       = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Ziri", "SI-147")
//  val `Zrece`                                      = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Zrece", "SI-144")
//  val `Zuzemberk`                                  = new ISOCountrySubdivision(ISOCountry.SLOVENIA, "Zuzemberk", "SI-193")
//  val `Banskobystricky kraj`                       = new ISOCountrySubdivision(ISOCountry.SLOVAKIA, "Banskobystricky kraj", "SK-BC")
//  val `Bratislavsky kraj`                          = new ISOCountrySubdivision(ISOCountry.SLOVAKIA, "Bratislavsky kraj", "SK-BL")
//  val `Kosicky kraj`                               = new ISOCountrySubdivision(ISOCountry.SLOVAKIA, "Kosicky kraj", "SK-KI")
//  val `Nitriansky kraj`                            = new ISOCountrySubdivision(ISOCountry.SLOVAKIA, "Nitriansky kraj", "SK-NI")
//  val `Presovsky kraj`                             = new ISOCountrySubdivision(ISOCountry.SLOVAKIA, "Presovsky kraj", "SK-PV")
//  val `Trenciansky kraj`                           = new ISOCountrySubdivision(ISOCountry.SLOVAKIA, "Trenciansky kraj", "SK-TC")
//  val `Trnavsky kraj`                              = new ISOCountrySubdivision(ISOCountry.SLOVAKIA, "Trnavsky kraj", "SK-TA")
//  val `Zilinsky kraj`                              = new ISOCountrySubdivision(ISOCountry.SLOVAKIA, "Zilinsky kraj", "SK-ZI")
//  val `Eastern Sierra Leone`                       = new ISOCountrySubdivision(ISOCountry.SIERRA_LEONE, "Eastern", "SL-E")
//  val `Northern Sierra Leone`                      = new ISOCountrySubdivision(ISOCountry.SIERRA_LEONE, "Northern", "SL-N")
//  val `Southern Sierra Leone`                      = new ISOCountrySubdivision(ISOCountry.SIERRA_LEONE, "Southern", "SL-S")
//  val `Western Area`                               = new ISOCountrySubdivision(ISOCountry.SIERRA_LEONE, "Western Area", "SL-W")
//  val `Acquaviva`                                  = new ISOCountrySubdivision(ISOCountry.SAN_MARINO, "Acquaviva", "SM-01")
//  val `Chiesanuova`                                = new ISOCountrySubdivision(ISOCountry.SAN_MARINO, "Chiesanuova", "SM-02")
//  val `San Marino`                                 = new ISOCountrySubdivision(ISOCountry.SAN_MARINO, "San Marino", "SM-07")
//  val `Serravalle`                                 = new ISOCountrySubdivision(ISOCountry.SAN_MARINO, "Serravalle", "SM-09")
//  val `Dakar`                                      = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Dakar", "SN-DK")
//  val `Diourbel`                                   = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Diourbel", "SN-DB")
//  val `Fatick`                                     = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Fatick", "SN-FK")
//  val `Kaffrine`                                   = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Kaffrine", "SN-KA")
//  val `Kaolack`                                    = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Kaolack", "SN-KL")
//  val `Kedougou`                                   = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Kedougou", "SN-KE")
//  val `Kolda`                                      = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Kolda", "SN-KD")
//  val `Louga`                                      = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Louga", "SN-LG")
//  val `Matam`                                      = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Matam", "SN-MT")
//  val `Saint-Louis`                                = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Saint-Louis", "SN-SL")
//  val `Sedhiou`                                    = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Sedhiou", "SN-SE")
//  val `Tambacounda`                                = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Tambacounda", "SN-TC")
//  val `Thies`                                      = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Thies", "SN-TH")
//  val `Ziguinchor`                                 = new ISOCountrySubdivision(ISOCountry.SENEGAL, "Ziguinchor", "SN-ZG")
//  val `Awdal`                                      = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Awdal", "SO-AW")
//  val `Bakool`                                     = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Bakool", "SO-BK")
//  val `Banaadir`                                   = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Banaadir", "SO-BN")
//  val `Bari`                                       = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Bari", "SO-BR")
//  val `Bay`                                        = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Bay", "SO-BY")
//  val `Galguduud`                                  = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Galguduud", "SO-GA")
//  val `Gedo`                                       = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Gedo", "SO-GE")
//  val `Hiiraan`                                    = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Hiiraan", "SO-HI")
//  val `Jubbada Dhexe`                              = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Jubbada Dhexe", "SO-JD")
//  val `Jubbada Hoose`                              = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Jubbada Hoose", "SO-JH")
//  val `Mudug`                                      = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Mudug", "SO-MU")
//  val `Nugaal`                                     = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Nugaal", "SO-NU")
//  val `Sanaag`                                     = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Sanaag", "SO-SA")
//  val `Shabeellaha Dhexe`                          = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Shabeellaha Dhexe", "SO-SD")
//  val `Shabeellaha Hoose`                          = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Shabeellaha Hoose", "SO-SH")
//  val `Sool`                                       = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Sool", "SO-SO")
//  val `Togdheer`                                   = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Togdheer", "SO-TO")
//  val `Woqooyi Galbeed`                            = new ISOCountrySubdivision(ISOCountry.SOMALIA, "Woqooyi Galbeed", "SO-WO")
//  val `Brokopondo`                                 = new ISOCountrySubdivision(ISOCountry.SURINAME, "Brokopondo", "SR-BR")
//  val `Commewijne`                                 = new ISOCountrySubdivision(ISOCountry.SURINAME, "Commewijne", "SR-CM")
//  val `Coronie`                                    = new ISOCountrySubdivision(ISOCountry.SURINAME, "Coronie", "SR-CR")
//  val `Marowijne`                                  = new ISOCountrySubdivision(ISOCountry.SURINAME, "Marowijne", "SR-MA")
//  val `Nickerie`                                   = new ISOCountrySubdivision(ISOCountry.SURINAME, "Nickerie", "SR-NI")
//  val `Para`                                       = new ISOCountrySubdivision(ISOCountry.SURINAME, "Para", "SR-PR")
//  val `Paramaribo`                                 = new ISOCountrySubdivision(ISOCountry.SURINAME, "Paramaribo", "SR-PM")
//  val `Saramacca`                                  = new ISOCountrySubdivision(ISOCountry.SURINAME, "Saramacca", "SR-SA")
//  val `Wanica`                                     = new ISOCountrySubdivision(ISOCountry.SURINAME, "Wanica", "SR-WA")
//  val `Central Equatoria`                          = new ISOCountrySubdivision(ISOCountry.SOUTH_SUDAN, "Central Equatoria", "SS-EC")
//  val `Eastern Equatoria`                          = new ISOCountrySubdivision(ISOCountry.SOUTH_SUDAN, "Eastern Equatoria", "SS-EE")
//  val `Jonglei`                                    = new ISOCountrySubdivision(ISOCountry.SOUTH_SUDAN, "Jonglei", "SS-JG")
//  val `Lakes`                                      = new ISOCountrySubdivision(ISOCountry.SOUTH_SUDAN, "Lakes", "SS-LK")
//  val `Northern Bahr el Ghazal`                    = new ISOCountrySubdivision(ISOCountry.SOUTH_SUDAN, "Northern Bahr el Ghazal", "SS-BN")
//  val `Unity`                                      = new ISOCountrySubdivision(ISOCountry.SOUTH_SUDAN, "Unity", "SS-UY")
//  val `Upper Nile`                                 = new ISOCountrySubdivision(ISOCountry.SOUTH_SUDAN, "Upper Nile", "SS-NU")
//  val `Warrap`                                     = new ISOCountrySubdivision(ISOCountry.SOUTH_SUDAN, "Warrap", "SS-WR")
//  val `Western Bahr el Ghazal`                     = new ISOCountrySubdivision(ISOCountry.SOUTH_SUDAN, "Western Bahr el Ghazal", "SS-BW")
//  val `Western Equatoria`                          = new ISOCountrySubdivision(ISOCountry.SOUTH_SUDAN, "Western Equatoria", "SS-EW")
//  val `Principe`                                   = new ISOCountrySubdivision(ISOCountry.SAO_TOME_AND_PRINCIPE, "Principe", "ST-P")
//  val `Sao Tome`                                   = new ISOCountrySubdivision(ISOCountry.SAO_TOME_AND_PRINCIPE, "Sao Tome", "ST-S")
//  val `Ahuachapan`                                 = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "Ahuachapan", "SV-AH")
//  val `Cabanas`                                    = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "Cabanas", "SV-CA")
//  val `Chalatenango`                               = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "Chalatenango", "SV-CH")
//  val `Cuscatlan`                                  = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "Cuscatlan", "SV-CU")
//  val `La Libertad`                                = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "La Libertad", "SV-LI")
//  val `La Paz`                                     = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "La Paz", "SV-PA")
//  val `La Union`                                   = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "La Union", "SV-UN")
//  val `Morazan`                                    = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "Morazan", "SV-MO")
//  val `San Miguel`                                 = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "San Miguel", "SV-SM")
//  val `San Salvador`                               = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "San Salvador", "SV-SS")
//  val `San Vicente`                                = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "San Vicente", "SV-SV")
//  val `Santa Ana`                                  = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "Santa Ana", "SV-SA")
//  val `Sonsonate`                                  = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "Sonsonate", "SV-SO")
//  val `Usulutan`                                   = new ISOCountrySubdivision(ISOCountry.EL_SALVADOR, "Usulutan", "SV-US")
//  val `Al Hasakah`                                 = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "Al Hasakah", "SY-HA")
//  val `Al Ladhiqiyah`                              = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "Al Ladhiqiyah", "SY-LA")
//  val `Al Qunaytirah`                              = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "Al Qunaytirah", "SY-QU")
//  val `Ar Raqqah`                                  = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "Ar Raqqah", "SY-RA")
//  val `As Suwayda'`                                = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "As Suwayda'", "SY-SU")
//  val `Dar'a`                                      = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "Dar'a", "SY-DR")
//  val `Dayr az Zawr`                               = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "Dayr az Zawr", "SY-DY")
//  val `Dimashq`                                    = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "Dimashq", "SY-DI")
//  val `Halab`                                      = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "Halab", "SY-HL")
//  val `Hamah`                                      = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "Hamah", "SY-HM")
//  val `Hims`                                       = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "Hims", "SY-HI")
//  val `Idlib`                                      = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "Idlib", "SY-ID")
//  val `Rif Dimashq`                                = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "Rif Dimashq", "SY-RD")
//  val `Tartus`                                     = new ISOCountrySubdivision(ISOCountry.SYRIAN_ARAB_REPUBLIC, "Tartus", "SY-TA")
//  val `Hhohho`                                     = new ISOCountrySubdivision(ISOCountry.SWAZILAND, "Hhohho", "SZ-HH")
//  val `Lubombo`                                    = new ISOCountrySubdivision(ISOCountry.SWAZILAND, "Lubombo", "SZ-LU")
//  val `Manzini`                                    = new ISOCountrySubdivision(ISOCountry.SWAZILAND, "Manzini", "SZ-MA")
//  val `Shiselweni`                                 = new ISOCountrySubdivision(ISOCountry.SWAZILAND, "Shiselweni", "SZ-SH")
//  val `Bahr el Gazel`                              = new ISOCountrySubdivision(ISOCountry.CHAD, "Bahr el Gazel", "TD-BG")
//  val `Batha`                                      = new ISOCountrySubdivision(ISOCountry.CHAD, "Batha", "TD-BA")
//  val `Borkou`                                     = new ISOCountrySubdivision(ISOCountry.CHAD, "Borkou", "TD-BO")
//  val `Chari-Baguirmi`                             = new ISOCountrySubdivision(ISOCountry.CHAD, "Chari-Baguirmi", "TD-CB")
//  val `Guera`                                      = new ISOCountrySubdivision(ISOCountry.CHAD, "Guera", "TD-GR")
//  val `Hadjer Lamis`                               = new ISOCountrySubdivision(ISOCountry.CHAD, "Hadjer Lamis", "TD-HL")
//  val `Kanem`                                      = new ISOCountrySubdivision(ISOCountry.CHAD, "Kanem", "TD-KA")
//  val `Lac`                                        = new ISOCountrySubdivision(ISOCountry.CHAD, "Lac", "TD-LC")
//  val `Logone-Occidental`                          = new ISOCountrySubdivision(ISOCountry.CHAD, "Logone-Occidental", "TD-LO")
//  val `Logone-Oriental`                            = new ISOCountrySubdivision(ISOCountry.CHAD, "Logone-Oriental", "TD-LR")
//  val `Mandoul`                                    = new ISOCountrySubdivision(ISOCountry.CHAD, "Mandoul", "TD-MA")
//  val `Mayo-Kebbi-Est`                             = new ISOCountrySubdivision(ISOCountry.CHAD, "Mayo-Kebbi-Est", "TD-ME")
//  val `Mayo-Kebbi-Ouest`                           = new ISOCountrySubdivision(ISOCountry.CHAD, "Mayo-Kebbi-Ouest", "TD-MO")
//  val `Moyen-Chari`                                = new ISOCountrySubdivision(ISOCountry.CHAD, "Moyen-Chari", "TD-MC")
//  val `Ouaddai`                                    = new ISOCountrySubdivision(ISOCountry.CHAD, "Ouaddai", "TD-OD")
//  val `Salamat`                                    = new ISOCountrySubdivision(ISOCountry.CHAD, "Salamat", "TD-SA")
//  val `Tandjile`                                   = new ISOCountrySubdivision(ISOCountry.CHAD, "Tandjile", "TD-TA")
//  val `Tibesti`                                    = new ISOCountrySubdivision(ISOCountry.CHAD, "Tibesti", "TD-TI")
//  val `Wadi Fira`                                  = new ISOCountrySubdivision(ISOCountry.CHAD, "Wadi Fira", "TD-WF")
//  val `Centre`                                     = new ISOCountrySubdivision(ISOCountry.TOGO, "Centre", "TG-C")
//  val `Kara`                                       = new ISOCountrySubdivision(ISOCountry.TOGO, "Kara", "TG-K")
//  val `Maritime`                                   = new ISOCountrySubdivision(ISOCountry.TOGO, "Maritime", "TG-M")
//  val `Plateaux`                                   = new ISOCountrySubdivision(ISOCountry.TOGO, "Plateaux", "TG-P")
//  val `Savannes`                                   = new ISOCountrySubdivision(ISOCountry.TOGO, "Savannes", "TG-S")
//  val `Amnat Charoen`                              = new ISOCountrySubdivision(ISOCountry.THAILAND, "Amnat Charoen", "TH-37")
//  val `Ang Thong`                                  = new ISOCountrySubdivision(ISOCountry.THAILAND, "Ang Thong", "TH-15")
//  val `Buri Ram`                                   = new ISOCountrySubdivision(ISOCountry.THAILAND, "Buri Ram", "TH-31")
//  val `Chachoengsao`                               = new ISOCountrySubdivision(ISOCountry.THAILAND, "Chachoengsao", "TH-24")
//  val `Chai Nat`                                   = new ISOCountrySubdivision(ISOCountry.THAILAND, "Chai Nat", "TH-18")
//  val `Chaiyaphum`                                 = new ISOCountrySubdivision(ISOCountry.THAILAND, "Chaiyaphum", "TH-36")
//  val `Chanthaburi`                                = new ISOCountrySubdivision(ISOCountry.THAILAND, "Chanthaburi", "TH-22")
//  val `Chiang Mai`                                 = new ISOCountrySubdivision(ISOCountry.THAILAND, "Chiang Mai", "TH-50")
//  val `Chiang Rai`                                 = new ISOCountrySubdivision(ISOCountry.THAILAND, "Chiang Rai", "TH-57")
//  val `Chon Buri`                                  = new ISOCountrySubdivision(ISOCountry.THAILAND, "Chon Buri", "TH-20")
//  val `Chumphon`                                   = new ISOCountrySubdivision(ISOCountry.THAILAND, "Chumphon", "TH-86")
//  val `Kalasin`                                    = new ISOCountrySubdivision(ISOCountry.THAILAND, "Kalasin", "TH-46")
//  val `Kamphaeng Phet`                             = new ISOCountrySubdivision(ISOCountry.THAILAND, "Kamphaeng Phet", "TH-62")
//  val `Kanchanaburi`                               = new ISOCountrySubdivision(ISOCountry.THAILAND, "Kanchanaburi", "TH-71")
//  val `Khon Kaen`                                  = new ISOCountrySubdivision(ISOCountry.THAILAND, "Khon Kaen", "TH-40")
//  val `Krabi`                                      = new ISOCountrySubdivision(ISOCountry.THAILAND, "Krabi", "TH-81")
//  val `Krung Thep Maha Nakhon`                     = new ISOCountrySubdivision(ISOCountry.THAILAND, "Krung Thep Maha Nakhon", "TH-10")
//  val `Lampang`                                    = new ISOCountrySubdivision(ISOCountry.THAILAND, "Lampang", "TH-52")
//  val `Lamphun`                                    = new ISOCountrySubdivision(ISOCountry.THAILAND, "Lamphun", "TH-51")
//  val `Loei`                                       = new ISOCountrySubdivision(ISOCountry.THAILAND, "Loei", "TH-42")
//  val `Lop Buri`                                   = new ISOCountrySubdivision(ISOCountry.THAILAND, "Lop Buri", "TH-16")
//  val `Mae Hong Son`                               = new ISOCountrySubdivision(ISOCountry.THAILAND, "Mae Hong Son", "TH-58")
//  val `Maha Sarakham`                              = new ISOCountrySubdivision(ISOCountry.THAILAND, "Maha Sarakham", "TH-44")
//  val `Mukdahan`                                   = new ISOCountrySubdivision(ISOCountry.THAILAND, "Mukdahan", "TH-49")
//  val `Nakhon Nayok`                               = new ISOCountrySubdivision(ISOCountry.THAILAND, "Nakhon Nayok", "TH-26")
//  val `Nakhon Pathom`                              = new ISOCountrySubdivision(ISOCountry.THAILAND, "Nakhon Pathom", "TH-73")
//  val `Nakhon Phanom`                              = new ISOCountrySubdivision(ISOCountry.THAILAND, "Nakhon Phanom", "TH-48")
//  val `Nakhon Ratchasima`                          = new ISOCountrySubdivision(ISOCountry.THAILAND, "Nakhon Ratchasima", "TH-30")
//  val `Nakhon Sawan`                               = new ISOCountrySubdivision(ISOCountry.THAILAND, "Nakhon Sawan", "TH-60")
//  val `Nakhon Si Thammarat`                        = new ISOCountrySubdivision(ISOCountry.THAILAND, "Nakhon Si Thammarat", "TH-80")
//  val `Nan`                                        = new ISOCountrySubdivision(ISOCountry.THAILAND, "Nan", "TH-55")
//  val `Narathiwat`                                 = new ISOCountrySubdivision(ISOCountry.THAILAND, "Narathiwat", "TH-96")
//  val `Nong Bua Lam Phu`                           = new ISOCountrySubdivision(ISOCountry.THAILAND, "Nong Bua Lam Phu", "TH-39")
//  val `Nong Khai`                                  = new ISOCountrySubdivision(ISOCountry.THAILAND, "Nong Khai", "TH-43")
//  val `Nonthaburi`                                 = new ISOCountrySubdivision(ISOCountry.THAILAND, "Nonthaburi", "TH-12")
//  val `Pathum Thani`                               = new ISOCountrySubdivision(ISOCountry.THAILAND, "Pathum Thani", "TH-13")
//  val `Pattani`                                    = new ISOCountrySubdivision(ISOCountry.THAILAND, "Pattani", "TH-94")
//  val `Phangnga`                                   = new ISOCountrySubdivision(ISOCountry.THAILAND, "Phangnga", "TH-82")
//  val `Phatthalung`                                = new ISOCountrySubdivision(ISOCountry.THAILAND, "Phatthalung", "TH-93")
//  val `Phayao`                                     = new ISOCountrySubdivision(ISOCountry.THAILAND, "Phayao", "TH-56")
//  val `Phetchabun`                                 = new ISOCountrySubdivision(ISOCountry.THAILAND, "Phetchabun", "TH-67")
//  val `Phetchaburi`                                = new ISOCountrySubdivision(ISOCountry.THAILAND, "Phetchaburi", "TH-76")
//  val `Phichit`                                    = new ISOCountrySubdivision(ISOCountry.THAILAND, "Phichit", "TH-66")
//  val `Phitsanulok`                                = new ISOCountrySubdivision(ISOCountry.THAILAND, "Phitsanulok", "TH-65")
//  val `Phra Nakhon Si Ayutthaya`                   = new ISOCountrySubdivision(ISOCountry.THAILAND, "Phra Nakhon Si Ayutthaya", "TH-14")
//  val `Phrae`                                      = new ISOCountrySubdivision(ISOCountry.THAILAND, "Phrae", "TH-54")
//  val `Phuket`                                     = new ISOCountrySubdivision(ISOCountry.THAILAND, "Phuket", "TH-83")
//  val `Prachin Buri`                               = new ISOCountrySubdivision(ISOCountry.THAILAND, "Prachin Buri", "TH-25")
//  val `Prachuap Khiri Khan`                        = new ISOCountrySubdivision(ISOCountry.THAILAND, "Prachuap Khiri Khan", "TH-77")
//  val `Ranong`                                     = new ISOCountrySubdivision(ISOCountry.THAILAND, "Ranong", "TH-85")
//  val `Ratchaburi`                                 = new ISOCountrySubdivision(ISOCountry.THAILAND, "Ratchaburi", "TH-70")
//  val `Rayong`                                     = new ISOCountrySubdivision(ISOCountry.THAILAND, "Rayong", "TH-21")
//  val `Roi Et`                                     = new ISOCountrySubdivision(ISOCountry.THAILAND, "Roi Et", "TH-45")
//  val `Sa Kaeo`                                    = new ISOCountrySubdivision(ISOCountry.THAILAND, "Sa Kaeo", "TH-27")
//  val `Sakon Nakhon`                               = new ISOCountrySubdivision(ISOCountry.THAILAND, "Sakon Nakhon", "TH-47")
//  val `Samut Prakan`                               = new ISOCountrySubdivision(ISOCountry.THAILAND, "Samut Prakan", "TH-11")
//  val `Samut Sakhon`                               = new ISOCountrySubdivision(ISOCountry.THAILAND, "Samut Sakhon", "TH-74")
//  val `Samut Songkhram`                            = new ISOCountrySubdivision(ISOCountry.THAILAND, "Samut Songkhram", "TH-75")
//  val `Saraburi`                                   = new ISOCountrySubdivision(ISOCountry.THAILAND, "Saraburi", "TH-19")
//  val `Satun`                                      = new ISOCountrySubdivision(ISOCountry.THAILAND, "Satun", "TH-91")
//  val `Si Sa Ket`                                  = new ISOCountrySubdivision(ISOCountry.THAILAND, "Si Sa Ket", "TH-33")
//  val `Sing Buri`                                  = new ISOCountrySubdivision(ISOCountry.THAILAND, "Sing Buri", "TH-17")
//  val `Songkhla`                                   = new ISOCountrySubdivision(ISOCountry.THAILAND, "Songkhla", "TH-90")
//  val `Sukhothai`                                  = new ISOCountrySubdivision(ISOCountry.THAILAND, "Sukhothai", "TH-64")
//  val `Suphan Buri`                                = new ISOCountrySubdivision(ISOCountry.THAILAND, "Suphan Buri", "TH-72")
//  val `Surat Thani`                                = new ISOCountrySubdivision(ISOCountry.THAILAND, "Surat Thani", "TH-84")
//  val `Surin`                                      = new ISOCountrySubdivision(ISOCountry.THAILAND, "Surin", "TH-32")
//  val `Tak`                                        = new ISOCountrySubdivision(ISOCountry.THAILAND, "Tak", "TH-63")
//  val `Trang`                                      = new ISOCountrySubdivision(ISOCountry.THAILAND, "Trang", "TH-92")
//  val `Trat`                                       = new ISOCountrySubdivision(ISOCountry.THAILAND, "Trat", "TH-23")
//  val `Ubon Ratchathani`                           = new ISOCountrySubdivision(ISOCountry.THAILAND, "Ubon Ratchathani", "TH-34")
//  val `Udon Thani`                                 = new ISOCountrySubdivision(ISOCountry.THAILAND, "Udon Thani", "TH-41")
//  val `Uthai Thani`                                = new ISOCountrySubdivision(ISOCountry.THAILAND, "Uthai Thani", "TH-61")
//  val `Uttaradit`                                  = new ISOCountrySubdivision(ISOCountry.THAILAND, "Uttaradit", "TH-53")
//  val `Yala`                                       = new ISOCountrySubdivision(ISOCountry.THAILAND, "Yala", "TH-95")
//  val `Yasothon`                                   = new ISOCountrySubdivision(ISOCountry.THAILAND, "Yasothon", "TH-35")
//  val `Khatlon`                                    = new ISOCountrySubdivision(ISOCountry.TAJIKISTAN, "Khatlon", "TJ-KT")
//  val `Kuhistoni Badakhshon`                       = new ISOCountrySubdivision(ISOCountry.TAJIKISTAN, "Kuhistoni Badakhshon", "TJ-GB")
//  val `Regions of Republican Subordination`        = new ISOCountrySubdivision(ISOCountry.TAJIKISTAN, "Regions of Republican Subordination", "TJ-RR")
//  val `Sughd`                                      = new ISOCountrySubdivision(ISOCountry.TAJIKISTAN, "Sughd", "TJ-SU")
//  val `Tajikistan`                                 = new ISOCountrySubdivision(ISOCountry.TAJIKISTAN, "Tajikistan", "TJ")
//  val `Dili`                                       = new ISOCountrySubdivision(ISOCountry.TIMOR_LESTE, "Dili", "TL-DI")
//  val `Ahal`                                       = new ISOCountrySubdivision(ISOCountry.TURKMENISTAN, "Ahal", "TM-A")
//  val `Balkan`                                     = new ISOCountrySubdivision(ISOCountry.TURKMENISTAN, "Balkan", "TM-B")
//  val `Dashoguz`                                   = new ISOCountrySubdivision(ISOCountry.TURKMENISTAN, "Dashoguz", "TM-D")
//  val `Lebap`                                      = new ISOCountrySubdivision(ISOCountry.TURKMENISTAN, "Lebap", "TM-L")
//  val `Mary`                                       = new ISOCountrySubdivision(ISOCountry.TURKMENISTAN, "Mary", "TM-M")
//  val `Aiana`                                      = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Aiana", "TN-12")
//  val `Al Mahdia`                                  = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Al Mahdia", "TN-53")
//  val `Al Munastir`                                = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Al Munastir", "TN-52")
//  val `Bajah`                                      = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Bajah", "TN-31")
//  val `Ben Arous`                                  = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Ben Arous", "TN-13")
//  val `Bizerte`                                    = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Bizerte", "TN-23")
//  val `El Kef`                                     = new ISOCountrySubdivision(ISOCountry.TUNISIA, "El Kef", "TN-33")
//  val `Gabes`                                      = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Gabes", "TN-81")
//  val `Gafsa`                                      = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Gafsa", "TN-71")
//  val `Jendouba`                                   = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Jendouba", "TN-32")
//  val `Kairouan`                                   = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Kairouan", "TN-41")
//  val `Kasserine`                                  = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Kasserine", "TN-42")
//  val `Kebili`                                     = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Kebili", "TN-73")
//  val `Madanin`                                    = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Madanin", "TN-82")
//  val `Manouba`                                    = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Manouba", "TN-14")
//  val `Nabeul`                                     = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Nabeul", "TN-21")
//  val `Sfax`                                       = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Sfax", "TN-61")
//  val `Sidi Bou Zid`                               = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Sidi Bou Zid", "TN-43")
//  val `Siliana`                                    = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Siliana", "TN-34")
//  val `Sousse`                                     = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Sousse", "TN-51")
//  val `Tataouine`                                  = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Tataouine", "TN-83")
//  val `Tozeur`                                     = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Tozeur", "TN-72")
//  val `Tunis`                                      = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Tunis", "TN-11")
//  val `Zaghouan`                                   = new ISOCountrySubdivision(ISOCountry.TUNISIA, "Zaghouan", "TN-22")
//  val `Ha'apai`                                    = new ISOCountrySubdivision(ISOCountry.TONGA, "Ha'apai", "TO-02")
//  val `Tongatapu`                                  = new ISOCountrySubdivision(ISOCountry.TONGA, "Tongatapu", "TO-04")
//  val `Vava'u`                                     = new ISOCountrySubdivision(ISOCountry.TONGA, "Vava'u", "TO-05")
//  val `Adana`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Adana", "TR-01")
//  val `Adiyaman`                                   = new ISOCountrySubdivision(ISOCountry.TURKEY, "Adiyaman", "TR-02")
//  val `Afyonkarahisar`                             = new ISOCountrySubdivision(ISOCountry.TURKEY, "Afyonkarahisar", "TR-03")
//  val `Agri`                                       = new ISOCountrySubdivision(ISOCountry.TURKEY, "Agri", "TR-04")
//  val `Aksaray`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Aksaray", "TR-68")
//  val `Amasya`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Amasya", "TR-05")
//  val `Ankara`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Ankara", "TR-06")
//  val `Antalya`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Antalya", "TR-07")
//  val `Ardahan`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Ardahan", "TR-75")
//  val `Artvin`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Artvin", "TR-08")
//  val `Aydin`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Aydin", "TR-09")
//  val `Balikesir`                                  = new ISOCountrySubdivision(ISOCountry.TURKEY, "Balikesir", "TR-10")
//  val `Bartin`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Bartin", "TR-74")
//  val `Batman`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Batman", "TR-72")
//  val `Bayburt`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Bayburt", "TR-69")
//  val `Bilecik`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Bilecik", "TR-11")
//  val `Bingol`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Bingol", "TR-12")
//  val `Bitlis`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Bitlis", "TR-13")
//  val `Bolu`                                       = new ISOCountrySubdivision(ISOCountry.TURKEY, "Bolu", "TR-14")
//  val `Burdur`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Burdur", "TR-15")
//  val `Bursa`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Bursa", "TR-16")
//  val `Canakkale`                                  = new ISOCountrySubdivision(ISOCountry.TURKEY, "Canakkale", "TR-17")
//  val `Cankiri`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Cankiri", "TR-18")
//  val `Corum`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Corum", "TR-19")
//  val `Denizli`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Denizli", "TR-20")
//  val `Diyarbakir`                                 = new ISOCountrySubdivision(ISOCountry.TURKEY, "Diyarbakir", "TR-21")
//  val `Duzce`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Duzce", "TR-81")
//  val `Edirne`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Edirne", "TR-22")
//  val `Elazig`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Elazig", "TR-23")
//  val `Erzincan`                                   = new ISOCountrySubdivision(ISOCountry.TURKEY, "Erzincan", "TR-24")
//  val `Erzurum`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Erzurum", "TR-25")
//  val `Eskisehir`                                  = new ISOCountrySubdivision(ISOCountry.TURKEY, "Eskisehir", "TR-26")
//  val `Gaziantep`                                  = new ISOCountrySubdivision(ISOCountry.TURKEY, "Gaziantep", "TR-27")
//  val `Giresun`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Giresun", "TR-28")
//  val `Gumushane`                                  = new ISOCountrySubdivision(ISOCountry.TURKEY, "Gumushane", "TR-29")
//  val `Hakkari`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Hakkari", "TR-30")
//  val `Hatay`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Hatay", "TR-31")
//  val `Igdir`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Igdir", "TR-76")
//  val `Isparta`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Isparta", "TR-32")
//  val `Istanbul`                                   = new ISOCountrySubdivision(ISOCountry.TURKEY, "Istanbul", "TR-34")
//  val `Izmir`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Izmir", "TR-35")
//  val `Kahramanmaras`                              = new ISOCountrySubdivision(ISOCountry.TURKEY, "Kahramanmaras", "TR-46")
//  val `Karabuk`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Karabuk", "TR-78")
//  val `Karaman`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Karaman", "TR-70")
//  val `Kars`                                       = new ISOCountrySubdivision(ISOCountry.TURKEY, "Kars", "TR-36")
//  val `Kastamonu`                                  = new ISOCountrySubdivision(ISOCountry.TURKEY, "Kastamonu", "TR-37")
//  val `Kayseri`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Kayseri", "TR-38")
//  val `Kilis`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Kilis", "TR-79")
//  val `Kirikkale`                                  = new ISOCountrySubdivision(ISOCountry.TURKEY, "Kirikkale", "TR-71")
//  val `Kirklareli`                                 = new ISOCountrySubdivision(ISOCountry.TURKEY, "Kirklareli", "TR-39")
//  val `Kirsehir`                                   = new ISOCountrySubdivision(ISOCountry.TURKEY, "Kirsehir", "TR-40")
//  val `Kocaeli`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Kocaeli", "TR-41")
//  val `Konya`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Konya", "TR-42")
//  val `Kutahya`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Kutahya", "TR-43")
//  val `Malatya`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Malatya", "TR-44")
//  val `Manisa`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Manisa", "TR-45")
//  val `Mardin`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Mardin", "TR-47")
//  val `Mersin`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Mersin", "TR-33")
//  val `Mugla`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Mugla", "TR-48")
//  val `Mus`                                        = new ISOCountrySubdivision(ISOCountry.TURKEY, "Mus", "TR-49")
//  val `Nevsehir`                                   = new ISOCountrySubdivision(ISOCountry.TURKEY, "Nevsehir", "TR-50")
//  val `Nigde`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Nigde", "TR-51")
//  val `Ordu`                                       = new ISOCountrySubdivision(ISOCountry.TURKEY, "Ordu", "TR-52")
//  val `Osmaniye`                                   = new ISOCountrySubdivision(ISOCountry.TURKEY, "Osmaniye", "TR-80")
//  val `Rize`                                       = new ISOCountrySubdivision(ISOCountry.TURKEY, "Rize", "TR-53")
//  val `Sakarya`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Sakarya", "TR-54")
//  val `Samsun`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Samsun", "TR-55")
//  val `Sanliurfa`                                  = new ISOCountrySubdivision(ISOCountry.TURKEY, "Sanliurfa", "TR-63")
//  val `Siirt`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Siirt", "TR-56")
//  val `Sinop`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Sinop", "TR-57")
//  val `Sirnak`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Sirnak", "TR-73")
//  val `Sivas`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Sivas", "TR-58")
//  val `Tekirdag`                                   = new ISOCountrySubdivision(ISOCountry.TURKEY, "Tekirdag", "TR-59")
//  val `Tokat`                                      = new ISOCountrySubdivision(ISOCountry.TURKEY, "Tokat", "TR-60")
//  val `Trabzon`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Trabzon", "TR-61")
//  val `Tunceli`                                    = new ISOCountrySubdivision(ISOCountry.TURKEY, "Tunceli", "TR-62")
//  val `Usak`                                       = new ISOCountrySubdivision(ISOCountry.TURKEY, "Usak", "TR-64")
//  val `Van`                                        = new ISOCountrySubdivision(ISOCountry.TURKEY, "Van", "TR-65")
//  val `Yalova`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Yalova", "TR-77")
//  val `Yozgat`                                     = new ISOCountrySubdivision(ISOCountry.TURKEY, "Yozgat", "TR-66")
//  val `Zonguldak`                                  = new ISOCountrySubdivision(ISOCountry.TURKEY, "Zonguldak", "TR-67")
//  val `Arima`                                      = new ISOCountrySubdivision(ISOCountry.TRINIDAD_AND_TOBAGO, "Arima", "TT-ARI")
//  val `Caroni`                                     = new ISOCountrySubdivision(ISOCountry.TRINIDAD_AND_TOBAGO, "Caroni", "-")
//  val `Mayaro`                                     = new ISOCountrySubdivision(ISOCountry.TRINIDAD_AND_TOBAGO, "Mayaro", "TT-MRC")
//  val `Port-of-Spain`                              = new ISOCountrySubdivision(ISOCountry.TRINIDAD_AND_TOBAGO, "Port-of-Spain", "TT-POS")
//  val `Saint Andrew - Trinidad and Tobago`         = new ISOCountrySubdivision(ISOCountry.TRINIDAD_AND_TOBAGO, "Saint Andrew", "DM-02")
//  val `Saint George - Trinidad and Tobago`         = new ISOCountrySubdivision(ISOCountry.TRINIDAD_AND_TOBAGO, "Saint George", "DM-04")
//  val `San Fernando`                               = new ISOCountrySubdivision(ISOCountry.TRINIDAD_AND_TOBAGO, "San Fernando", "TT-SFO")
//  val `Tobago`                                     = new ISOCountrySubdivision(ISOCountry.TRINIDAD_AND_TOBAGO, "Tobago", "TT-TOB")
//  val `Trinidad and Tobago`                        = new ISOCountrySubdivision(ISOCountry.TRINIDAD_AND_TOBAGO, "Trinidad and Tobago", "TT-TOB")
//  val `Victoria`                                   = new ISOCountrySubdivision(ISOCountry.TRINIDAD_AND_TOBAGO, "Victoria", "AU-VIC")
//  val `Tuvalu`                                     = new ISOCountrySubdivision(ISOCountry.TUVALU, "Tuvalu", "TV")
//  val `Fu-chien`                                   = new ISOCountrySubdivision(ISOCountry.TAIWAN, "Fu-chien", "-")
//  val `Kao-hsiung`                                 = new ISOCountrySubdivision(ISOCountry.TAIWAN, "Kao-hsiung", "TW-KHH")
//  val `T'ai-pei`                                   = new ISOCountrySubdivision(ISOCountry.TAIWAN, "T'ai-pei", "TW-TPE")
//  val `T'ai-wan`                                   = new ISOCountrySubdivision(ISOCountry.TAIWAN, "T'ai-wan", "TW")
//  val `Arusha`                                     = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Arusha", "TZ-01")
//  val `Dar es Salaam`                              = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Dar es Salaam", "TZ-02")
//  val `Dodoma`                                     = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Dodoma", "TZ-03")
//  val `Iringa`                                     = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Iringa", "TZ-04")
//  val `Kagera`                                     = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Kagera", "TZ-05")
//  val `Kaskazini Pemba`                            = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Kaskazini Pemba", "TZ-06")
//  val `Kaskazini Unguja`                           = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Kaskazini Unguja", "TZ-07")
//  val `Kigoma`                                     = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Kigoma", "TZ-08")
//  val `Kilimanjaro`                                = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Kilimanjaro", "TZ-09")
//  val `Kusini Pemba`                               = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Kusini Pemba", "TZ-10")
//  val `Kusini Unguja`                              = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Kusini Unguja", "TZ-11")
//  val `Lindi`                                      = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Lindi", "TZ-12")
//  val `Manyara`                                    = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Manyara", "TZ-26")
//  val `Mara`                                       = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Mara", "TZ-13")
//  val `Mbeya`                                      = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Mbeya", "TZ-14")
//  val `Mjini Magharibi`                            = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Mjini Magharibi", "TZ-15")
//  val `Morogoro`                                   = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Morogoro", "TZ-16")
//  val `Mtwara`                                     = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Mtwara", "TZ-17")
//  val `Mwanza - Tanzania`                          = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Mwanza", "TZ-18")
//  val `Pwani`                                      = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Pwani", "TZ-19")
//  val `Rukwa`                                      = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Rukwa", "TZ-20")
//  val `Ruvuma`                                     = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Ruvuma", "TZ-21")
//  val `Shinyanga`                                  = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Shinyanga", "TZ-22")
//  val `Singida`                                    = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Singida", "TZ-23")
//  val `Tabora`                                     = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Tabora", "TZ-24")
//  val `Tanga`                                      = new ISOCountrySubdivision(ISOCountry.TANZANIA, "Tanga", "TZ-25")
//  val `Avtonomna Respublika Krym`                  = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Avtonomna Respublika Krym", "UA-43")
//  val `Cherkas'ka Oblast'`                         = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Cherkas'ka Oblast'", "UA-71")
//  val `Chernihivs'ka Oblast'`                      = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Chernihivs'ka Oblast'", "UA-74")
//  val `Chernivets'ka Oblast'`                      = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Chernivets'ka Oblast'", "UA-77")
//  val `Dnipropetrovs'ka Oblast'`                   = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Dnipropetrovs'ka Oblast'", "UA-12")
//  val `Donets'ka Oblast'`                          = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Donets'ka Oblast'", "UA-14")
//  val `Ivano-Frankivs'ka Oblast'`                  = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Ivano-Frankivs'ka Oblast'", "UA-26")
//  val `Kharkivs'ka Oblast'`                        = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Kharkivs'ka Oblast'", "UA-63")
//  val `Khersons'ka Oblast'`                        = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Khersons'ka Oblast'", "UA-65")
//  val `Khmel'nyts'ka Oblast'`                      = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Khmel'nyts'ka Oblast'", "UA-68")
//  val `Kirovohrads'ka Oblast'`                     = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Kirovohrads'ka Oblast'", "UA-35")
//  val `Kyiv`                                       = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Kyiv", "UA-30")
//  val `Kyivs'ka Oblast'`                           = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Kyivs'ka Oblast'", "UA-32")
//  val `L'vivs'ka Oblast'`                          = new ISOCountrySubdivision(ISOCountry.UKRAINE, "L'vivs'ka Oblast'", "UA-46")
//  val `Luhans'ka Oblast'`                          = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Luhans'ka Oblast'", "UA-09")
//  val `Mykolaivs'ka Oblast'`                       = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Mykolaivs'ka Oblast'", "UA-48")
//  val `Odes'ka Oblast'`                            = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Odes'ka Oblast'", "UA-51")
//  val `Poltavs'ka Oblast'`                         = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Poltavs'ka Oblast'", "UA-53")
//  val `Rivnens'ka Oblast'`                         = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Rivnens'ka Oblast'", "UA-56")
//  val `Sevastopol'`                                = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Sevastopol'", "UA-40")
//  val `Sums'ka Oblast'`                            = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Sums'ka Oblast'", "UA-59")
//  val `Ternopil's'ka Oblast'`                      = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Ternopil's'ka Oblast'", "UA-61")
//  val `Vinnyts'ka Oblast'`                         = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Vinnyts'ka Oblast'", "UA-05")
//  val `Volyns'ka Oblast'`                          = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Volyns'ka Oblast'", "UA-07")
//  val `Zakarpats'ka Oblast'`                       = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Zakarpats'ka Oblast'", "UA-21")
//  val `Zaporiz'ka Oblast'`                         = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Zaporiz'ka Oblast'", "UA-23")
//  val `Zhytomyrs'ka Oblast'`                       = new ISOCountrySubdivision(ISOCountry.UKRAINE, "Zhytomyrs'ka Oblast'", "UA-18")
//  val `Abim`                                       = new ISOCountrySubdivision(ISOCountry.UGANDA, "Abim", "UG-317")
//  val `Adjumani`                                   = new ISOCountrySubdivision(ISOCountry.UGANDA, "Adjumani", "UG-301")
//  val `Agago`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Agago", "UG-322")
//  val `Alebtong`                                   = new ISOCountrySubdivision(ISOCountry.UGANDA, "Alebtong", "UG-323")
//  val `Amolatar`                                   = new ISOCountrySubdivision(ISOCountry.UGANDA, "Amolatar", "UG-314")
//  val `Amudat`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Amudat", "UG-324")
//  val `Amuria`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Amuria", "UG-216")
//  val `Amuru`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Amuru", "UG-319")
//  val `Apac`                                       = new ISOCountrySubdivision(ISOCountry.UGANDA, "Apac", "UG-302")
//  val `Arua`                                       = new ISOCountrySubdivision(ISOCountry.UGANDA, "Arua", "UG-303")
//  val `Budaka`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Budaka", "UG-217")
//  val `Bududa`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Bududa", "UG-223")
//  val `Bugiri`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Bugiri", "UG-201")
//  val `Buikwe`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Buikwe", "UG-117")
//  val `Bukedea`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Bukedea", "UG-224")
//  val `Bukomansibi`                                = new ISOCountrySubdivision(ISOCountry.UGANDA, "Bukomansibi", "UG-118")
//  val `Bukwa`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Bukwa", "UG-218")
//  val `Bulambuli`                                  = new ISOCountrySubdivision(ISOCountry.UGANDA, "Bulambuli", "UG-225")
//  val `Buliisa`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Buliisa", "UG-419")
//  val `Bundibugyo`                                 = new ISOCountrySubdivision(ISOCountry.UGANDA, "Bundibugyo", "UG-401")
//  val `Bushenyi`                                   = new ISOCountrySubdivision(ISOCountry.UGANDA, "Bushenyi", "UG-402")
//  val `Busia`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Busia", "UG-202")
//  val `Butaleja`                                   = new ISOCountrySubdivision(ISOCountry.UGANDA, "Butaleja", "UG-219")
//  val `Buvuma`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Buvuma", "UG-120")
//  val `Buyende`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Buyende", "UG-226")
//  val `Dokolo`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Dokolo", "UG-318")
//  val `Gomba`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Gomba", "UG-121")
//  val `Gulu`                                       = new ISOCountrySubdivision(ISOCountry.UGANDA, "Gulu", "UG-304")
//  val `Hoima`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Hoima", "UG-403")
//  val `Iganga`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Iganga", "UG-203")
//  val `Isingiro`                                   = new ISOCountrySubdivision(ISOCountry.UGANDA, "Isingiro", "UG-417")
//  val `Jinja`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Jinja", "UG-204")
//  val `Kaabong`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kaabong", "UG-315")
//  val `Kabale`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kabale", "UG-404")
//  val `Kabarole`                                   = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kabarole", "UG-405")
//  val `Kaberamaido`                                = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kaberamaido", "UG-213")
//  val `Kalangala`                                  = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kalangala", "UG-101")
//  val `Kaliro`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kaliro", "UG-220")
//  val `Kampala`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kampala", "UG-102")
//  val `Kamuli`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kamuli", "UG-205")
//  val `Kamwenge`                                   = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kamwenge", "UG-413")
//  val `Kanungu`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kanungu", "UG-414")
//  val `Kapchorwa`                                  = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kapchorwa", "UG-206")
//  val `Kasese`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kasese", "UG-406")
//  val `Katakwi`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Katakwi", "UG-207")
//  val `Kayunga`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kayunga", "UG-112")
//  val `Kibaale`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kibaale", "UG-407")
//  val `Kiboga`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kiboga", "UG-103")
//  val `Kibuku`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kibuku", "UG-227")
//  val `Kiryandongo`                                = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kiryandongo", "UG-420")
//  val `Kisoro`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kisoro", "UG-408")
//  val `Kitgum`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kitgum", "UG-305")
//  val `Koboko`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Koboko", "UG-316")
//  val `Kole`                                       = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kole", "UG-326")
//  val `Kotido`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kotido", "UG-306")
//  val `Kumi`                                       = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kumi", "UG-208")
//  val `Kween`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kween", "UG-228")
//  val `Kyankwanzi`                                 = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kyankwanzi", "UG-123")
//  val `Kyegegwa`                                   = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kyegegwa", "UG-421")
//  val `Kyenjojo`                                   = new ISOCountrySubdivision(ISOCountry.UGANDA, "Kyenjojo", "UG-415")
//  val `Lira`                                       = new ISOCountrySubdivision(ISOCountry.UGANDA, "Lira", "UG-307")
//  val `Luuka`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Luuka", "UG-229")
//  val `Luwero`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Luwero", "UG-104")
//  val `Lwengo`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Lwengo", "UG-124")
//  val `Lyantonde`                                  = new ISOCountrySubdivision(ISOCountry.UGANDA, "Lyantonde", "UG-116")
//  val `Manafwa`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Manafwa", "UG-221")
//  val `Maracha`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Maracha", "UG-320")
//  val `Masaka`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Masaka", "UG-105")
//  val `Masindi`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Masindi", "UG-409")
//  val `Mayuge`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Mayuge", "UG-214")
//  val `Mbale`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Mbale", "UG-209")
//  val `Mbarara`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Mbarara", "UG-410")
//  val `Mitooma`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Mitooma", "UG-422")
//  val `Mityana`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Mityana", "UG-114")
//  val `Moroto`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Moroto", "UG-308")
//  val `Moyo`                                       = new ISOCountrySubdivision(ISOCountry.UGANDA, "Moyo", "UG-309")
//  val `Mpigi`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Mpigi", "UG-106")
//  val `Mubende`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Mubende", "UG-107")
//  val `Mukono`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Mukono", "UG-108")
//  val `Nakapiripirit`                              = new ISOCountrySubdivision(ISOCountry.UGANDA, "Nakapiripirit", "UG-311")
//  val `Nakaseke`                                   = new ISOCountrySubdivision(ISOCountry.UGANDA, "Nakaseke", "UG-115")
//  val `Nakasongola`                                = new ISOCountrySubdivision(ISOCountry.UGANDA, "Nakasongola", "UG-109")
//  val `Namayingo`                                  = new ISOCountrySubdivision(ISOCountry.UGANDA, "Namayingo", "UG-230")
//  val `Namutumba`                                  = new ISOCountrySubdivision(ISOCountry.UGANDA, "Namutumba", "UG-222")
//  val `Napak`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Napak", "UG-328")
//  val `Nebbi`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Nebbi", "UG-310")
//  val `Ngora`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Ngora", "UG-231")
//  val `Ntoroko`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Ntoroko", "UG-423")
//  val `Ntungamo`                                   = new ISOCountrySubdivision(ISOCountry.UGANDA, "Ntungamo", "UG-411")
//  val `Otuke`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Otuke", "UG-330")
//  val `Oyam`                                       = new ISOCountrySubdivision(ISOCountry.UGANDA, "Oyam", "UG-321")
//  val `Pader`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Pader", "UG-312")
//  val `Pallisa`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Pallisa", "UG-210")
//  val `Rakai`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Rakai", "UG-110")
//  val `Rubirizi`                                   = new ISOCountrySubdivision(ISOCountry.UGANDA, "Rubirizi", "UG-424")
//  val `Rukungiri`                                  = new ISOCountrySubdivision(ISOCountry.UGANDA, "Rukungiri", "UG-412")
//  val `Sembabule`                                  = new ISOCountrySubdivision(ISOCountry.UGANDA, "Sembabule", "UG-111")
//  val `Serere`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Serere", "UG-232")
//  val `Sheema`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Sheema", "UG-425")
//  val `Sironko`                                    = new ISOCountrySubdivision(ISOCountry.UGANDA, "Sironko", "UG-215")
//  val `Soroti`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Soroti", "UG-211")
//  val `Tororo`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Tororo", "UG-212")
//  val `Wakiso`                                     = new ISOCountrySubdivision(ISOCountry.UGANDA, "Wakiso", "UG-113")
//  val `Yumbe`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Yumbe", "UG-313")
//  val `Zombo`                                      = new ISOCountrySubdivision(ISOCountry.UGANDA, "Zombo", "UG-331")
//  val `Palmyra Atoll`                              = new ISOCountrySubdivision(ISOCountry.UNITED_STATES_MINOR_OUTLYING_ISLANDS, "Palmyra Atoll", "UM-95")
//  val `Alabama`                                    = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Alabama", "US-AL")
//  val `Alaska`                                     = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Alaska", "US-AK")
//  val `Arizona`                                    = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Arizona", "US-AZ")
//  val `Arkansas`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Arkansas", "US-AR")
//  val `California`                                 = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "California", "US-CA")
//  val `Colorado`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Colorado", "US-CO")
//  val `Connecticut`                                = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Connecticut", "US-CT")
//  val `Delaware`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Delaware", "US-DE")
//  val `District Of Columbia`                       = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "District Of Columbia", "US-DC")
//  val `Florida`                                    = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Florida", "US-FL")
//  val `Georgia`                                    = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Georgia", "US-GA")
//  val `Hawaii`                                     = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Hawaii", "US-HI")
//  val `Idaho`                                      = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Idaho", "US-ID")
//  val `Illinois`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Illinois", "US-IL")
//  val `Indiana`                                    = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Indiana", "US-IN")
//  val `Iowa`                                       = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Iowa", "US-IA")
//  val `Kansas`                                     = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Kansas", "US-KS")
//  val `Kentucky`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Kentucky", "US-KY")
//  val `Louisiana`                                  = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Louisiana", "US-LA")
//  val `Maine`                                      = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Maine", "US-ME")
//  val `Maryland`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Maryland", "US-MD")
//  val `Massachusetts`                              = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Massachusetts", "US-MA")
//  val `Michigan`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Michigan", "US-MI")
//  val `Minnesota`                                  = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Minnesota", "US-MN")
//  val `Mississippi`                                = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Mississippi", "US-MS")
//  val `Missouri`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Missouri", "US-MO")
//  val `Montana`                                    = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Montana", "US-MT")
//  val `Nebraska`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Nebraska", "US-NE")
//  val `Nevada`                                     = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Nevada", "US-NV")
//  val `New Hampshire`                              = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "New Hampshire", "US-NH")
//  val `New Jersey`                                 = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "New Jersey", "US-NJ")
//  val `New Mexico`                                 = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "New Mexico", "US-NM")
//  val `New York`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "New York", "US-NY")
//  val `North Carolina`                             = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "North Carolina", "US-NC")
//  val `North Dakota`                               = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "North Dakota", "US-ND")
//  val `Ohio`                                       = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Ohio", "US-OH")
//  val `Oklahoma`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Oklahoma", "US-OK")
//  val `Oregon`                                     = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Oregon", "US-OR")
//  val `Pennsylvania`                               = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Pennsylvania", "US-PA")
//  val `Rhode Island`                               = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Rhode Island", "US-RI")
//  val `South Carolina`                             = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "South Carolina", "US-SC")
//  val `South Dakota`                               = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "South Dakota", "US-SD")
//  val `Tennessee`                                  = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Tennessee", "US-TN")
//  val `Texas`                                      = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Texas", "US-TX")
//  val `Utah`                                       = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Utah", "US-UT")
//  val `Vermont`                                    = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Vermont", "US-VT")
//  val `Virginia`                                   = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Virginia", "US-VA")
//  val `Washington`                                 = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Washington", "US-WA")
//  val `West Virginia`                              = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "West Virginia", "US-WV")
//  val `Wisconsin`                                  = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Wisconsin", "US-WI")
//  val `Wyoming`                                    = new ISOCountrySubdivision(ISOCountry.UNITED_STATES, "Wyoming", "US-WY")
//  val `Artigas`                                    = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Artigas", "UY-AR")
//  val `Canelones`                                  = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Canelones", "UY-CA")
//  val `Cerro Largo`                                = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Cerro Largo", "UY-CL")
//  val `Colonia`                                    = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Colonia", "UY-CO")
//  val `Durazno`                                    = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Durazno", "UY-DU")
//  val `Flores`                                     = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Flores", "UY-FS")
//  val `Florida - Uruguay`                          = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Florida", "UY-FD")
//  val `Lavalleja`                                  = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Lavalleja", "UY-LA")
//  val `Maldonado`                                  = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Maldonado", "UY-MA")
//  val `Montevideo`                                 = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Montevideo", "UY-MO")
//  val `Paysandu`                                   = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Paysandu", "UY-PA")
//  val `Rio Negro`                                  = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Rio Negro", "UY-RN")
//  val `Rivera`                                     = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Rivera", "UY-RV")
//  val `Rocha`                                      = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Rocha", "UY-RO")
//  val `Salto`                                      = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Salto", "UY-SA")
//  val `San Jose`                                   = new ISOCountrySubdivision(ISOCountry.URUGUAY, "San Jose", "UY-SJ")
//  val `Soriano`                                    = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Soriano", "UY-SO")
//  val `Tacuarembo`                                 = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Tacuarembo", "UY-TA")
//  val `Treinta y Tres`                             = new ISOCountrySubdivision(ISOCountry.URUGUAY, "Treinta y Tres", "UY-TT")
//  val `Andijon`                                    = new ISOCountrySubdivision(ISOCountry.UZBEKISTAN, "Andijon", "UZ-AN")
//  val `Buxoro`                                     = new ISOCountrySubdivision(ISOCountry.UZBEKISTAN, "Buxoro", "UZ-BU")
//  val `Farg'ona`                                   = new ISOCountrySubdivision(ISOCountry.UZBEKISTAN, "Farg'ona", "UZ-FA")
//  val `Jizzax`                                     = new ISOCountrySubdivision(ISOCountry.UZBEKISTAN, "Jizzax", "UZ-JI")
//  val `Namangan`                                   = new ISOCountrySubdivision(ISOCountry.UZBEKISTAN, "Namangan", "UZ-NG")
//  val `Navoiy`                                     = new ISOCountrySubdivision(ISOCountry.UZBEKISTAN, "Navoiy", "UZ-NW")
//  val `Qashqadaryo`                                = new ISOCountrySubdivision(ISOCountry.UZBEKISTAN, "Qashqadaryo", "UZ-QA")
//  val `Qoraqalpog'iston Respublikasi`              = new ISOCountrySubdivision(ISOCountry.UZBEKISTAN, "Qoraqalpog'iston Respublikasi", "UZ-QR")
//  val `Samarqand`                                  = new ISOCountrySubdivision(ISOCountry.UZBEKISTAN, "Samarqand", "UZ-SA")
//  val `Sirdaryo`                                   = new ISOCountrySubdivision(ISOCountry.UZBEKISTAN, "Sirdaryo", "UZ-SI")
//  val `Surxondaryo`                                = new ISOCountrySubdivision(ISOCountry.UZBEKISTAN, "Surxondaryo", "UZ-SU")
//  val `Toshkent`                                   = new ISOCountrySubdivision(ISOCountry.UZBEKISTAN, "Toshkent", "UZ-TO")
//  val `Xorazm`                                     = new ISOCountrySubdivision(ISOCountry.UZBEKISTAN, "Xorazm", "UZ-XO")
//  val `Charlotte`                                  = new ISOCountrySubdivision(ISOCountry.SAINT_VINCENT_AND_THE_GRENADINES, "Charlotte", "VC-01")
//  val `Saint George`                               = new ISOCountrySubdivision(ISOCountry.SAINT_VINCENT_AND_THE_GRENADINES, "Saint George", "VC-04")
//  val `Amazonas - Venezuela`                       = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Amazonas", "VE-Z")
//  val `Anzoategui`                                 = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Anzoategui", "VE-B")
//  val `Apure`                                      = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Apure", "VE-C")
//  val `Aragua`                                     = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Aragua", "VE-D")
//  val `Barinas`                                    = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Barinas", "VE-E")
//  val `Bolivar`                                    = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Bolivar", "VE-F")
//  val `Carabobo`                                   = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Carabobo", "VE-G")
//  val `Cojedes`                                    = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Cojedes", "VE-H")
//  val `Delta Amacuro`                              = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Delta Amacuro", "VE-Y")
//  val `Distrito Federal - Venezuela`               = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Distrito Federal", "VE-A")
//  val `Falcon`                                     = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Falcon", "VE-I")
//  val `Guarico`                                    = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Guarico", "VE-J")
//  val `Lara`                                       = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Lara", "VE-K")
//  val `Merida`                                     = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Merida", "VE-L")
//  val `Miranda`                                    = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Miranda", "VE-M")
//  val `Monagas`                                    = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Monagas", "VE-N")
//  val `Nueva Esparta`                              = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Nueva Esparta", "VE-O")
//  val `Portuguesa`                                 = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Portuguesa", "VE-P")
//  val `Sucre`                                      = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Sucre", "VE-R")
//  val `Tachira`                                    = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Tachira", "VE-S")
//  val `Trujillo`                                   = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Trujillo", "VE-T")
//  val `Vargas`                                     = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Vargas", "VE-X")
//  val `Yaracuy`                                    = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Yaracuy", "VE-U")
//  val `Zulia`                                      = new ISOCountrySubdivision(ISOCountry.VENEZUELA, "Zulia", "VE-V")
//  val `An Giang`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "An Giang", "VN-44")
//  val `Bac Giang`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Bac Giang", "VN-54")
//  val `Bac Kan`                                    = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Bac Kan", "VN-53")
//  val `Bac Lieu`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Bac Lieu", "VN-55")
//  val `Bac Ninh`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Bac Ninh", "VN-56")
//  val `Ben Tre`                                    = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Ben Tre", "VN-50")
//  val `Binh Dinh`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Binh Dinh", "VN-31")
//  val `Binh Duong`                                 = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Binh Duong", "VN-57")
//  val `Binh Phuoc`                                 = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Binh Phuoc", "VN-58")
//  val `Binh Thuan`                                 = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Binh Thuan", "VN-40")
//  val `Ca Mau`                                     = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Ca Mau", "VN-59")
//  val `Can Tho`                                    = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Can Tho", "VN-CT")
//  val `Cao Bang`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Cao Bang", "VN-04")
//  val `Da Nang`                                    = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Da Nang", "VN-DN")
//  val `Dak Lak`                                    = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Dak Lak", "VN-33")
//  val `Dien Bien`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Dien Bien", "VN-71")
//  val `Dong Nai`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Dong Nai", "VN-39")
//  val `Dong Thap`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Dong Thap", "VN-45")
//  val `Gia Lai`                                    = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Gia Lai", "VN-30")
//  val `Ha Giang`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Ha Giang", "VN-03")
//  val `Ha Nam`                                     = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Ha Nam", "VN-63")
//  val `Ha Noi`                                     = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Ha Noi", "VN-HN")
//  val `Ha Tinh`                                    = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Ha Tinh", "VN-23")
//  val `Hai Duong`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Hai Duong", "VN-61")
//  val `Hai Phong`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Hai Phong", "VN-HP")
//  val `Ho Chi Minh`                                = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Ho Chi Minh", "VN-SG")
//  val `Hoa Binh`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Hoa Binh", "VN-14")
//  val `Hung Yen`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Hung Yen", "VN-66")
//  val `Khanh Hoa`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Khanh Hoa", "VN-34")
//  val `Kien Giang`                                 = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Kien Giang", "VN-47")
//  val `Lai Chau`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Lai Chau", "VN-01")
//  val `Lam Dong`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Lam Dong", "VN-35")
//  val `Lang Son`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Lang Son", "VN-09")
//  val `Lao Cai`                                    = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Lao Cai", "VN-02")
//  val `Long An`                                    = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Long An", "VN-41")
//  val `Nam Dinh`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Nam Dinh", "VN-67")
//  val `Nghe An`                                    = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Nghe An", "VN-22")
//  val `Ninh Binh`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Ninh Binh", "VN-18")
//  val `Ninh Thuan`                                 = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Ninh Thuan", "VN-36")
//  val `Phu Tho`                                    = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Phu Tho", "VN-68")
//  val `Phu Yen`                                    = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Phu Yen", "VN-32")
//  val `Quang Binh`                                 = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Quang Binh", "VN-24")
//  val `Quang Nam`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Quang Nam", "VN-27")
//  val `Quang Ngai`                                 = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Quang Ngai", "VN-29")
//  val `Quang Ninh`                                 = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Quang Ninh", "VN-13")
//  val `Quang Tri`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Quang Tri", "VN-25")
//  val `Soc Trang`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Soc Trang", "VN-52")
//  val `Son La`                                     = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Son La", "VN-05")
//  val `Tay Ninh`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Tay Ninh", "VN-37")
//  val `Thai Binh`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Thai Binh", "VN-20")
//  val `Thai Nguyen`                                = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Thai Nguyen", "VN-69")
//  val `Thanh Hoa`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Thanh Hoa", "VN-21")
//  val `Thua Thien-Hue`                             = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Thua Thien-Hue", "VN-26")
//  val `Tien Giang`                                 = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Tien Giang", "VN-46")
//  val `Tra Vinh`                                   = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Tra Vinh", "VN-51")
//  val `Tuyen Quang`                                = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Tuyen Quang", "VN-07")
//  val `Vinh Long`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Vinh Long", "VN-49")
//  val `Vinh Phuc`                                  = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Vinh Phuc", "VN-70")
//  val `Yen Bai`                                    = new ISOCountrySubdivision(ISOCountry.VIET_NAM, "Yen Bai", "VN-06")
//  val `Malampa`                                    = new ISOCountrySubdivision(ISOCountry.VANUATU, "Malampa", "VU-MAP")
//  val `Sanma`                                      = new ISOCountrySubdivision(ISOCountry.VANUATU, "Sanma", "VU-SAM")
//  val `Shefa`                                      = new ISOCountrySubdivision(ISOCountry.VANUATU, "Shefa", "VU-SEE")
//  val `Tafea`                                      = new ISOCountrySubdivision(ISOCountry.VANUATU, "Tafea", "VU-TAE")
//  val `Torba`                                      = new ISOCountrySubdivision(ISOCountry.VANUATU, "Torba", "VU-TOB")
//  val `Wallis and Futuna Islands`                  = new ISOCountrySubdivision(ISOCountry.WALLIS_AND_FUTUNA, "Wallis and Futuna Islands", "WF")
//  val `A'ana`                                      = new ISOCountrySubdivision(ISOCountry.SAMOA, "A'ana", "WS-AA")
//  val `Atua`                                       = new ISOCountrySubdivision(ISOCountry.SAMOA, "Atua", "WS-AT")
//  val `Gagaifomauga`                               = new ISOCountrySubdivision(ISOCountry.SAMOA, "Gagaifomauga", "WS-GI")
//  val `Palauli`                                    = new ISOCountrySubdivision(ISOCountry.SAMOA, "Palauli", "WS-PA")
//  val `Tuamasaga`                                  = new ISOCountrySubdivision(ISOCountry.SAMOA, "Tuamasaga", "WS-TU")
//  val `'Adan`                                      = new ISOCountrySubdivision(ISOCountry.YEMEN, "'Adan", "YE-AD")
//  val `'Amran`                                     = new ISOCountrySubdivision(ISOCountry.YEMEN, "'Amran", "YE-AM")
//  val `Abyan`                                      = new ISOCountrySubdivision(ISOCountry.YEMEN, "Abyan", "YE-AB")
//  val `Ad Dali`                                    = new ISOCountrySubdivision(ISOCountry.YEMEN, "Ad Dali", "YE-DA")
//  val `Al Bayda'`                                  = new ISOCountrySubdivision(ISOCountry.YEMEN, "Al Bayda'", "YE-BA")
//  val `Al Hudaydah`                                = new ISOCountrySubdivision(ISOCountry.YEMEN, "Al Hudaydah", "YE-HU")
//  val `Al Jawf`                                    = new ISOCountrySubdivision(ISOCountry.YEMEN, "Al Jawf", "YE-JA")
//  val `Al Mahrah`                                  = new ISOCountrySubdivision(ISOCountry.YEMEN, "Al Mahrah", "YE-MR")
//  val `Al Mahwit`                                  = new ISOCountrySubdivision(ISOCountry.YEMEN, "Al Mahwit", "YE-MW")
//  val `Amanat al 'Asimah`                          = new ISOCountrySubdivision(ISOCountry.YEMEN, "Amanat al 'Asimah", "YE-SA")
//  val `Dhamar`                                     = new ISOCountrySubdivision(ISOCountry.YEMEN, "Dhamar", "YE-DH")
//  val `Hadramawt`                                  = new ISOCountrySubdivision(ISOCountry.YEMEN, "Hadramawt", "YE-HD")
//  val `Hajjah`                                     = new ISOCountrySubdivision(ISOCountry.YEMEN, "Hajjah", "YE-HJ")
//  val `Ibb`                                        = new ISOCountrySubdivision(ISOCountry.YEMEN, "Ibb", "YE-IB")
//  val `Lahij`                                      = new ISOCountrySubdivision(ISOCountry.YEMEN, "Lahij", "YE-LA")
//  val `Ma'rib`                                     = new ISOCountrySubdivision(ISOCountry.YEMEN, "Ma'rib", "YE-MA")
//  val `Raymah`                                     = new ISOCountrySubdivision(ISOCountry.YEMEN, "Raymah", "YE-RA")
//  val `Sa'dah`                                     = new ISOCountrySubdivision(ISOCountry.YEMEN, "Sa'dah", "YE-SD")
//  val `San'a'`                                     = new ISOCountrySubdivision(ISOCountry.YEMEN, "San'a'", "YE-SN")
//  val `Shabwah`                                    = new ISOCountrySubdivision(ISOCountry.YEMEN, "Shabwah", "YE-SH")
//  val `Ta'izz`                                     = new ISOCountrySubdivision(ISOCountry.YEMEN, "Ta'izz", "YE-TA")
//  val `Eastern Cape`                               = new ISOCountrySubdivision(ISOCountry.SOUTH_AFRICA, "Eastern Cape", "ZA-EC")
//  val `Free State`                                 = new ISOCountrySubdivision(ISOCountry.SOUTH_AFRICA, "Free State", "ZA-FS")
//  val `Gauteng`                                    = new ISOCountrySubdivision(ISOCountry.SOUTH_AFRICA, "Gauteng", "ZA-GT")
//  val `KwaZulu-Natal`                              = new ISOCountrySubdivision(ISOCountry.SOUTH_AFRICA, "KwaZulu-Natal", "ZA-NL")
//  val `Limpopo`                                    = new ISOCountrySubdivision(ISOCountry.SOUTH_AFRICA, "Limpopo", "ZA-LP")
//  val `Mpumalanga`                                 = new ISOCountrySubdivision(ISOCountry.SOUTH_AFRICA, "Mpumalanga", "ZA-MP")
//  val `North-West`                                 = new ISOCountrySubdivision(ISOCountry.SOUTH_AFRICA, "North-West", "ZA-NW")
//  val `Northern Cape`                              = new ISOCountrySubdivision(ISOCountry.SOUTH_AFRICA, "Northern Cape", "ZA-NC")
//  val `Western Cape`                               = new ISOCountrySubdivision(ISOCountry.SOUTH_AFRICA, "Western Cape", "ZA-WC")
//  val `Central-Zambia`                             = new ISOCountrySubdivision(ISOCountry.ZAMBIA, "Central", "ZM-02")
//  val `Copperbelt`                                 = new ISOCountrySubdivision(ISOCountry.ZAMBIA, "Copperbelt", "ZM-08")
//  val `Eastern`                                    = new ISOCountrySubdivision(ISOCountry.ZAMBIA, "Eastern", "ZM-03")
//  val `Luapula`                                    = new ISOCountrySubdivision(ISOCountry.ZAMBIA, "Luapula", "ZM-04")
//  val `Lusaka`                                     = new ISOCountrySubdivision(ISOCountry.ZAMBIA, "Lusaka", "ZM-09")
//  val `North-Western`                              = new ISOCountrySubdivision(ISOCountry.ZAMBIA, "North-Western", "ZM-06")
//  val `Northern`                                   = new ISOCountrySubdivision(ISOCountry.ZAMBIA, "Northern", "ZM-05")
//  val `Southern`                                   = new ISOCountrySubdivision(ISOCountry.ZAMBIA, "Southern", "ZM-07")
//  val `Western`                                    = new ISOCountrySubdivision(ISOCountry.ZAMBIA, "Western", "ZM-01")
//  val `Bulawayo`                                   = new ISOCountrySubdivision(ISOCountry.ZIMBABWE, "Bulawayo", "ZW-BU")
//  val `Harare`                                     = new ISOCountrySubdivision(ISOCountry.ZIMBABWE, "Harare", "ZW-HA")
//  val `Manicaland`                                 = new ISOCountrySubdivision(ISOCountry.ZIMBABWE, "Manicaland", "ZW-MA")
//  val `Mashonaland Central`                        = new ISOCountrySubdivision(ISOCountry.ZIMBABWE, "Mashonaland Central", "ZW-MC")
//  val `Mashonaland East`                           = new ISOCountrySubdivision(ISOCountry.ZIMBABWE, "Mashonaland East", "ZW-ME")
//  val `Mashonaland West`                           = new ISOCountrySubdivision(ISOCountry.ZIMBABWE, "Mashonaland West", "ZW-MW")
//  val `Masvingo`                                   = new ISOCountrySubdivision(ISOCountry.ZIMBABWE, "Masvingo", "ZW-MV")
//  val `Matabeleland North`                         = new ISOCountrySubdivision(ISOCountry.ZIMBABWE, "Matabeleland North", "ZW-MN")
//  val `Matabeleland South`                         = new ISOCountrySubdivision(ISOCountry.ZIMBABWE, "Matabeleland South", "ZW-MS")
//  val `Midlands`                                   = new ISOCountrySubdivision(ISOCountry.ZIMBABWE, "Midlands", "ZW-MI")
//  // format: ON
//
//  /**
//   * Retrieves ISOCountrySubdivision based on alpha-2 code.
//   * https://www.iso.org/obp/ui/#search
//   *
//   * @param countryCode Country code, ie. US, CN
//   * @return ISOCountrySubdivision
//   */
//  def apply(countryCode: String): ISOCountrySubdivision = ISOCountrySubdivision.values.find(countryCode == _.toString) match {
//    case Some(country) â‡’ country
//    case _             â‡’ throw new ParseException(s"Invalid value '$countryCode' for ISOCountrySubdivision")
//  }
//
//  /**
//   * Retrieves ISOCountrySubdivision based on alpha-2 code.
//   * https://www.iso.org/obp/ui/#search
//   *
//   * @param countryCode Country code, ie. US, CN
//   * @return Option[ISOCountrySubdivision]
//   */
//  def from(countryCode: String): Option[ISOCountrySubdivision] = ISOCountrySubdivision.values.find(countryCode == _.toString) match {
//    case opt @ Some(_) â‡’ opt
//    case opt @ None    â‡’ opt
//  }
//}
